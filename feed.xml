<rss version="2.0">
  <channel>
    <title>Hyeonil's Note</title>
    <link>https://blog.nuti.pe.kr/</link>
    <description>Hyeonil's Dev Note
</description>
    <language>ko</language>
    <updated>2019-12-01T14:36:26+00:00</updated>
    <id>https://blog.nuti.pe.kr</id>
    <author>
      <name>Hyeonil Jeong</name>
      <email></email>
    </author>
    <image>
      <title>Hyeonil's Note</title>
      <url>https://blog.nuti.pe.kr/public/img/profile2.jpg</url>
      <link>https://blog.nuti.pe.kr/</link>
      <description>Hyeonil's Dev Note
</description>
    </image>

    
    <item>
      <title>블로그이사</title>
      <link>https://blog.nuti.pe.kr/2019/11/26/move/</link>
      <updated>2019-11-26T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2019/11/26/move</id>
      <content type="html">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;블로그 이사했습니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;에디터나 환경같은게 티스토리쪽이 더 좋은것 같아서 티스토리로 이사했습니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;블로그 내용은 일부를 제외하고는 옮겨놓았습니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이전한 블로그 검색 색인이 잘 되면 이 블로그는 폐쇄 예정입니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://nuti.tistory.com/&quot;&gt;블로그(https://nuti.tistory.com/)&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2019-11-26T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>2019-05-12 Daily Post</title>
      <link>https://blog.nuti.pe.kr/2019/05/12/diary/</link>
      <updated>2019-05-12T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2019/05/12/diary</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;클로저&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#클로저&quot;&gt;1. 클로저&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;자바스크립트의 클로저 개념을 4년만에 이해했다.
지금은 이해하고있지만 곧 다시 잊고 헷갈릴지도 모르겠다.
자바스크립트를 그냥 사용만 해보고 요즘 처음으로 공부해보고 있는데 알고있으면 도움이 많이 될 것 같다.
이것도 언젠가는 블로그에 정리해야겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;angular_js&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#angular_js&quot;&gt;2. Angular JS&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Angular JS? Angular? 버전 올라가면서 1과 2~가 부르는 명칭이 다르다했는데 기억이 안난다.
프론트엔드에 대해서 잘 모르고 실무에서는 프레임워크를 안써봐서 프론트엔드 프레임워크에 대해서는 잘 모르는데, 최근에 조금 보니 좋은것 같다.
Angular JS는 별로 좋지않다고 들었던 것 같은데 악명(?)에 비해서는 프론트엔드 멍청이가 보기에는 꽤나 좋은 프레임워크인 것 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;google_analytics&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#google_analytics&quot;&gt;3. Google Analytics&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Google Analytics는 생각보다 많은 정보를 수집해서 가지고 있다.
브라우저 정보부터 사용자 행동패턴까지 수집한 정보를 가공해서 많은 부분에 활용할 수 있도록 한다.
Google Analytics의 API에 대해서 보고 있는데, Google Analytics에서 웹 클라이언트로 제공해주는 사이트보다 훨씬 많은 것을 할 수 있는 것 같다.
필터링의 경우 사이트에서는 일부 제약이 있지만 API를 사용하면 제약이 많이 없어진다.
조회 성능때문에 제약을 걸어둔건가 싶기도 한데 좀 더 알아봐야겠다.
정리가 어느정도 되면 포스트 작성해야겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;잡담&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#잡담&quot;&gt;4. 잡담&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;최근들어 평일에는 어렵지만 주말에는 가급적이면 운동을 하고있다.
이제 2주째인데 주말에만 하면 살이 안빠지려나 싶다.
평일에도 할 수 있으면 해야지 싶은데 퇴근하면 만사가 귀찮으니 하려나 싶다.
그래도 술은 많이 줄였으니 조금은 가능성이 있어보인다.
정 안되면 스트레칭정도라도 하려고 노력해봐야겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;블로그는 1일 단위로 작성하려했는데 점점 1주일 단위가 되고있다.
1일 단위로 쓰면 내용이 별로 없기도 하고 평일에는 만사가 귀찮아서 안하게되는 것 같다.
그래도 노력이라도 해봐야겠다. 일기라도 쓸까&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2019-05-12T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>2019-05-05 Daily Post</title>
      <link>https://blog.nuti.pe.kr/2019/05/05/diary/</link>
      <updated>2019-05-05T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2019/05/05/diary</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;계약에_의한_설계design_by_contract&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#계약에_의한_설계design_by_contract&quot;&gt;1. 계약에 의한 설계(Design by Contract)&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;얼마전 스프링캠프에서 계약에 의한 설계(Design by Contract)라는 말을 들었다.
처음 듣는 용어라서(지금 생각해보면 들었을것 같은데 기억나지 않으니 처음듣는 것이다) 조금 찾아봤는데, 선행조건과 후행조건, 그리고 불변식이 핵심적인 내용이다.
간단하게 요약하자면 어떤 메소드 M에 a라는 값이 입력값으로 들어갔을 때 이 메소드는 항상 b라는 값을 반환한다는 것을 보장한다는 것이다.
선행조건과 후행조건으로는 a의 값과 b의 값에 대한 조건이 될 수 있다.(예를 들면 null이 아니다 라던지..)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이 용어와 설계기법은 모르고 있었지만 설계를할 때 가능한 지키려하는 방법 중 하나라서 친숙한 설계방법이었다.
개인적인 생각으로 저런 방법으로 설계를 함으로써 메소드의 역할과 책임이 분명해진다고 생각한다.
역할과 책임이 분명해짐으로 디버깅이 편하고, 무엇보다 입력값에 대한 반환값이 보장되어 TC작성에 유리한 설계방법이다.
특정 기능에 대해 입력값과 반환값이 보장되므로 보장되는 값으로 메소드를 실행해서 반환값을 확인하면 되기 때문이다.
또한, 기능간의 호출관계를 정리하기 좋은 설계방법이라고 생각한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;함수형 프로그래밍에서 함수가 되기 위한 조건 중 하나(맞나&amp;#8230;&amp;#8203;?)에도 이와 같은 조건이 필요했던 것으로 기억하여 무슨차이가 있나 생각해봤다.
고민하다 지인에게 질문을 했는데 지인피셜로 함수형 프로그래밍에서 이 개념을 포함하는 것이라 한다.
좀 더 자세한 내용은 독립 포스트로 작성해봐야겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;google_analytics&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#google_analytics&quot;&gt;2. Google Analytics&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Google Analytics는 페이지 로딩 시 &lt;code&gt;ga('send', 'pageview')&lt;/code&gt;로 페이지 조회 정보를 전송한다.
지금까지 페이지 조회에 대한 정보만 수집해서 분석하는 기능만 있는 줄 알았는데 생각보다 할 수 있는 기능이 많은 것 같다.
페이지 조회 외에도 이벤트 발생 시에도 &lt;code&gt;ga&lt;/code&gt; 함수를 호출해서 이벤트 전환 정보를 기록할 수도 있다.
또한, GA에서 제공하는 Dimension 값을 지정하거나 Custom Dimension 값을 지정해서 특정 사용자의 정보를 지정해서 특정 사용자의 행동 패턴도 파악할 수 있다.
아직 알아볼 기능이 많지만 이것도 공부를 좀 더 한 후 독립 포스트로 작성해야겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;블로그_카테고리_정리&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#블로그_카테고리_정리&quot;&gt;3. 블로그 카테고리 정리&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;블로그 카테고리가 많아서 정리를 했다. 일단 이대로 글을 계속 써보다가 개편해야될거같으면 다시 해야겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;디자인패턴&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#디자인패턴&quot;&gt;4. 디자인패턴&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;디자인패턴을 자주 검색해서 찾아본다. 검색하는 횟수가 좀 많아졌는데 그냥 블로그에 정리해놔야겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;ddd&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#ddd&quot;&gt;5. DDD&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;최범균님이 쓴 DDD START! 를 읽기 시작했다.
내용이 생각보다 심오한거같다.
앞부분만 조금 읽고 전반적으로 어떤내용을 다루는지 한 번 훑어본 다음에 책을 덮었다.
오늘은 정신이 좀 산만해서 집중이 잘 될때 제대로 읽어야겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;잡담&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#잡담&quot;&gt;6. 잡담&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;블로그에 정리한다고 한 내용은 언제 정리를 할지 모르겠다. 매번 한다하고 안한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;날이 엄청 풀리다 못해 더워졌다.
어린이날이다. 일요일이지만 대체휴일로 내일도 쉰다. 쉬면뭐하나 공부하고 운동해서 살이나 빼야지 ㅠㅠ&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이전회사에서 퇴사한지 1년 조금 넘게 지났다. 아직도 이전회사에서 사용하는 특정 모듈의 에이전트정보가 나한테 문자로 온다.
처음에는 웃겼는데 이거 정보 빼달라고 연락해야되나..&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2019-05-05T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>2019-04-30 Daily Post</title>
      <link>https://blog.nuti.pe.kr/2019/04/30/diary/</link>
      <updated>2019-04-30T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2019/04/30/diary</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;google_analytics&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#google_analytics&quot;&gt;1. Google Analytics&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;구글 어낼리틱스에서 유용하고 사용할만한 몇가지 기능을 알게되었다.
사용법도 조금씩 익혀가고 있다.
아직은 블로그에 달아놓기만 하고 제대로 활용하고있지 못한데 사용법을 조금씩 익히면서 유의미한 데이터를 볼 수 있는 방법을 조금씩 찾아봐야겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;현금영수증_용도변경&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#현금영수증_용도변경&quot;&gt;2. 현금영수증 용도변경&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;어제 홈택스에 용도변경신청을 했는데 오늘 답변이 왔다.
접수가 완료됐고, 변경되는데 1주일정도 걸린다고 한다.
생각보다 오래 걸리기는 하지만 되는게 어디야 기다려야지.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fiddler&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#fiddler&quot;&gt;3. Fiddler&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;아직 사용법이 익숙하진 않지만 fiddler를 통해 웹 요청을 확인한다.
주로 브라우저 개발자툴을 이용하기는 하지만 화면전환이 일어나는 곳에서는 피들러를 사용하고 있다.
피들러에서 프록시 설정을 하고, 모바일 기기에서 wifi 설정에서 프록시 설정을 하면 피들러를 사용하는 pc를 프록시할 수 있다.
http 뿐만 아니라 https도 약간의 설정과 신뢰과정을 거치면 요청을 중간에 가로챌 수 있다.
모바일 앱에서 요청을 보내고 그 요청을 피들러가 있는 프록시 서버에서 가로채서 요청/반환 값을 변조할 수 있다.
신뢰 과정을 거쳐야하기 때문에 해킹을 하는데 사용하기는 어렵지만 장난치기 좋을것 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;grails&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#grails&quot;&gt;4. Grails&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;망할 grails는 아무리 봐도 줏대가 없다.
프레임워크에서 사용하는 변수인데도 언제는 콜렉션 객체였다가 언제는 문자열 객체가 된다.
계층파괴는 둘째치고 이건 진짜 좀 너무하는거 아닌가?
마음에 드는건 기본 테스트 Framework로 Spock을 사용한다는거 하나뿐이다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;etc&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#etc&quot;&gt;5. etc&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;봄이여서 그런지 벌이 많이 나오고있다. 무섭다.
내일은 근로자의날이라 쉰다 너무 좋다 ^^&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;끄읕!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2019-04-30T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>2019-04-29 Daily Post</title>
      <link>https://blog.nuti.pe.kr/2019/04/29/diary/</link>
      <updated>2019-04-29T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2019/04/29/diary</id>
      <content type="html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;얼마나 자주, 오래 할 지는 모르겠지만 오늘부터는 가급적 그 날 알게된 것이나 겪은 일을 블로그에 기록하려 한다.
개발과 관련된 내용일 수도 있고, 전혀 관련없는 내용일 수도 있다.
그냥 글쓰기 연습겸 일기장처럼, 낙서장처럼 끄적일 것이다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;현금영수증_용도변경&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#현금영수증_용도변경&quot;&gt;1. 현금영수증 용도변경&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;현금영수증을 개인소득공제에서 지출증빙으로 용도변경 할 일이 생겼다.
판매 사이트나 판매단체에서는 딱히 이렇다할 방법이 없는것 같다.
지인으로부터 국세청에서 용도변경이 가능하다는 정보를 얻었다.
국세청에 문의해본 결과 인터넷으로 용도변경 신청시 필요한 서류는 신분증 사본(주민등록증, 운전면허증, 여권)과 건 별 내역서 혹은 현금영수증 사본(날짜, 승인번호 9자리, 금액이 모두 기재되어 있어야 함, 홈택스에서 다운 가능)이 필요하다는 답변을 받았다.
또한, 소비자 발급수단관리에 지출증빙 귀속 사업장이 입력되어있어야 한다고 한다.
그래서 필요한 서류를 준비해서 국세청에 용도변경 신청을 했다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;browser_request_content_type&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#browser_request_content_type&quot;&gt;2. Browser Request Content Type&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;브라우저에서 웹 서버로 요청을 보내면 무조건 Request Header에 Content Type이 포함된다고 생각하고 있었다.
그런데 오늘 보니 그게 아니였다. 그냥 GET 요청이면 Request Header에 Content Type이 포함되지 않는다.
이게 특정 브라우저에서만 그런지 모든 브라우저에서 동일한 것인지 까지는 확인해보지 않았지만 처음 알게된 사실이다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;apache_poi&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#apache_poi&quot;&gt;3. apache poi&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;엑셀과 관련된 기능을 처리하기 위해 많이 사용하는 라이브러리다.
이 apache poi가 특정 버전에서 특정 버전으로(minor) 올라가면서 어떤 기능의 기본 값(default value)이 바뀐다는 것을 얼마전에 알게 되었다.
오늘 버전을 올리면서 기본 값 뿐만 아니라 이 라이브러리를 사용하여 템플릿(?)처럼 기능을 제공하는 다른 라이브러리에서도 버전호환성이 맞지 않아 문제가 발생한다는 것을 알게되었다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;grails_filter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#grails_filter&quot;&gt;4. Grails Filter&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Grails의 Filter에서 uri로 필터를 지정할 수 있다는 것을 알고 있었다.
uri에 **를 사용해서 하위 경로를 포함시켜 필터를 적용할 수 있다.
그런데 서로 다른 패턴으로 동일한 필터를 적용시킬 수 있을 줄 알았는데 적용이 안된다.
controller로 조건을 걸 때는 'example*|sample*' 처럼 여러 패턴을 하나의 필터에 적용할 수 있는데 uri는 안된다.
uri도 여러 패턴을 적용할 수 있게 해줬으면 좋겠다는 생각을 한다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;asciidoc&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#asciidoc&quot;&gt;5. asciidoc&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;블로그를 asciidoc으로 쓰고 travisCI를 통해 빌드를 해서 github page로 관리를 하는데,
이 글을 쓰면서 특수문자 치환방지를 위해서 역슬래시(\)를 쓰면 된다는 것을 알게됐다.
근데 적용하고 보니 역슬래시도 같이나온다. 다시 알아봐야겠다.
그런데 역슬래시를 쓰고싶은데 역슬래시 치환방지는 어떻게 하는거지? 그냥 쓰면 되나?
일단 그냥 써봐야지&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;etc&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#etc&quot;&gt;6. etc&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;스프링캠프 참석 이후 자극을 받게 되었고, 이제 다시 공부를 조금씩 시작하려고 한다.
아예 안한 것은 아니지만 했다고 볼 수도 없었다.
책을 폈는데 눈에 들어오지 않는다.
오랫만에 하는거니깐 처음부터 무리하지 말아야겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이 글쓰기도 정말 얼마나 오래할 지 모르겠다.
매일은 아니더라도 가끔 한번씩은 써야지 라고 생각하고 있는데 첫날부터 이런 생각을 하는 것을 보면 정말 오래 못쓰겠지 싶다.
블로그도 쓰는 김에 카테고리 정리도 조만간 해야겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;끄읕!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2019-04-29T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>SpringCamp 2019 참석 후기</title>
      <link>https://blog.nuti.pe.kr/2019/04/28/spring-camp-2019/</link>
      <updated>2019-04-28T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2019/04/28/spring-camp-2019</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;Intro&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#Intro&quot;&gt;1. Intro&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SpringCamp는 2016년, 2017년 그리고 그 이후 2년만에 참석하는 것이다.
총 세 번 참석을 했는데, 지난번에 참석했을 때 모두 기억이 좋게 남아있어서 또 참석하게 되었다.
사실 작년에도 참석을 하고있었지만&amp;#8230;&amp;#8203; 티켓 판매사이트에서 티켓 판매 오픈을 이상하게 하는 바람에 멍떄리다가 티켓팅에 실패했다.
올해는 2번으로 나눠서 티켓판매를 했는데, 첫 날 작년처럼 멍때리다 실패하고, 두 번째 날 겨우 티켓팅에 성공했다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;올해는 주로 코틀린과 모니터링에 대한 세션이 많았고, 개발 경험에 대해서 공유하는 세션들도 있었다.
코틀린은 아니지만 DSL을 사용하고 있는 입장에서 DSL을 명세를 작성하거나 스크립트를 작성하는 것이 아닌 비즈니스 애플리케이션을 구현하는데 사용한다는 것에 대해 회의적인 생각을 가지고 있어서 코틀린에는 큰 관심이 없기 떄문에 코틀린과 관련된 세션은 듣지 않고 다른 세션 위주로 참석을 했다.
참석한 세션의 내용 대부분이 만족스러웠고, 내가 가진 경험이나 생각과 비교를 하면서 들을 수 있어서 만족스러웠다.
또한, 스프링의 기능이나 모듈등에 대해서 새로 알게된 것들이 있어서 좋았다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;참석한 세션은 아래와 같고, 하루가 지났다고 기억이 자세히나지 않는 부분이 많지만 기억나는 내용 및 요약한 내용을 정리한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;실전에 써먹는 스프링 부트 (김지헌님)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Monitoring With Actuator (서경원님)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자바에서 null을 안전히 다루는 방법 (박성철님)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;무엇을 테스트할 것인가? 어떻게 테스트할 것인가? (권용근님)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;당신도 할 수 있는 레거시 프로젝트 개선 이야기 (이경일님)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;spring-boot&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#spring-boot&quot;&gt;2. 실전에 써먹는 스프링 부트 (김지헌님)&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;업무에서 스프링 부트를 사용하고 있지는 않지만 개인적으로 공부를 조금씩이나마 하고 있고, 좀 더 알고 싶어서 세션에 참석했다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;스프링부트&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#스프링부트&quot;&gt;2.1. 스프링부트&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Netflix도 자바와 관련된 시스템은 모두 스프링 부트로 전환했다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Spring Boot&lt;/code&gt; - &lt;code&gt;Spring Cloud&lt;/code&gt; - &lt;code&gt;Spring Cloud Data Flow&lt;/code&gt;(&lt;a href=&quot;https://spring.io&quot; class=&quot;bare&quot;&gt;https://spring.io&lt;/a&gt; 에 있는 세가지인데 무엇을 설명했는지 기억이 안난다&amp;#8230;&amp;#8203;ㅠㅠ)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;개발자가 손쉽게 부트앱을 만들 수 있다고 스프링에서 홍보중이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Spring Boot&lt;/code&gt;는 &lt;code&gt;Spring Framework&lt;/code&gt;를 기반으로한 개발 플랫폼으로 &lt;code&gt;Spring Boot Starter&lt;/code&gt;, &lt;code&gt;Spring Framework&lt;/code&gt;, &lt;code&gt;Build Tool(Gradle, Maven)&lt;/code&gt;으로 구성되어 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;gradle&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#gradle&quot;&gt;2.2. Gradle&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Gradle&lt;/code&gt;은 &lt;code&gt;Kotlin DSL&lt;/code&gt;과 &lt;code&gt;Groovy DSL&lt;/code&gt;이 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Kotlin DSL의 장점&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;빠른 문서보기&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;코드 자동완성&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;에러 강조표시&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;코드 리팩토링&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Spring Boot Gradle Plugin&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;의존성 관리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;실행가능한 아카이브 패키징&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;애플리케이션 배포&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;애플리케이션 실행&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Actuator 지원&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;bombill_of_material&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#bombill_of_material&quot;&gt;2.3. BOM(Bill of Material)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;BOM&lt;/code&gt;으로 인해 버전을 명시적으로 작성하지않아도 된다.(호환 버전을 자동으로 import)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;spring-boot-dependencies&lt;/code&gt; 모듈이 의존성 관리를 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;enforce platform&lt;/code&gt;으로 다른 &lt;code&gt;BOM&lt;/code&gt; 파일 가져올 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;code&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#code&quot;&gt;2.4. Code&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;@Profile&lt;/code&gt; 어노테이션으로 프로파일에 따라 다른 빈 설정 및 주입을 할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;스프링 부트 자동구성(AutoConfiguration)&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Configuration&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Conditional~~&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;애플리케이션 속성을 실행시점에 외부에서 변경한다.&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;실행 시점에 실행 파라미터(?)로 주입&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@ConfigurationProperties&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;무슨 json 을 만들어냄&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;ConfigurationProperties Example&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;annotation&quot;&gt;@ConfigurationProperties&lt;/span&gt;(prefix = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;example.tt&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;ExampleProperties&lt;/span&gt; {
  &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; name;
  &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; key;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;후기&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#후기&quot;&gt;2.5. 후기&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;스프링 부트를 공부용으로 하는 작은 토이 프로젝트에서는 사용하고있다.
하지만 공부를 하는 것과 실무를 하는 것에는 차이가 있기 떄문에 공부를 하면서 알지 못한 처음보는 기능들을 알게되어서 좋았다.&lt;/p&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;monitoring-with-actuator&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#monitoring-with-actuator&quot;&gt;3. Monitoring With Actuator (서경원님)&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;두번째 세션은 부종민님의 &lt;code&gt;websocket&lt;/code&gt; 세션과 고민을 많이 하다가 밝히기 어려운 이유로 서경원님의 세션에 참석했다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;why_how_monitoring&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#why_how_monitoring&quot;&gt;3.1. Why &amp;amp; How Monitoring&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;장애 예방, 원인 파악, 조치&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;변경에 대한 상태 확인&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;성능 개선&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;장기적인 서비스 상태 분석&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;지표가 필요하다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;모니터링을 하는데 지표를 어디서 어떻게 획득할 것인가?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;nhn_모니터링_시스템&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#nhn_모니터링_시스템&quot;&gt;3.2. NHN 모니터링 시스템&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;서버 인프라 지표 수집&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;애플리케이션 지표 수집&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;모니터링 차트 제공&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;지표 감시 및 알림&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;spring_boot_actuator&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#spring_boot_actuator&quot;&gt;3.3. Spring Boot Actuator&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spring Boot 애플리케이션 모니터링&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;제어 도구 제공 - &lt;code&gt;endpoints&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;애플리케이션 지표 제공 - &lt;code&gt;metrics&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dependency&lt;/code&gt; 추가하면 &lt;code&gt;AutoConfiguration&lt;/code&gt;에 의해서 자동으로 등록한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여러 종류의 &lt;code&gt;endpoints&lt;/code&gt; 를 제공한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사용할 &lt;code&gt;endpoints&lt;/code&gt;를 설정을 통해서 제어 가능 및 외부 노출 설정이 가능하다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;enabled-by-default=false&lt;/code&gt;로 해서 기본 사용 옵션을 끌 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;spring-security&lt;/code&gt;로 endpoint 권한 설정 가능하다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;metrics_endpoint&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#metrics_endpoint&quot;&gt;3.4. Metrics Endpoint&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;jvm&lt;/code&gt;, &lt;code&gt;jdbc&lt;/code&gt;, &lt;code&gt;web&lt;/code&gt;, &lt;code&gt;library&lt;/code&gt; 등 여러가지 &lt;code&gt;metrics&lt;/code&gt; 제공한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Boot1&lt;/code&gt;에서 &lt;strong&gt;계층형&lt;/strong&gt;이었지만 2에서 &lt;strong&gt;&lt;code&gt;Dimension&lt;/code&gt;구조&lt;/strong&gt;로 변경(Tag를 붙입)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Dimension구조 장점&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이해하기 쉬움&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여러 관점에서 지표 분석 가능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;유연함 손쉬운 Tag 추가/삭제&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;RED Method - 반드시 측정해야하는 metrics&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Request Rate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Request Errors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Request Duration&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hystrix - Circuit Breaker 장애 내성 / 지연 내성&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;micrometer&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#micrometer&quot;&gt;3.5. Micrometer&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;설정밥법&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;dependency 추가 - AutoConfiguration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;prometheus endpoint 추가&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;후기_2&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#후기_2&quot;&gt;3.6. 후기&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;컨디션이 좋지 않아 많이 졸으면서 들었는데 &lt;code&gt;Actuator&lt;/code&gt;라는 모듈을 통해서 모니터링을 할 수 있고, 지표를 볼 수 있다는 새로운 사실을 알게되어 좋았다.
여러 서버를 돌린다면 &lt;code&gt;actuator&lt;/code&gt;를 통해서 서버에서 지표를 제공하고, 그 지표를 수집하는 저장소와 가시화할 수 있는 방법이 추가로 필요할 텐데 이에 맞춰서 인프라를 구축한다면 좋겠다는 생각을 했다.
다만, 전사적인 인프라를 구축하는데 사용하는데는 약간 무리가 있지 않을까 라는 생각을 하게 되었는데, 다른 한 편으로는 잘 알지는 못하지만 전사적으로 사용하는데 무리가 없으니 사용하고 있겠지 라고 생각했다.
또한, &lt;code&gt;actuator&lt;/code&gt;에서 가시화하는 일부 환경(?)에 맞춰서 효율적으로 데이터를 전달해준다는 정보는 정말 좋은 팁이였던 것 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;handle-null&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#handle-null&quot;&gt;4. 자바에서 null을 안전히 다루는 방법 (박성철님)&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;자바개발자라면 모두 궁금해할 만한 주제였다고 생각한다. 개발을 하는 과정에서 &lt;code&gt;null&lt;/code&gt;체크를 한다고 했지만 발생하는 &lt;code&gt;NullPointerException&lt;/code&gt;.
자바개발자가 가장 흔히 볼 수 있는 &lt;code&gt;Exception&lt;/code&gt;이고, 고민을 많이 하는 부분이라고 생각한다.
많은 개발자들에게 고통을 주는 &lt;code&gt;null&lt;/code&gt;을 안전하게 다루는 방법이라 하여 흥미가 생겨 이 세션을 듣게 되었다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;null에_대해서&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#null에_대해서&quot;&gt;4.1. null에 대해서&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;JVM 언어 전쟁&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2000년대 중반 동적 티이핑/스크립팅 언어가 유행&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2010년 전후 함수형 프로그래밍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2010년대 중반 null 안정성(실론, 코들린)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;null 참조&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;레코드 핸들링: 객체지향의 시초가 된 논문&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특별한 값이 없음을 나타내려고 null을 도입했고 이 값을 사용하려고 할 때 오류를 내도록 설계&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;두 참조값이 null 일 때 두 참조는 동일하다고 판단&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;자바의 null 참조&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;의미가 모호함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;초기화되지 않음, 정의되지 않음, 값이 없음, null 값&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;모든 참조의 기본 상태(값?)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;모든 참조는 null 가능&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;null을_안전하게_다루는_방법&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#null을_안전하게_다루는_방법&quot;&gt;4.2. null을 안전하게 다루는 방법&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;자바 기본 장치&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;단정문(assertion)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;공개 메서드에서 사용하지 않아야 함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;소비자이면서 생산자일 때 만 사용&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;enableassertions 또는 -ea 옵션으로 활성화&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;java.util.Objects&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;null을 핸들링할 수 있는 메소드들이 추가&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;java.util.Optional&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;변수와 반환값에 null을 사용하지 말라&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optional에 값이 있다가 확신하지 않는 한 get을 사용하지 말라&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;isPresent나 get은 가능한 사용하지 말라&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;필드 매개변수등으로는 사용하지 말라&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;직렬화 불가&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;반환값은 사용해도 된다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;null 잘 쓰는 법&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;API에 최대한 쓰지 말아라&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;null로 지나치게 유연한 메서드를 만들지 말고 명시적인 메서드를 만들어라&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;null을 반환하지 말라&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;반환 값이 꼭 있어야 한다면 null을 반환하지 말고 예외를 던져라&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;빈 반환값은 Null 객체&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사전조건과 사후조건을 확인하라: 계약에 의한 설계&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Design by Contract&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(개인적으로 좀 더 공부가 필요할 것 같음)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;null의 범위를 지역(클래스 메서드)화&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;후기_3&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#후기_3&quot;&gt;4.3. 후기&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;발표자 분께서 &lt;code&gt;null&lt;/code&gt;을 다루는 몇가지 방법에 대해서 공유를 해주셨고,
주의할 점에 대해서 공유를 해주셨는데 누군가 알려주지 않았지만 느낌적인 느낌으로 발표내용처럼 하고있던 부분들이 있어서 숙제검사를 받은 느낌이라 좋았고,
주의해야될 부분들이 정말 꿀팁이였던 것 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;testing&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#testing&quot;&gt;5. 무엇을 테스트할 것인가? 어떻게 테스트할 것인가? (권용근님)&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;평소에 테스트에 대해서 많은 관심을 가지고 있기 때문에 꼭 듣고싶었던 세션이다.
세션을 들어가기 전부터 기대를 많이 했고 내용이 궁금했다.
결론적으로는 이번 SpringCamp에서 가장 만족한 세션이었다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;테스트로부터_얻을_수_있는것&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#테스트로부터_얻을_수_있는것&quot;&gt;5.1. 테스트로부터 얻을 수 있는것&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;안정감과 자신감이 생긴다&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;무엇을_테스트할_것인가&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#무엇을_테스트할_것인가&quot;&gt;5.2. 무엇을 테스트할 것인가?&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;비즈니스 요구사항 정리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;구현 vs 설계&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;구현은 언젠가 변할 수 있고 테스트는 구현에서 무엇을 하는지 알 수 없고 알 필요도 없다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;테스트 불가능한 것&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;외부 요청&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;외부 저장소&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;어떻게_테스트할_것인가&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#어떻게_테스트할_것인가&quot;&gt;5.3. 어떻게 테스트할 것인가?&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;테스트할 수 없는 것을 바운더리 레이어까지 올려서 피해를 최소화한다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;제어할 수 없는 영역을 파라미터로 받을 수 있는지 검토한다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;비즈니스 요구사항 및 설계가 변경될 수 있다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Java, Spring Framework&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;테스트를 할 때 &lt;code&gt;Spring Context&lt;/code&gt;가 굳이 필요하지 않다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트를 할 때 비즈니스 프레임워크에 의존하지 말라&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Test Double&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;무엇을 &lt;code&gt;Test Double&lt;/code&gt;로 처리?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트가 구현을 알아야 함? &amp;#8658; 알 필요 없다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;제어할 수 없는 영역을 &lt;code&gt;Test Double&lt;/code&gt;로 처리&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Embedded&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;스프링에 내장된 시스템을 최대한 활용(ex. H2)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tip_rule&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#tip_rule&quot;&gt;5.4. Tip &amp;amp; Rule&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;테스트는 상호 독립적이어야 한다.(데이터간 의존성이 있어서는 안된다)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트안에 의도가 드러날 수 있도록 해라&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트코드도 리팩토링 대상이다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;후기_4&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#후기_4&quot;&gt;5.5. 후기&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;앞서 언급했지만 평소에 테스트에 대해서 많은 관심을 가지고 있어서 가장 기대를 했고 주의깊게 들은 세션이다.
전체적으로 나와 비슷한 생각의 내용으로 발표를 하셔서 방향을 잘 잡아가고 있구나 라고 검사를 받은 느낌이 들어서 기분이 좋았다.
다만 &lt;code&gt;Test Double&lt;/code&gt; 대상을 선git 정하는 부분에 대해서는 생각이 다른 부분이 있었다.
몇몇 이유때문에 테스트에서는 구현에서 어떤 행위를 하는지 알 수 있고 알아야 한다고 생각한다.
잘 못된 생각을 하고있을 수도 있지만 결론적으로 생각이 바뀌진 않았다.
생각이 바뀌진 않았지만 다른 사람의 생각을 듣고 고민을 하고 다시 생각해볼 수 있는 계기가 되어 좋았다.&lt;/p&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;improvement-legacy&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#improvement-legacy&quot;&gt;6. 당신도 할 수 있는 레거시 프로젝트 개선 이야기 (이경일님)&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;누구나 경험해본, 경험하고 있는, 경험할 예정인 레거시 프로젝트를 개선한 경험을 공유하는 세션이여서 매우 흥미로운 주제이고 궁금해서 세션을 들었다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;레거시_코드란&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#레거시_코드란&quot;&gt;6.1. 레거시 코드란?&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;막막한 코드?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;복잡한 코드?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;남(주로 퇴사자)이 짠 코드?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트코드로 커버되지 않으며 유지보수가 되고있지 않은 코드&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;방치되고있는 코드&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;오랜 시간 안정적으로 돌아가는 코드&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;레거시_코드를_외면하는_이유&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#레거시_코드를_외면하는_이유&quot;&gt;6.2. 레거시 코드를 외면하는 이유?&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;다른사람이 짠 코드는 수정하기 싫다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;신규프로젝트가 재미있다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;조직에서 인정받기 어렵다(ex. 평가가 좋지 않다&amp;#8230;&amp;#8203;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;레거시_코드_개선&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#레거시_코드_개선&quot;&gt;6.3. 레거시 코드 개선&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DDD? MSA?&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;하면 좋긴 하다&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;내편으로 만들기&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;왜 이렇게만들었어 지만 잘 동작은 하고 있음&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;로직 파악하기&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;직접 돌려보면서 파악하는 것이 중요&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트 케이스를 봐야함&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;하지만 테스트케이스가 없을수도 있다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;급한불부터 끄기&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;코드 리팩토링&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;리팩토링 대상 우선순위 정하기&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;불필요하거나 수정하기 어려운(? 유지보수하기 어려운?) 것은 과감하게 삭제&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;한걸음씩 가기&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;코드 패키지 분리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;분리가 용이하도록 설계 변경&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;코드를 분리할 수 있는 부분은 분리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;개선을 하면서 코드 단위가 커지면 또 분리&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;아픈 곳 고치기&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;리소스 사용량이 많은 부분은 추출&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;로컬 캐시를 사용할 수 있는 부분은 로컬캐시를 사용&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Memory Leak이 있는지 검토(?)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Matcher_AppendReplacement &amp;#8658; 메모리 효율이 좋음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OOM Killer가 죽일 떄가 있는데 이런 경우 로그를 확인해서 왜 죽였는지 파악&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;v.v2.2 이상이 아니면 쓰지 않는것이&amp;#8230;&amp;#8203;(안정화가 안됐을 가능성이 높다)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;조금 더 다듬기&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RAM Drive를 사용할 수 있는가?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Cloud Config&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;설정을 Cloud로 관리해서 배포 없이 설정 변경&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;basedir&lt;/code&gt;이 &lt;code&gt;/tmp/&lt;/code&gt; 밑에 들어가서 삭제될 수 있기 때문에 &lt;code&gt;basedir&lt;/code&gt; 수정하는것이 좋음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GC 튜닝 포인트 확인&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;후기_5&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#후기_5&quot;&gt;6.4. 후기&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이경일님의 세션은 레거시 코드를 개선해나간 과정에서 경험한 내용을 공유해주셨다.
세션을 들으면서 레거시 코드를 개선할 때 살펴봐야할 부분들과 주의할 부분 그리고 개선하는 순서 및 개선방법에 대해 생각을 해보게 되었고, 이후에 레거시를 개선한다면 많은 도움이 될 것 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;postscript&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#postscript&quot;&gt;7. 후기&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;전체적으로 참석한 세션이 모두 만족스러웠지만 특히 권용근님의 &lt;strong&gt;&quot;무엇을 테스트할 것인가? 어떻게 테스트할 것인가?&quot;&lt;/strong&gt;와
이경일님의 &lt;strong&gt;&quot;당신도 할 수 있는 레거시 프로젝트 개선 이야기&quot;&lt;/strong&gt; 세션이 정말 재미있었다.
이 중에도 권용근님의 세션이 정말 좋았는데, 앞서 작성한 후기 내용처럼 내가 생각하는 부분과 유사해서 '방향을 잘 잡아가고 있구나' 라고 생각을 할 수 있었고,
발표 내용중에 내가 생각하는 부분과 다른 부분에서는 '저렇게 할 수도 있구나, 저렇게 해서 얻는 이점이 뭐지?'라고 비교 및 고민을 해볼 수 있게되어 좋았다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;멀티리전 가용성을 위한 글로벌 캐싱 - Hidden micro services (정윤진님, 김필중님)&lt;/strong&gt;, &lt;strong&gt;Local Cache와 Invalidation Message Propagation 전략을 활용하여 API 성능 튜닝하기 (김민규님)&lt;/strong&gt;
이 두 세션도 듣고 싶었지만 컨디션이 좋지 않아 일찍 귀가를 해서 듣지 못해 조금 아쉬운 부분이 남았다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;최근에 조금 많이 안일해져서 이전처럼 공부를 많이 하고 있지 않았는데, 이번에 SpringCamp에 참석해서 나에게 다시 자극을 줄 수 있는 계기기 되었고 이로 인해 정말 참석을 잘 했다 라는 생각을 한다.
이번 행사에서 아쉬운 부분이 조금은 있었지만 SpringCamp는 참석할 때 마다 매우 만족하고 있고, 다음 SpringCamp도 벌써 기대가 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2019-04-28T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>기능 요구사항 명세(Specification)</title>
      <link>https://blog.nuti.pe.kr/2019/02/17/specification/</link>
      <updated>2019-02-17T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2019/02/17/specification</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intro&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#intro&quot;&gt;1. Intro&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;개발 경력이 많지는 않지만 백엔드 개발을 하며 느낀 분석, 설계, 문서화에 대해 기술한 포스트입니다.
의식의 흐름대로 작성한 내용이라 부족한 부분이 많을 수 있는데 잘 못된 내용이나 수정되어야하거나 추가되어야 할 내용이 있다면 글을 읽고 지적 부탁드리고,
문의를 남겨주시면 최대한 답변드리도록 하겠습니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;인간은 망각의 동물이다. 본인이 개발을 하더라도 시간이 지난다면 왜 그런식으로 개발을 했는지 잊어버리는 경우가 많다.
본인의 개발을 한 내용에 대해서도 그런데 다른사람이 개발한 내용은 어떠할까?
그 사람이 개발한 내용을 알기 위해 개발한 당사자를 찾아가서 왜 그런식으로 개발했는지, 어떤 이유가 있어서 이런 행위를 하는지 히스토리 확인을 해야된다.
이것도 그 사람과 알고있다는 가정하에 아주 좋은 케이스다.
다른사람에게 물어봤더니 그 사람도 왜 그렇게 했는지 기억해는데 한참이 걸리고, 개발한 당사자에게 물어볼 수 없는 상황이 많다.
이러한 이유때문에 기능개발을 할 때는 그 기능이 어떤 행위를 하는지에 대해 문서로 남겨놔야하고, 그 문서를 통해 본인 혹은 다른 사람들이 그 기능이 어떤 행위를 하는지 알 수 있게 해야한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;또한, 기능에 대한 문서를 작성하다 보면 그 기능이 해야하는 행위가 더욱 명확해지는 경우가 많다.
기능의 행위가 명확해지면 개발범위에 대해서 파악하는 것이 좀 더 수월해지고, 어떤식으로 개발을 할 지에 대한 설계가 가능해진다.
개발의 설계가 된다는 것은 기능 분리 및 관심사 분리가 가능해지는 것이고, 이는 이러한 과정을 거치지 않은 코드보다 뛰어난 품질의 코드를 작성하는데 도움이 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;물론 본인의 기억력에 대해서 엄청난 자신감을 가지고 있고, 다른 사람에게 그 기능이 무슨 행위를 하는지 전달할 필요나 생각이 없는 경우,
문서를 작성하지 않아도 머리속에서 설계가 가능하다면 문서를 작성할 필요는 없다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이번 포스트에서는 웹 프로그램의 백엔드 기능을 개발하는 과정에서 기능을 분석하고 이를 문서로 남기는 방법에 대해 작성을 한다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;기능_분석_및_설계&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#기능_분석_및_설계&quot;&gt;2. 기능 분석 및 설계&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;개발을 진행하면서 개발하는 기능에 대해서 분석행위를 하지 않는 사람은 없을 것이다.
분석행위를 하지 않는다는 것은 본인이 무엇을 개발하는지도 모르고 기계처럼 다른 사람의 지시에 의해서 타이핑을 하는것이지 개발을 하는것이 아니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;기획자가 따로 있어서 화면설계서를 보면서 기능개발을 한다고 가정을 해보겠다.
화면에서 어떤 버튼을 클릭하면 어떤 조건에 대해서 검사를 하고, 조건이 만족되면 어떤 결과가 도출된다는 것이 정의되어 있을 것이다.
이때 백엔드를 개발할때는 화면에 대한 생각을 없애야 한다.
&lt;strong&gt;화면에서 발생하는 하나의 트리거에 의해서 백엔드에서는 두가지, 세가지 이상의 기능이 실행될 수 있다.&lt;/strong&gt;
그렇기 때문에 화면을 참고해서 우선 기능분리를 해야된다.
앞의 예를 조금 더 자세하게 해서 사용자가 회원가입을 하기 위해 정보를 입력하고 가입 버튼을 눌렀을 때 아이디 중복검사, 비밀번호 정합성 검사를 거친 뒤 이를 만족하면 회원정보를 저장하고, 저장된 정보를 반환하는 기능을 개발해야된다고 가정을 하겠다.
기능 분석을 하지 않고 그저 화면설계서에 정의된 내용대로 가입 버튼을 눌렀으니 하나의 메소드에서 화면설계서에서 정의된 내용을 모두 하도록 개발을 한다고 가정을 해보겠다.
화면에서 하나의 트리거에 의해 발생했으니 하나로 묶어서 개발을 해서 결과값을 반환하게 된다면 처음 개발은 편할 것이다. 또한 코드가 한곳에 있으니 코드를 추적하기 쉬워보이기도 한다.
하지만 기능이 확장되거나 재사용되는 경우를 생각해보면 분리해서 개발하는 것이 좋다.
비밀번호 수정하는 기능이 추가되어 비밀번호 정합성 로직이 다른데도 필요하다고 생각을 해보자.
그렇다면 이때서야 비밀번호 정합성을 검사하는 로직을 분리해서 구성을 하거나, &lt;strong&gt;최악의 경우 Copy&amp;amp;Paste로 코드를 복사해서 사용할 것이다.&lt;/strong&gt;
비밀번호 정합성을 검사하는 로직이 그래도 메소드 내부에서 잘 구분되어 있어서 분리하기 쉽다면 좋지만, 다른 부분과 엮여서 분리하기 어려운 경우도 많다.
이 때문에, 최초에 개발을 진행하기 전에 기능에 대한 분석이 필요한 것이다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;기능 분석을 할 때 우선 어떤 기능들이 있는지 기능 리스트업을 해야된다.&lt;/strong&gt;
앞의 예시에서는 아이디 중복검사, 비밀번호 정합성 검사, 회원정보 저장 이렇게 3가지 기능이 있다.
이 외에도 &lt;code&gt;비기능 요구사항&lt;/code&gt;에 의해 실행 로그를 저장한다고 한다면 로그를 저장하는 기능까지 4가지 기능이 필요하게 된다.
기능 리스트업을 하면 상세 기능에 대한 분석이 필요하다. 비밀번호 정합성 검사를 예로들면 어떠한 규칙으로 정합성 검사를 하는지에 대해 분석을 하는 것이다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;기능에 대한 분석이 완료되면 설계를 하게 될 것이다.&lt;/strong&gt;
회원정보를 저장하는데는 아이디 중복검사와 비밀번호 정합성 검사는 &lt;code&gt;기능 요구사항&lt;/code&gt;이므로 기능 실행에 대한 필수 필요조건이 되고 &lt;code&gt;UseCase&lt;/code&gt;로 표현하면 &lt;code&gt;include&lt;/code&gt; 관계가 된다.
따라서 회원정보를 저장하는 로직에서 아이디 중복검사와 비밀번호 정합성 검사를 호출해서 사용하도록 개발을 할 수 있다.
실행 로그를 저장하는 행위는 &lt;code&gt;비기능 요구사항&lt;/code&gt;으로 회원정보를 저장하는 로직에서는 실행 로그가 저장되는지 알 필요가 없다.
따라서 실행로그를 저장하는 행위는 회원정보를 저장하는 로직에 포함되지 않고, 회원정보를 저장하는 로직이 실행는 전 후로 실행되도록 개발을 할 수 있을 것이다.
이런 식으로 기능에 대한 기본 분석 이후에 기능의 호출 관계 및 실행 순서에 대해서 설계를 할 수 있다.
또한 이런식으로 기능을 분석해서 분리해서 개발을 하게 된다면 이후에 동일한 기능을 사용하는 기능이 추가될 때 추가개발범위가 줄어들게되는 이점이 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;기능을 분리하는 것은 어려운 일이다.
추가확장의 가능성이 없어서 분리할 필요가 없는데 분리하여 오버스펙이 될 수도 있고, 추가확장의 가능성이 없어서 분리하지 않았지만 뜬금없이 추가확장이 되는 경우도 있다.
이 때문에 기능을 분리할 지 하나로 합칠지에 대해서는 많은 고민이 필요하고 많은 경험이 필요하다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;기능_명세_작성&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#기능_명세_작성&quot;&gt;3. 기능 명세 작성&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;기능 명세를 작성하는데는 특별한 룰은 없는 것 같다. 분석된 기능의 내용을 상세하게 기록하면 된다.
필자의 경우에는 우선 기능의 기본 기능에 대해 작성을 한다.
기본 기능에 대해서 작성한 이후에는 특이케이스 및 예외사항에 대해 작성을 한다.
그 다음에는 어떤 값을 가지고 이 기능을 실행하면 어떤 결과가 도출되는지에 대해 작성을 한다.
기능 명세는 상세하게 작성하면 할 수록 좋다. 그만큼 기능에 대해서 더욱 명확해지기 때문이다.
이렇게 작성한 명세서는 시나리오별로 잘 분리해서 &lt;code&gt;Test Case&lt;/code&gt;로도 사용할 수 있다.
기능분리를 했고, Input/Output에 대한 내용을 정리했고, 특이케이스 및 예외사항에 대해 정의를 했기 때문에 가능한 일이다.
또한, 분석과정에서 기능의 호출관계에 대해서도 분석을 했기 때문에 &lt;code&gt;Mock&lt;/code&gt; 대상에 대해서도 명확해지게 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;기능 명세를 작성하면서 주의할 점은 백엔드 기능에 대해 정의하는 것이므로 화면에 대한 내용이 들어가면 안된다는 것이다.
&lt;strong&gt;백엔드 개발자는 기능분석/설계를 하는 과정에서는 어떠한 경우라도 화면을 배제해야 된다.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;결론&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#결론&quot;&gt;4. 결론&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;기능을 분석하고 명세를 작성하는 것은 매우 어려운 일이라고 생각한다. 초기 개발과정에서는 쓸데없는 일로 오히려 리소스만 더 소모하는 것으로 보여질 수도 있다.
하지만 지금 당장이 아닌 미래를 본다면 충분히 가치있는 행동이고, 꼭 필요한 행동이다.
문서를 작성하다보면 더욱 많은 고민을 하게 될 것이고, 코드 뿐만 아니라 개인에게도 고민을 통해 얻는 이점이 충분히 있다고 생각을 한다.
또한, 기능을 분석/설계하는 행위와 명세를 작성하는 행위는 &lt;code&gt;Test Case&lt;/code&gt;를 작성하는것이나 &lt;code&gt;클린코드&lt;/code&gt;를 작성하는 것과도 밀접한 연관관계를 가지고 있기 때문에 이에 숙달되면 개발을 하는데 많은 도움이 될 것이라 생각을 한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;문서를 작성하지 않는 것보다 더욱 위험한 행동은 문서를 업데이트 하지 않는 것이다.&lt;/strong&gt;
없는 정보는 처음부터 찾아보면 되지만 잘못된 정보는 처음부터 찾아보지 않을 수 있고 이로인해 잘못된 판단을 할 수 있기 때문이다.
문서를 작성하지 않았다면 지금부터라도 문서를 작성하는 것에 습관을 들이고, 문서를 업데이트하는 습관을 들이는 것을 추천한다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2019-02-17T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>JVM Memory</title>
      <link>https://blog.nuti.pe.kr/2018/12/29/jvm-1/</link>
      <updated>2018-12-29T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2018/12/29/jvm-1</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jvm&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#jvm&quot;&gt;1. JVM?&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;정의된 스펙을 구현한 하나의 독자적인 프로세스 형태로 구동되는 &lt;code&gt;Runtime Instance&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Java&lt;/code&gt; 프로그램의 모든 것들을 실행시키는 기본 데몬&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Class&lt;/code&gt; 파일을 로딩하고 `ByteCode`를 해석하는 과정을 거쳐 메모리 리소스를 할당하고 관리하며 정보를 처리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Thread&lt;/code&gt; 관리 및 `Garbage Collection`과 같은 메모리 정리&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;용어&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#용어&quot;&gt;1.1. 용어&lt;/a&gt;&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;용어&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Java Source&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;사용자가 작성한 Java 코드&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Java Compiler&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Java Source 파일을 JVM이 해석할 수 있는 Java Byte Code로 변경하는 Compiler&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Java Byte Code&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Java Compiler에 의해 수행될 결과물(.class 파일)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Class Loader&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JVM 내로 .class파일들을 Load 하여 Loading된클래스들을 Runtime Data Area에 배치&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Execution Engine&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Loading된 클래스의 Byte Code를 해석&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Runtime Data Area&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JVM이 프로그램을 수행하기 위해 OS에서 할당 받은 메모리 공간&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Method Area&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;클래스, 변수, Method, static변수,상수 정보 등이 저장되는 영역으로 모든 Thread가 공유&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Heap Area&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;new 명령어로 생성된 인스턴스와 객체가 저장되는 영역으로 Garbage Collection 대상이고 모든 Thread가 공유&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stack Area&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Method 내에서 사용되는 값들(Argument, Local Variable, Return Value)이 저장되는 영역으로 메소드가 호출될 때 LIFO로 하나씩 생성되고,
메소드 실행이 완료되면 LIFO로 하나씩 삭제(Thread별로 하나씩 생성)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;PC Register&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CPU의 Register와 비슷한 역할로 현재 수행중인 JVM 명령의 주소값이 저장(Thread별로 하나씩 생성)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Native Method Stack&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;다른 언어(C/C++)의 메소드 호출을 위해 할당되는 구역으로 언어에 맞게 Stack이 형성&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;java_heap&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#java_heap&quot;&gt;2. Java Heap&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;용어&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Eden(Young)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Object가 생성될 때 Heap에 최초로 할당되는 영역&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Survivor (Young)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Eden 영역이 꽉 차서 Minor GC가 발생할 때 살아남은 Live Object들이 이동되는 영역&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Tenured(Old)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Young Generation에서 Live Object로 오래 살아남은 Object들이 이동되는 영역(특정 회수 이상 참조되어 기준 Age를 초과한 Object)
비교적 오랫동안 참조되어 이용되고 있고 앞으로도 계속 사용될 확률이 높은 Object들이 저장&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Permanent&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Class와 Method의 Meta 정보나 Static 변수와 같은 상수 정보들이 저장되는 영역(Java 8 이후로 사라짐)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Metaspace(Native)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Java 8부터 생긴 영역으로 Permanent 영역에서 저장하던 정보 중 Static Object를 제외한 정보들을 저장하는 영역&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Heap 영역은 JVM에 의해 관리되는 영역이고, Native 메모리는 OS레벨에서 관리하는 영역&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Permanent 초기치와 최대치 확인&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;java -XX:+PrintFlagsFinal -version -server | grep &amp;quot;PermSize&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Metaspace 초기치와 최대치 확인&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;java -XX:+PrintFlagsFinal -version -server | grep &amp;quot;MetaspaceSize&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2018-12-29T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>SpringOne Tour 2018 Memo</title>
      <link>https://blog.nuti.pe.kr/2018/11/08/spring-one/</link>
      <updated>2018-11-08T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2018/11/08/spring-one</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;전반적인_후기&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#전반적인_후기&quot;&gt;1. 전반적인 후기&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full_stack_reactive_kotlin_with_spring_framework_5_spring_boot2_project_reactor&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#full_stack_reactive_kotlin_with_spring_framework_5_spring_boot2_project_reactor&quot;&gt;2. Full Stack Reactive Kotlin! with Spring Framework 5, Spring Boot2, &amp;amp; Project Reactor&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Reactive Spring with Spring Boot 2.0&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mark Heckler, Developer Advocate, Pivotal&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;site: www.thehecklers.com&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;twitter: @mkheck&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;트위터 홍보중..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그 다음 이메일 홍보중&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;일하는거 증명해야된다고 자꾸 사진찍음&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이 아저씨 뭐하는 아저씨야&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Non-blocking, event-driven application&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;scale with a small number of threads&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;backpresure as a key ingredient&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;thread가 대기하는 비효율적인 상황을 없애고 효율적으로 쓰도록 한다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;적은 수의 thread로 많은 요청을 처리할 수 있도록한다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Callback이 많을수록 보기 어려워짐&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;reactive_streams_4_interfaces&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#reactive_streams_4_interfaces&quot;&gt;2.1. Reactive Streams: 4 interfaces&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Publisher&amp;lt;T&amp;gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;값을만들어냄&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Subscriber&amp;lt;T&amp;gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;소비자&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Subscription&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;???&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Processor&amp;lt;T&amp;gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Subscriber와 Subscription을 사용함&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;project_reactor_a_quick_overview&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#project_reactor_a_quick_overview&quot;&gt;2.2. Project Reactor: a quick overview&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;피보탈에서 진행중&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자바 8 사용&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring In Busy????? 뭐야이게&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flux를 반환&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;lets_code&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#lets_code&quot;&gt;2.3. Let&amp;#8217;s Code&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;start.spring.io&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;코틀린 설명중&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;라이브 코딩&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;코틀린 신기하당&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;helpful_resources&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#helpful_resources&quot;&gt;2.4. Helpful resources&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;www.reactive-streams.org&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;projectreactor.io&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;github.com/mkheck/FSR&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cloud_native_spring&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#cloud_native_spring&quot;&gt;3. Cloud-Native Spring&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Josh Long, Spring Developer Advocate, Pivotal&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;twitter: @starbuxman&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이 아저씨도 사진찍음&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;책 커버 동물때문에 책내는데 2년 걸렸다고함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ReactiveSpringBook.io&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;시작부터 라이브코딩&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reactive Web, Lombok, actuator, gateway&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;r2jdbc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이아저씨 이상해&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;라우터 게이트웨이용으로만 쓰면 좋을거같다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;초당 리퀘스트 갯수 개한할 수 있음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;뭔가 빠르게 코딩 잘하기는 한다..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;대규모에서 Http가 아니라 RSocket을 사용해서도 할 수 있음(byte stream)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;분산환경 및 더 빠르게 할 수 있음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;spring_cloud_gateway&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#spring_cloud_gateway&quot;&gt;4. Spring Cloud Gateway&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Younjin Jeong, Principal Technologist, Pivotal&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;다양한 클라이언트에서 각 서비스로 직접 접근을 했었음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이를 l7이나 proxy를 통해서 구현하기도 했지만 점점 처리해야되는 요구사항이 많아짐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;게이트웨이를 두고 헤더나 다른 값들을 통해 추가적이 요구사항을 충족할 수 있도록 하게 함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mesh: 사이드캅(?) 패턴과 프록시 패턴의 혼용?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zuul - netflix.github.com?&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;요청을 어디로보낼지 결정&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zuul2 - 비동기를 지원하기 위해 개발&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Latency, Thread Count, Concurrent Connections가 중요함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zuul2를 넣지 않음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Boot 2.0 + Project Reactor + Netty&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;유레카: Service Discovery&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ribbon: Latency에 따라 요청을 핸들링&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;curl은 사람이 쓸게 아님..HTTPie&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fallbackUri &amp;gt; Service API에 문제 발생 시 미리지정한 Fallback Message를 줄 수 있음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Zipkin&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cloud_event_driven_architectures_with_spring_cloud_stream_2_0&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#cloud_event_driven_architectures_with_spring_cloud_stream_2_0&quot;&gt;5. Cloud Event Driven Architectures with Spring Cloud Stream 2.0&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jakub Pilimon, Principal Technologist Pivotal&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;pillopl.github.io&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;github.com/ddd-by-examples&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;도메인을 어떻게 Discover 하는지&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이벤트를 발견하고 이벤트의 트리거를 찾는다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이벤트간의 연관관계(?)를 파악한다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;effect of events on invariants&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;용어를 정의한다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메세지가 중요하다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Event와 행위(Behavior)가 비슷한거같은데&amp;#8230;&amp;#8203;뭐가다른거지&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;동일한 처리를 하는것 같아도 행위가 다르면 별도로 메소드 처리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;given에 값이 들어가는 것 뿐만 아니라 전처리(선행 행위)를 쓸수있음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;io.vavr.io.collection.List.ofAll(&amp;#8230;&amp;#8203;).foldLeft&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;include, exclude가 아닌 broker를 두고 broker가 호출하는 식으로 사용하는것이 흐름을 파악하기 쉽다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consumer, Producer는 서로가 누구인지 알 필요가 없음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;APPLICATION_STREAM_JSON_VALUE&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인텔리제이에 되게 신기한기능있다&amp;#8230;&amp;#8203;. 블록지정해서 메소드를 만들어냄&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;굳이 하나로 다 쓸 필요 없이 and 라는 좋은것이 있음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;key&quot;&gt;given&lt;/span&gt;:
&lt;span class=&quot;key&quot;&gt;and&lt;/span&gt;:
&lt;span class=&quot;key&quot;&gt;and&lt;/span&gt;:
&lt;span class=&quot;key&quot;&gt;when&lt;/span&gt;:
&lt;span class=&quot;key&quot;&gt;and&lt;/span&gt;:
&lt;span class=&quot;key&quot;&gt;then&lt;/span&gt;:&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;spring_functions_serverless_and_you&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#spring_functions_serverless_and_you&quot;&gt;6. Spring, Functions, Serverless and You&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nate Schutta, Solution Architect, Pivotal&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IaaS(Infrastructure as a Service)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Docker Container&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kubernates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cloudfoundary&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;집중이 안댐 ㅠㅠ&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;spring_boot_spring_cloud_on_pivotal_application_service&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#spring_boot_spring_cloud_on_pivotal_application_service&quot;&gt;7. Spring Boot &amp;amp; Spring Cloud on Pivotal Application Service&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Younjin Jeong, Principal Technologist, Pivotal&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Full Cycle Developers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pivotal Application Service&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cred Hub&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pivotal 제품 소개 위주&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;using_spinnaker_to_create_a_development_workflow_on_kubernates&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#using_spinnaker_to_create_a_development_workflow_on_kubernates&quot;&gt;8. Using Spinnaker to Create a Development Workflow on Kubernates&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Paul Czarkowski, Principal Technologist, Pivotal&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;맥주(kloud)가 기술적이라함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;피보탈에서 돈받아서 피보탈얘기를 해야한다함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kubernates master가 여러 worker를 관리함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pod&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;StatefulSet&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Helm&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spinnaker&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Halyard&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;@_@&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2018-11-08T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>Spring MVC</title>
      <link>https://blog.nuti.pe.kr/2018/10/21/spring-mvc/</link>
      <updated>2018-10-21T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2018/10/21/spring-mvc</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;term&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#term&quot;&gt;1. 기본 용어&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;request-mapping&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#request-mapping&quot;&gt;1.1. @RequestMapping&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DefaultAnnotationHandlerMapping에서 매핑&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;url과 컨트롤러 메소드 매핑정보 생성&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;클래스, 메소드 레벨에 사용 가능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;url, method, parameter, header 정보를 통해 구분 가능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;url에 ANT스타일의 와일드카드 사용 가능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;상속 가능&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/home&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/home*&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/home/**/action&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/user/{userId}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;({&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/index&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;})
&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(value=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/user/{userId}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, method=RequestMethod.GET)
&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(value=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/login&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, method=RequestMethod.POST, params=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;env=mobile&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(value=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/login&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, method=RequestMethod.POST, params=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;env=!mobile&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(value=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/login&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, method=RequestMethod.POST, headers=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;content-type=application/json&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;controller&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#controller&quot;&gt;1.2. @Controller&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Controller를 정의&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여러 값들을 매핑할 수 있도록 함&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;SampleController&lt;/span&gt; {
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;servlet&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#servlet&quot;&gt;1.3. HttpServletRequest, HttpServletResponse&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;서블릿의 HttpServletRequest와 HttpServletResponse&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(HttpServletRequest request, HttpServletResponse response) {
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;http-session&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#http-session&quot;&gt;1.4. HttpSession&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;세션관리 객체&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(HttpSession session) {
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;web-request&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#web-request&quot;&gt;1.5. WebRequest&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HttpServletRequest의 정보를 대부분 그대로 갖고 있는 서블릿 API에 종속적이지 않은 오브젝트 타입&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;서블릿과 프틀릿 환경 양쪽에 모두 적용 가능한 범용적인 핸들러 인터셉터를 만들 때 활용하기 위함&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;native-web-request&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#native-web-request&quot;&gt;1.6. NativeWebRequest&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;WebRequest 내부에 감춰진 HttpServeltRequest와 같은 환경종속적인 오브젝트를 가져올 수 있는 메소드가 추가되어있음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;path-variable&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#path-variable&quot;&gt;1.7. @PathVariable&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;url로 들어가는 패스 변수를 받는다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// curl https://sample.nuti.pe.kr/home/1&lt;/span&gt;
&lt;span class=&quot;annotation&quot;&gt;@RequestMappint&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/home/{id}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(&lt;span class=&quot;annotation&quot;&gt;@PathVariable&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;predefined-type&quot;&gt;Long&lt;/span&gt; id) {
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;request-param&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#request-param&quot;&gt;1.8. @RequestParam&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;요청에서 쿼리스트링을 매핑&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// curl https://sample.nuti.pe.kr/home?id=1&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(&lt;span class=&quot;annotation&quot;&gt;@RequestParam&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;predefined-type&quot;&gt;Long&lt;/span&gt; id) {
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cookie-value&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#cookie-value&quot;&gt;1.9. @CookieValue&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;쿠키값을 받음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;필수여부 지정 가능&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// curl -b 'auth=abc' https://sample.nuti.pe.kr&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(&lt;span class=&quot;annotation&quot;&gt;@CookieValue&lt;/span&gt;(value=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, required=&lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;, defaultValue=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; auth) {
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;request-header&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#request-header&quot;&gt;1.10. @RequestHeader&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;헤더 정보를 받음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;필수여부 지정 가능&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// curl -H 'Content-Type: application/json' https://sample.nuti.pe.kr&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(&lt;span class=&quot;annotation&quot;&gt;@RequestHeader&lt;/span&gt;(value=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, required=&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;) &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; contentType) {
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;model-map&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#model-map&quot;&gt;1.11. Map, Model, ModelMap&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;모델 정보를 담는데 사용&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(&lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt; model) {
  ...
}
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(Model model) {
  ...
}
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(ModelMap model) {
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;model-attribute&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#model-attribute&quot;&gt;1.12. @ModelAttribute&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;생략가능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;모델 정보를 객체에 매핑&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;클라이언트에서 받은 정보를 매핑할 수도 있고, 서버에서 등록한 정보도 매핑할 수 있음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(User user) {
  ...
}
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(&lt;span class=&quot;annotation&quot;&gt;@ModelAttribute&lt;/span&gt; User user) {
  ...
}
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(&lt;span class=&quot;annotation&quot;&gt;@ModelAttribute&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;currentUser&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;) User user) {
  ...
}

&lt;span class=&quot;annotation&quot;&gt;@ModelAttribute&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; getUserId(HttpServletRequest request) {
  &lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; userId = request.getAttribute(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;) userId;
}
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(&lt;span class=&quot;annotation&quot;&gt;@ModelAttribute&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; userId) {
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;request-body&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#request-body&quot;&gt;1.13. @RequestBody&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;payload를 mapping&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// curl -X POST -H 'Content-Type: application/json' -d '{ &amp;quot;idx&amp;quot;: 1, &amp;quot;id&amp;quot;: &amp;quot;user&amp;quot; }'&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(&lt;span class=&quot;annotation&quot;&gt;@RequestBody&lt;/span&gt; User user) {
  ..
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;value&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#value&quot;&gt;1.14. @Value&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;프로퍼티값&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;상수 값&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특정 메소드를 호출한 결과 값&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;#{systemProperties['user.home']}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; userHome;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;model-and-view&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#model-and-view&quot;&gt;1.15. ModelAndView&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;반환하는 객체와 뷰를 지정&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(value = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; ModelAndView index(Device device) {
  ModelAndView mav = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ModelAndView();

  mav.addObject(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;isMobileDevice&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, device.isMobile());
  mav.setViewName(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);

  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mav;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;view&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#view&quot;&gt;1.16. 뷰 지정&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;String으로 뷰 이름을 지정 가능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;void로 사용할 시 url을 통해 view 지정&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이외 모델 사용시 url을 통해 지정&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; method(Model model) {
  ...
  return &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;;
}

&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/index&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(Model model) {
  ...
}

&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/index&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; User method() {
  ...
}

&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; method(RedirectAttributes redirectAttributes) {
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;redirect:/index&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;response-body&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#response-body&quot;&gt;1.17. @ResponseBody&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;반환값을 응답 본문으로 사용&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@ResponseBody&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; method() {
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;Hello&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;sessionattributes&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#sessionattributes&quot;&gt;@SessionAttributes&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;모델 객체를 세션에 저장해서 사용할 수 있도록 함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;세션의 값을 사용&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;annotation&quot;&gt;@SessionAttributes&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;SampleController&lt;/span&gt; {
  ...

  &lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; method(&lt;span class=&quot;annotation&quot;&gt;@ModelAttribute&lt;/span&gt; User user) {
    ...
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;session-status&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#session-status&quot;&gt;1.18. SessionStatus&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;세션을 관리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사용이 완료된 세션을 제거하지 않으면 메모리 누수가 발생할 수 있으므로 사용 후 제거해야함&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(SessionStatus sessionStatus) {
  sessionStatus.setComplete();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;binder&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#binder&quot;&gt;1.19. @InitBinder, WebDataBinder&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;메소드 파라미터를 바인딩 및 검증&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;allowedFields, disallowedFields&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; AgentValidator agentValidator;

&lt;span class=&quot;annotation&quot;&gt;@InitBinder&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;agent&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; initAgentBinder(WebDataBinder dataBinder) {
  dataBinder.setValidator(agentValidator);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;validator&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#validator&quot;&gt;1.20. Validator&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@ModelAttribute로 바인딩되는 모델의 데이터 검&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;AgentValidator&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Validator&lt;/span&gt; {
  &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; supports(&lt;span class=&quot;predefined-type&quot;&gt;Class&lt;/span&gt;&amp;lt;?&amp;gt; clazz) {
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;.class.isAssignableFrom(clazz));
  }

  &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; validate(&lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; target, Errors errors) {
    &lt;span class=&quot;predefined-type&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; agentList = &lt;span class=&quot;predefined-type&quot;&gt;Arrays&lt;/span&gt;.asList(OS_ANDROID.getName(), OS_IOS.getName());
    ErrorCode error = &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;;

    &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; agent = (&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;) target;

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (! agentList.contains(agent)) {
      error = ErrorCode.UnsupportedAgent;
    }

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error != &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;) {
      errors.reject(error.getCode(), error.getMessage());
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;valid&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#valid&quot;&gt;1.21. @Valid&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@ModelAttribute의 값을 검증&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@RequestMapping&lt;/span&gt;(value = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/{agent}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, method = RequestMethod.GET)
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; JigjakVersion getVersion(&lt;span class=&quot;annotation&quot;&gt;@ModelAttribute&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;agent&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;annotation&quot;&gt;@Valid&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; agent, BindingResult bindingResult) {
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;errors-binding-result&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#errors-binding-result&quot;&gt;1.22. Errors, BindingResult&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@ModelAttribute의 Validation 결과를 담음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; method(&lt;span class=&quot;annotation&quot;&gt;@ModelAttribute&lt;/span&gt; User, BindingResult result) {
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (bindingResult.hasErrors()) {
    ObjectError error = bindingResult.getAllErrors().get(&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;);

    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ResourceNotFoundException(UnsupportedAgent);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;converter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#converter&quot;&gt;1.23. Converter&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;데이터 바인딩 시 데이터를 변환&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ex) String &amp;#8594; 클래스&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;클래스 &amp;#8594; String&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;Converters&lt;/span&gt;&amp;lt;S, T&amp;gt; {
  T convert(S source);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;conversion-service&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#conversion-service&quot;&gt;1.24. ConversionService&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;컨트롤러 값 바인딩 시 데이터 타입 변환에 사용&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InitBinder 혹은 ConfigurableWebBindingInitializer를 통해 등록&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;org.springframework.context.support.ConversionServiceFactoryBean&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;converters&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;set&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;kr.pe.nuti.converter.CustomConverter&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/set&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Autowired&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; ConversionService conversionService;

&lt;span class=&quot;annotation&quot;&gt;@InitBinder&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; initBinder(WEbDataBinder dataBinder) {
  dataBinder.setConversionService(&lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.conversionService);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;formatter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#formatter&quot;&gt;1.25. Formatter, FormattingConversionService&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;오브젝트 &amp;gt; 문자열&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;문자열 &amp;gt; 오브젝트&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;locale이 포함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;html&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;number-format&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#number-format&quot;&gt;1.26. @NumberFormat&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;숫자, 문자 포맷&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@NumberFormat&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;$###,##0.00&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;predefined-type&quot;&gt;BigDecimal&lt;/span&gt; price;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;date-time-format&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#date-time-format&quot;&gt;1.27. @DateTimeFormat&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;날짜, 문자 포맷&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@DateTimeFormat&lt;/span&gt;(pattern=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;yyyy/MM/dd&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;predefined-type&quot;&gt;Date&lt;/span&gt; date;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;message-converter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#message-converter&quot;&gt;1.28. Message Converter&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;요청본문과 응답 본문을 다룸&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;bytearrayhttpmessageconverter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#bytearrayhttpmessageconverter&quot;&gt;1.28.1. ByteArrayHttpMessageConverter&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;byte[] 지원&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;application/octet-stream&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;stringhttpconverter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#stringhttpconverter&quot;&gt;1.28.2. StringHttpConverter&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;xml, json같이 문서 포맷이 있다면 적절한 파서를 붙여서 활용할 수 있음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;formhttpmessageconverter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#formhttpmessageconverter&quot;&gt;1.28.3. FormHttpMessageConverter&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;application/x-www-form-urlencoded&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;sourcehttpmessageconverter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#sourcehttpmessageconverter&quot;&gt;1.28.4. SourceHttpMessageConverter&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;application/json&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;application/*+xml&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;text/xml&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;jaxb2rootelementhttpmessageconverter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#jaxb2rootelementhttpmessageconverter&quot;&gt;1.28.5. Jaxb2RootElementHttpMessageConverter&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;JAXB2의 @XmlRootElement, @XmlType이 붙은 클래스를 이용해 XML과 오브젝트를 변환할 때 사용&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;marshallinghttpmessageconverter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#marshallinghttpmessageconverter&quot;&gt;1.28.6. MarshallingHttpMessageConverter&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Marshaller와 UnMarshaller&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;XML문서와 자바 오브젝트 사이의 변환을 지원&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;mappingjacksonhttpmessageconverter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#mappingjacksonhttpmessageconverter&quot;&gt;1.28.7. MappingJacksonHttpMessageConverter&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jackson ObjectMapper를 통해서 JSON 문서와 자바오브젝트 변환을 지원&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mvc-annotation-driven&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#mvc-annotation-driven&quot;&gt;1.29. mvc:annotation-driven&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MVC에서 지원하는 빈을 자동으로 등록&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;라이브러리의 존재 여부를 파악해서 자동으로 관련 빈을 등록&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;defaultannotationhandlermapping&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#defaultannotationhandlermapping&quot;&gt;1.29.1. DefaultAnnotationHandlerMapping&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@RequestMapping을 이용한 핸들러 매핑 전략을 등록&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;annotationmethodhandleradapter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#annotationmethodhandleradapter&quot;&gt;1.29.2. AnnotationMethodHandlerAdapter&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DispatcherServlet이 자동으로 등록해주는 디폴트 핸들러 어댑터&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;configurablewebbindinginitializer&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#configurablewebbindinginitializer&quot;&gt;1.29.3. ConfigurableWebBindingInitializer&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;모든 컨트롤러 메소드에 자동으로 적용되는 WebDataBinder 초기화용 빈을 등록&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;메세지_컨버터&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#메세지_컨버터&quot;&gt;1.29.4. 메세지 컨버터&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;기본 컨버터와 라이브러리 유무에 따라 Jaxb2RootElementHttpMessageConverter, MappingJacksonHttpMessageConverter 등록&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;validator_2&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#validator_2&quot;&gt;1.29.5. validator&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;모든 컨테이너에 일괄 적용하는 validator 등록&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;conversion_service&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#conversion_service&quot;&gt;1.29.6. conversion-service&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Default: FormattingConversionServiceFactoryBean&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;mvc:annotation-driven&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;conversion-service&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;myConversionService&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;tag&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;myConversionService&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;FormattingConversionServiceFactoryBean&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;converters&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;interceptors&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#interceptors&quot;&gt;1.30. Interceptors&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;컨트롤러 전후로 작업할 내용 지정&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;mvc:interceptors&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;kr.pe.nuti.GlobalInterceptor&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/mvc:intercptors&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;mvc:interceptors&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;mvc:interceptor&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;mvc:mapping&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/home/*&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;kr.pe.nuti.HomeInterceptor&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/mvc:interceptor&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/mvc:interceptors&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;view-controller&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#view-controller&quot;&gt;1.31. view-controller&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;뷰로 매핑만 할 경우&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;mvc:view-controller&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;view-name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/index&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;mvc-extension&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#mvc-extension&quot;&gt;2. MVC 확장 포인트&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;session-attrubute-store&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#session-attrubute-store&quot;&gt;2.1. SessionAttributeStore&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@SessionAttribute 에 의해 지정된 모델은 세션에 저장된&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;세션은 메모리에 저장됨&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메모리 문제를 해결하기 위해 별도의 저장소를 사용해서 사용할 수 있음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;web-argument-resolver&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#web-argument-resolver&quot;&gt;2.2. WebArgumentResolver&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;어플리케이션에 특화된 컨트롤러 파라미터 타입을 추가할 수 있음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;암호화된 정보를 복호화해서 파라미터로 넘김&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;model-and-view-resolver&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#model-and-view-resolver&quot;&gt;2.3. ModelAndViewResolver&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;컨트롤러 메소드의 리턴 타입과 메소드 정보, 어노테이션 정보등을 통해 ModelAndView를 생성&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;활용도는 낮음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;handler-method-return-value-handler&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#handler-method-return-value-handler&quot;&gt;2.4. HandlerMethodReturnValueHandler&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;리턴 값을 처리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RequestMaiingHalderAdapter의 customReturnValueHandlers 프로퍼티에 주입&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;url-resource-manage&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#url-resource-manage&quot;&gt;3. url과 리소스 관리&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mvc-default-servlet-handler&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#mvc-default-servlet-handler&quot;&gt;3.1. &amp;lt;mvc:default-servlet-handler /&amp;gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;servlet path가 /일 경우 모든 요청이 DispatcherServlet으로 전달됨&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이때 함께 사용해야됨&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@RequestMapping 정보에 의존&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;매핑된 정보를 찾을 수 없을 시 가장 우선순위가 낮은 디폴트 서블릿 매핑 전략을 통해 컨테이너가 제공하는 디폴트 서블릿으로 요청이 포워딩&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;동작원리는 이해할 필요는 없고 같이 사용해야된다는 것만 기억&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;url-resource&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#url-resource&quot;&gt;3.2. &amp;lt;url:resource /&amp;gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;요청에 따라 리소스 경로를 지정&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;mvc:resources&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;mapping&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/resources/**&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;location&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/resources/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2018-10-21T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>Spock Framework</title>
      <link>https://blog.nuti.pe.kr/2018/07/14/spock-framework/</link>
      <updated>2018-07-14T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2018/07/14/spock-framework</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;spock_framework&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#spock_framework&quot;&gt;1. Spock Framework?&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Spock Framework&lt;/code&gt;는 &lt;code&gt;Groovy&lt;/code&gt; 언어에서 동작하는 &lt;code&gt;명세&lt;/code&gt; 프레임워크로 &lt;code&gt;BDD&lt;/code&gt;를 편하게할 수 있도록 도와준다.
&lt;code&gt;Spock&lt;/code&gt;은 &lt;code&gt;Java&lt;/code&gt;와 &lt;code&gt;Groovy&lt;/code&gt; 어플리케이션을 위한 명세 프레임워크로 &lt;code&gt;Groovy(DSL)&lt;/code&gt;로 작성하므로 간결하고 직관적인 장점이 있다.
또한, 기존의 &lt;code&gt;Java&lt;/code&gt;의 &lt;code&gt;JUnit&lt;/code&gt;, &lt;code&gt;Hamcrest&lt;/code&gt;, &lt;code&gt;Mockito&lt;/code&gt;를 전부 다 학습하는 것보다 손쉽게 학습할 수 있고,
&lt;code&gt;Mock&lt;/code&gt;, &lt;code&gt;Stub&lt;/code&gt;, &lt;code&gt;Spy&lt;/code&gt;등 사용이 편리하고 명세를 작성하기 편리하다.
&lt;code&gt;Java&lt;/code&gt;와 &lt;code&gt;Groovy&lt;/code&gt; 어플리케이션을 위한 프레임워크이므로 &lt;code&gt;Java&lt;/code&gt;환경에서도 사용할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;lifecycle&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#lifecycle&quot;&gt;2. Lifecycle&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;setup: 메소드 실행 전에 실행(given)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;when: 행위에 대한 명세를 작성&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;then: 행위에 대한 예측을 작성&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;expect: 행위에 대한 명세와 예측을 작성(when + then)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cleanup: 메소드 실행 후에 실행&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;where: 여러 값에 대해 반복행위를 할 때 작성&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/spock/spock-lifecycle.png&quot; alt=&quot;spock lifecycle&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Spock Lifecycle&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;출처: &lt;a href=&quot;http://spockframework.org/spock/docs/1.1/spock_primer.html&quot; class=&quot;bare&quot;&gt;http://spockframework.org/spock/docs/1.1/spock_primer.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;example&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#example&quot;&gt;3. Example&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hyeonil/spock-examples&quot;&gt;기본 예시&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;앞서 &lt;code&gt;BDD&lt;/code&gt; &lt;a href=&quot;http://blog.nuti.pe.kr/2018/07/14/bdd/&quot;&gt;포스트에서 작성한 예시&lt;/a&gt;를 &lt;code&gt;Spock&lt;/code&gt;으로 변환하게 되면 아래와 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; kr.pe.nuti.home.api.service.todo

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.domain.todo.TodoItem&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.enumeration.todo.TodoState&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.exception.todo.IllegalStateChangeException&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.repository.todo.TodoItemRepository&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;spock.lang.Issue&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;spock.lang.Narrative&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;spock.lang.See&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;spock.lang.Specification&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;spock.lang.Title&lt;/span&gt;

&lt;span class=&quot;annotation&quot;&gt;@Title&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Todo Item의 상태를 변경한다.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;annotation&quot;&gt;@Narrative&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;
Todo Management System을 사용하는 사용자가
Todo Item의 상태관리를 위해서
각각의 Todo Item의 상태를 변경할 수 있다.
상태 변경은 Todo &amp;gt; Doing, Doing &amp;gt; Done,
Done &amp;gt; Doing, Doing &amp;gt; Todo로만 할 수 있다.
&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;TodoServiceStateChangeSpec&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;extends&lt;/span&gt; Specification {

  TodoService service
  &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; todoItemRepository

  &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;setup&lt;/span&gt;() {
    todoItemRepository = Mock(TodoItemRepository)
    service = Spy(TodoService)
    service.todoItemRepository = todoItemRepository
  }

  &lt;span class=&quot;annotation&quot;&gt;@See&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;https://github.com/hyeonil/smart-home-api/issues/6&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;])
  &lt;span class=&quot;annotation&quot;&gt;@Issue&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;#6&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
  &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Todo상태를 Doing상태로 변경하면 상태가 변경된다.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;() {
    &lt;span class=&quot;key&quot;&gt;given&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Todo 상태의 Todo Item&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    TodoItem savedItem = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TodoItem([&lt;span class=&quot;key&quot;&gt;idx&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;state&lt;/span&gt;: TodoState.TODO])
    TodoItem changedItem = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TodoItem([&lt;span class=&quot;key&quot;&gt;idx&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;state&lt;/span&gt;: TodoState.DOING])
    todoItemRepository.findById(_) &amp;gt;&amp;gt; Optional.of(savedItem)
    todoItemRepository.save(_) &amp;gt;&amp;gt;  changedItem

    TodoItem item = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TodoItem([&lt;span class=&quot;key&quot;&gt;idx&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;])

    &lt;span class=&quot;key&quot;&gt;when&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Todo Item의 상태를 Doing으로 변경한다.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; result = service.changeState(item, TodoState.DOING)

    &lt;span class=&quot;key&quot;&gt;then&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Todo Item의 상태가 Doing으로 변경된다.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt; * service.getItem(_)
    result.state == TodoState.DOING
  }

  &lt;span class=&quot;annotation&quot;&gt;@See&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;https://github.com/hyeonil/smart-home-api/issues/6&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;])
  &lt;span class=&quot;annotation&quot;&gt;@Issue&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;#6&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
  &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Todo상태를 Done상태로 변경하면 상태가 변경되지 않고 예외사항이 발생한다.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;() {
    &lt;span class=&quot;key&quot;&gt;given&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Todo 상태의 Todo Item&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    TodoItem savedItem = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TodoItem([&lt;span class=&quot;key&quot;&gt;idx&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;, &lt;span class=&quot;key&quot;&gt;state&lt;/span&gt;: TodoState.TODO])
    todoItemRepository.findById(_) &amp;gt;&amp;gt; Optional.of(savedItem)

    TodoItem item = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TodoItem([&lt;span class=&quot;key&quot;&gt;idx&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;])

    &lt;span class=&quot;key&quot;&gt;when&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Todo Item의 상태를 Done으로 변경한다.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    service.changeState(item, TodoState.DONE)

    &lt;span class=&quot;key&quot;&gt;then&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Todo Item의 상태가 변경되지 않고 예외사항이 발생한다.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt; * service.getItem(_)
    thrown(IllegalStateChangeException)
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2018-07-14T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>BDD</title>
      <link>https://blog.nuti.pe.kr/2018/07/14/bdd/</link>
      <updated>2018-07-14T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2018/07/14/bdd</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;bddbehavior_driven_development란&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#bddbehavior_driven_development란&quot;&gt;1. BDD(Behavior-Driven Development)란?&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;BDD&lt;/code&gt;는 &lt;code&gt;TDD&lt;/code&gt;에서 파생된 개발 방법론으로 테스트에 대한 집중보다는 명세와 행위에 대해 비중을 두고 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tdd&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#tdd&quot;&gt;1.1. TDD&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/bdd/tdd.jpg&quot; alt=&quot;tdd&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. TDD&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;TDD&lt;/code&gt;는 &lt;code&gt;Test Case(이하 TC)&lt;/code&gt;를 작성하고 실패를 확인 후 실제 비즈니스 코드를 작성, &lt;code&gt;TC&lt;/code&gt; 성공확인을 하나의 반복주기로 잡고,
이를 반복해서 진행하는 것을 요구한다.
하지만 &lt;code&gt;TC&lt;/code&gt;를 작성하는데 의문점이 있다.
코드가 없는데 무엇을 테스트할 것인가?
&lt;code&gt;TDD&lt;/code&gt;를 보면 무엇을 테스하는지에 대한 명시는 되어있지 않다.
또한, 보통 테스트라 하면 제품이 나오면 그 제품을 사용해보면서 제대로 작동하는지 확인을 해보는 과정인데,
제품이 나오지도 않았는데 테스트를 한다라는 것부터 모순이 생긴다.
이를 개선한 것이 &lt;code&gt;BDD&lt;/code&gt;라고 생각을 한다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;bddbehavior_driven_development&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#bddbehavior_driven_development&quot;&gt;1.2. BDD(Behavior-Driven Development)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;BDD&lt;/code&gt;는 위에서 언급한바와 같이 &lt;code&gt;TDD&lt;/code&gt;에서 파생된 개발방법론이고, 코드의 구현과 테스트 보다는 행위(동작, 명세)에 집중하고 있다.
&lt;code&gt;BDD&lt;/code&gt;에서는 기능의 &lt;code&gt;TC&lt;/code&gt;를 작성하는 것이 아닌 명세를 작성하는 것이고, 요구사항 분석 후 기능 설계 및 명세작성, 코드구현의 순서로 진행을 하게된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;BDD&lt;/code&gt;에서 &lt;code&gt;테스트(Test)&lt;/code&gt; 라는 단어를 사용하지 않고 &lt;code&gt;명세(Specification)&lt;/code&gt;를 사용함으로써 많은 것이 바뀌게 된다.
&lt;code&gt;TDD&lt;/code&gt;에서는 &lt;code&gt;테스트&lt;/code&gt;라는 단어를 사용하게 되어 혼란과 모순을 가지게 되었는데,
&lt;code&gt;BDD&lt;/code&gt;에서는 이를 &lt;code&gt;명세&lt;/code&gt;라는 단어로 사용함으로써, 제품이 생산되기 전에 제품에 대한 명세를 작성하게 되는 것이므로 이에 대한 모순이 사라지게 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;bdd_template&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#bdd_template&quot;&gt;2. BDD Template&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;plain&quot;&gt;Title: 스토리에대한 제목을 간략하고 명확하게 작성
User Story
  Who 누가
  Why 왜
  What 무엇을 하는지
Scenario
  Given 어떤 값이 주어졌을 때
  When 어떤 행위를 하게 되면
  Then 어떤 결과를 도출한다&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;bdd_example&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#bdd_example&quot;&gt;3. BDD Example&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;할일을 관리할 수 있는 프로그램을 만든다고 가정을 한다.
그렇다면 기획자 혹은 개발자는 고객과 커뮤니케이션을 하며 프로그램에 대한 요구사항을 수집하게 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;plain&quot;&gt;할일을 관리할 수 있는 시스템을 개발한다.
Todo Item을 등록/수정/삭제 할 수 있다.
Todo/Doing/Done 할 수 있고 Archive할 수 있어야 한다.
Todo Item을 등록할 때 Todo 상태로 시작한다.
상태변경을 할 수 있고 상태 변경은
Todo &amp;gt; Doing, Doing &amp;gt; Done, Done &amp;gt; Doing, Doing &amp;gt; Todo로만 할 수 있다.
Archive는 Todo/Doing/Done 모든 상태에서 가능하다.
목록보기/상세보기 기능을 포함한다.
페이징 기능은 스펙에서 제외하고 현재 스펙에서는 전체 목록을 한번에 조회한다.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;수집한 요구항이 위와 같다고 하면 아래 그림과 같은 &lt;code&gt;Use Case Diagram&lt;/code&gt;과 &lt;code&gt;Class Diagram&lt;/code&gt;을 그릴 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/bdd/use-case-diagram.png&quot; alt=&quot;use case diagram&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Use Case Diagram&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/bdd/class-diagram.png&quot; alt=&quot;class diagram&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Class Diagram&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;위 예시에서 &lt;strong&gt;상태변경&lt;/strong&gt;을 통해 명세작성 예시를 진행하도록 하겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;plain&quot;&gt;Title: Todo Item의 상태를 변경한다.

User Story
Who: Todo Management System을 사용하는 사용자가
Why: Todo Item의 상태관리를 위해서
What: 각각의 Todo Item의 상태를 변경할 수 있다.
      상태 변경은 Todo &amp;gt; Doing, Doing &amp;gt; Done,
      Done &amp;gt; Doing, Doing &amp;gt; Todo로만 할 수 있다.

Scenario 1: Todo상태를 Doing상태로 변경하면 상태가 변경된다.
Scenario 2: Doing상태를 Done상태로 변경하면 상태가 변경된다.
Scenario 3: Done상태를 Doing상태로 변경하면 상태가 변경된다.
Scenario 4: Doing상태를 Todo상태로 변경하면 상태가 변경된다.
Scenario 5: Todo상태를 Done상태로 변경하면 상태가 변경되지 않고 예외사항이 발생한다.
Scenario 6: Done상태를 Todo상태로 변경하면 상태가 변경되지 않고 예외사항이 발생한다.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;일반 글로 위와 같은 명세를 작성할 수 있고 아래와 같이 코드로 명세를 작성할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;namespace&quot;&gt;kr.pe.nuti.home.api.service.todo&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.core.application.Application&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.core.application.JpaConfiguration&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.core.application.WebConfiguration&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.domain.todo.TodoItem&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.enumeration.todo.TodoState&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.exception.todo.IllegalStateChangeException&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.repository.todo.TodoItemRepository&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.junit.Assert&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.junit.Before&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.junit.Test&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.junit.runner.RunWith&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.mockito.InjectMocks&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.mockito.Mock&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.mockito.MockitoAnnotations&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.mockito.Spy&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.springframework.test.context.ContextConfiguration&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.springframework.test.context.junit4.SpringJUnit4ClassRunner&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;java.util.Optional&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.hamcrest.Matchers.is&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.mockito.ArgumentMatchers.any&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.mockito.Mockito.verifyNoMoreInteractions&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.mockito.Mockito.when&lt;/span&gt;;

&lt;span class=&quot;comment&quot;&gt;/**
 * Title: Todo Item의 상태를 변경한다.
 * User Story:
 * Todo Management System을 사용하는 사용자가
 * Todo Item의 상태관리를 위해서
 * 각각의 Todo Item의 상태를 변경할 수 있다.
 * 상태 변경은 Todo &amp;gt; Doing, Doing &amp;gt; Done,
 * Done &amp;gt; Doing, Doing &amp;gt; Todo로만 할 수 있다.
 */&lt;/span&gt;
&lt;span class=&quot;annotation&quot;&gt;@RunWith&lt;/span&gt;(SpringJUnit4ClassRunner.class)
&lt;span class=&quot;annotation&quot;&gt;@ContextConfiguration&lt;/span&gt;(classes = {JpaConfiguration.class, WebConfiguration.class, Application.class})
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;TodoServiceStateChangeTest&lt;/span&gt; {

  &lt;span class=&quot;annotation&quot;&gt;@Mock&lt;/span&gt;
  &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; TodoItemRepository todoItemRepository;

  &lt;span class=&quot;annotation&quot;&gt;@Autowired&lt;/span&gt;
  &lt;span class=&quot;annotation&quot;&gt;@Spy&lt;/span&gt;
  &lt;span class=&quot;annotation&quot;&gt;@InjectMocks&lt;/span&gt;
  &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; TodoService service;

  &lt;span class=&quot;annotation&quot;&gt;@Before&lt;/span&gt;
  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; setup() {
    MockitoAnnotations.initMocks(&lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;);
  }

  &lt;span class=&quot;comment&quot;&gt;/**
   * Todo상태를 Doing상태로 변경하면 상태가 변경된다.
   * @throws Exception
   */&lt;/span&gt;
  &lt;span class=&quot;annotation&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; testStateChangeFromTodoToDoing() &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;Exception&lt;/span&gt; {
    &lt;span class=&quot;comment&quot;&gt;// given Todo 상태의 Todo Item&lt;/span&gt;
    TodoItem savedItem = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TodoItem();
    savedItem.setIdx(&lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;);
    savedItem.setState(TodoState.TODO);
    TodoItem changedItem = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TodoItem();
    changedItem.setIdx(&lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;);
    changedItem.setState(TodoState.DOING);
    when(todoItemRepository.save(any(TodoItem.class))).thenReturn(changedItem);
    when(todoItemRepository.findById(&lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;)).thenReturn(Optional.of(savedItem));

    TodoItem item = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TodoItem();
    item.setIdx(&lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;);

    &lt;span class=&quot;comment&quot;&gt;// when Todo Item의 상태를 Doing으로 변경한다.&lt;/span&gt;
    TodoItem result = service.changeState(item, TodoState.DOING);

    &lt;span class=&quot;comment&quot;&gt;// then Todo Item의 상태가 Doing으로 변경된다.&lt;/span&gt;
    Assert.assertThat(result.getState(), is(TodoState.DOING));
    verifyNoMoreInteractions(service);
  }

  &lt;span class=&quot;comment&quot;&gt;/**
   * Todo상태를 Done상태로 변경하면 상태가 변경되지 않고 예외사항이 발생한다.
   * @throws Exception
   */&lt;/span&gt;
  &lt;span class=&quot;annotation&quot;&gt;@Test&lt;/span&gt;(expected = IllegalStateChangeException.class)
  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; testStateChangeFromTodoToDoneThrownException() &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;Exception&lt;/span&gt; {
    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
      &lt;span class=&quot;comment&quot;&gt;// given Todo 상태의 Todo Item&lt;/span&gt;
      TodoItem savedItem = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TodoItem();
      savedItem.setIdx(&lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;);
      savedItem.setState(TodoState.TODO);
      TodoItem changedItem = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TodoItem();
      changedItem.setIdx(&lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;);
      changedItem.setState(TodoState.DOING);
      when(todoItemRepository.findById(any(&lt;span class=&quot;predefined-type&quot;&gt;Long&lt;/span&gt;.class))).thenReturn(Optional.of(savedItem));
      when(todoItemRepository.save(any(TodoItem.class))).thenReturn(changedItem);

      TodoItem item = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TodoItem();
      item.setIdx(&lt;span class=&quot;integer&quot;&gt;1L&lt;/span&gt;);

      &lt;span class=&quot;comment&quot;&gt;// when Todo Item의 상태를 Done으로 변경한다.&lt;/span&gt;
      service.changeState(item, TodoState.DONE);

      &lt;span class=&quot;comment&quot;&gt;// then Todo Item의 상태가 변경되지 않고 예외사항이 발생한다.&lt;/span&gt;
    } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;exception&quot;&gt;Exception&lt;/span&gt; e) {
      verifyNoMoreInteractions(service);
      &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; e;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://slides.com/hyeoniljeong/bdd_spock_framework&quot;&gt;관련 slide 자료&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#references&quot;&gt;4. References&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Behavior-driven_development&quot; class=&quot;bare&quot;&gt;https://en.wikipedia.org/wiki/Behavior-driven_development&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/User_story&quot; class=&quot;bare&quot;&gt;https://en.wikipedia.org/wiki/User_story&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2018-07-14T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>Spring AOP(Aspect Oriented Programming)</title>
      <link>https://blog.nuti.pe.kr/2018/06/13/spring-aop/</link>
      <updated>2018-06-13T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2018/06/13/spring-aop</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;개요&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#개요&quot;&gt;1. 개요&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;AOP&lt;/code&gt;는 스프링의 기반 기술 중 하나로 이해하기 힘든 용어와 개념을 가졌다.
&lt;code&gt;AOP&lt;/code&gt;는 자바의 &lt;code&gt;Reflection API&lt;/code&gt;를 활용해서 구현을 하게되고, 주로 비즈니스 요구사항이 아닌 부분들을 처리하기 위해 사용한다.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;reflection_api&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#reflection_api&quot;&gt;2. Reflection API&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/aop/jvm-architecture.jpg&quot; alt=&quot;jvm architecture&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. JVM Architecture&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;자바의 Reflection API는 컴파일 레벨에서 실행될 클래스를 정하는 것이 아닌, 런타임에 실행할 클래스 파일을 정하게 할 수 있다.
또한, 런타임에서 클래스의 공개되지 않은 필드에 대한 정보를 볼 수 있고 조작할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;주로 JDBC나 MyBatis에서 많이 사용한다.
예시는 아래와 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;reflection_api_example&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#reflection_api_example&quot;&gt;2.1. Reflection API Example&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;namespace&quot;&gt;kr.pe.nuti.home.api.core.annotation&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;java.lang.annotation&lt;/span&gt;.*;

&lt;span class=&quot;annotation&quot;&gt;@Inherited&lt;/span&gt;
&lt;span class=&quot;annotation&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;annotation&quot;&gt;@Retention&lt;/span&gt;(&lt;span class=&quot;predefined-type&quot;&gt;RetentionPolicy&lt;/span&gt;.RUNTIME)
&lt;span class=&quot;annotation&quot;&gt;@Target&lt;/span&gt;({
    &lt;span class=&quot;predefined-type&quot;&gt;ElementType&lt;/span&gt;.METHOD
})
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;annotation&quot;&gt;@interface&lt;/span&gt; LogDetail {
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;namespace&quot;&gt;kr.pe.nuti.home.api.core.annotation&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;java.lang.annotation&lt;/span&gt;.*;

&lt;span class=&quot;annotation&quot;&gt;@Inherited&lt;/span&gt;
&lt;span class=&quot;annotation&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;annotation&quot;&gt;@Retention&lt;/span&gt;(&lt;span class=&quot;predefined-type&quot;&gt;RetentionPolicy&lt;/span&gt;.RUNTIME)
&lt;span class=&quot;annotation&quot;&gt;@Target&lt;/span&gt;({
    &lt;span class=&quot;predefined-type&quot;&gt;ElementType&lt;/span&gt;.TYPE
})
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;annotation&quot;&gt;@interface&lt;/span&gt; TrackLog {
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;namespace&quot;&gt;kr.pe.nuti.home.api.core.util&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.core.annotation.TrackLog&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;java.lang.reflect.Field&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.core.util.BooleanUtil.not&lt;/span&gt;;

&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;LogUtil&lt;/span&gt; {

  &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; LogUtil() {
    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;IllegalAccessError&lt;/span&gt;();
  }

  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; argValues(&lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; arg, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; depth) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;IllegalAccessException&lt;/span&gt; {
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arg == &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;) {
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;;
    }
    &lt;span class=&quot;directive&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Class&lt;/span&gt;&amp;lt;?&amp;gt; cls = arg.getClass();

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cls.isPrimitive() || cls.isAssignableFrom(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;.class) || not(cls.isAnnotationPresent(TrackLog.class))) {
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arg.toString();
    }

    &lt;span class=&quot;predefined-type&quot;&gt;StringBuilder&lt;/span&gt; builder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;StringBuilder&lt;/span&gt;();
    builder.append(whiteSpace(depth)).append(cls.getName()).append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;predefined-type&quot;&gt;Field&lt;/span&gt; field : cls.getDeclaredFields()) {
      field.setAccessible(&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;);
      &lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; fieldObj = field.get(arg);
      builder.append(whiteSpace(depth + &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;))
          .append(field.getName())
          .append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt; : &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
          .append(argValues(fieldObj, depth + &lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;))
          .append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
    }

    builder.append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; builder.toString();
  }

  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; whiteSpace(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; depth) {
    &lt;span class=&quot;directive&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; appender = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;predefined-type&quot;&gt;StringBuilder&lt;/span&gt; builder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;StringBuilder&lt;/span&gt;();

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;; i &amp;lt; depth; i++) {
      builder.append(appender);
    }

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; builder.toString();
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;namespace&quot;&gt;kr.pe.nuti.home.api.core.handler&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.core.annotation.LogDetail&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.core.util.LogUtil&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.slf4j.Logger&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.slf4j.LoggerFactory&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;java.lang.reflect.InvocationHandler&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;java.lang.reflect.Method&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.core.util.BooleanUtil.not&lt;/span&gt;;

&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;LogDetailMethodInvocationHandler&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;InvocationHandler&lt;/span&gt; {

  &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Logger&lt;/span&gt; logger = LoggerFactory.getLogger(LogDetailMethodInvocationHandler.class);

  &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; target;

  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; LogDetailMethodInvocationHandler(&lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; target) {
    &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.target = target;
  }

  &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; invoke(&lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; proxy, &lt;span class=&quot;predefined-type&quot;&gt;Method&lt;/span&gt; method, &lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;[]&lt;/span&gt; args) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Throwable&lt;/span&gt; {
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (not(method.isAnnotationPresent(LogDetail.class))) {
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; method.invoke(target, args);
    }
    &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; className = method.getDeclaringClass().getName();
    &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; methodName = method.getName();
    &lt;span class=&quot;predefined-type&quot;&gt;StringBuilder&lt;/span&gt; argBuilder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;StringBuilder&lt;/span&gt;();

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; arg : args) {
      argBuilder.append(LogUtil.argValues(arg, &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;))
          .append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
    }
    &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; argString = argBuilder.toString();

    logger.info(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;invoke method {}${}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, className, methodName);
    logger.info(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;method arguments: {}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, argString);

    &lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; result  = method.invoke(target, args);

    logger.info(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;finish the method {}${}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, className, methodName);

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;위 예시는 &lt;code&gt;LogDetail&lt;/code&gt;이라는 어노테이션을 가진 메소드에 대해서 해당 메소드의 파라미터 정보를 상세하게 로깅하는 것이다.
런타임에서 메소드의 정보를 분석해서 어노테이션 표기 여부에 따라 로그를 남기고 메소드를 실행시키게 된다.
또한, &lt;code&gt;LogUtil.argValues&lt;/code&gt;는 Object의 정보를 상세하게 분석해서 Object 내부의 필드정보를 보여줄 수 있도록 되어있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Reflection API&lt;/code&gt;는 이런식으로 컴파일 타임에 어떤 클래스의 인스턴스가 실행될 지 알 수 없는 경우에 런타임에서 클래스정보를 분석하고 실행할 수 있도록 할 때 사용한다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;proxy_pattern&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#proxy_pattern&quot;&gt;3. Proxy Pattern&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/aop/proxy_pattern.png&quot; alt=&quot;proxy pattern&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Proxy Pattern&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;클라이언트가 실제 사용하려 하는 기능에 부가적인 기능을 더해서 자신이 핵심 기능인 척 위장하는 것&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;타겟은 프록시가 있는지 알아서는 안된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;타겟의 기능을 확장 및 접근 방법을 제어할 수 있는 유용한 방법&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특정 Object에 대한 접근을 제어&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;대상이 되는 Object의 생성에 관여를 하기도 함&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;생성이 복잡한 경우&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;당장 생성이 필요하지 않은 경우에 바로 생성하지 않고, 필요한 시기에 생성&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;원격 Object를 이용하는 경우에 사용&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RMI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EJB&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;대상이 되는 Object에 대한 접근권한을 제어하기 위해 사용&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;decorator_pattern&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#decorator_pattern&quot;&gt;4. Decorator Pattern&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/aop/decorator_pattern.png&quot; alt=&quot;decorator pattern&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Decorator Pattern&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;대상이 되는 Object에 부가적인 기능을 부여하기 위해 사용&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컴파일 시점에 어떤 방법과 순서로 연결되어 사용하는지 정해지지 않음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InputStream, OutputStream&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;프록시_패턴과의_차이&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#프록시_패턴과의_차이&quot;&gt;4.1. 프록시 패턴과의 차이&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;프록시는 어떤 오브젝트를 사용하기 위해 대리인 역할을 맡은 오브젝트를 사용하는 방법을 총칭&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;프록시패턴 프록시를 사용하는 방법 중 타겟에 대한 접근 방법을 제어하려는 목적&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;타겟을 생성하기 복잡하거나 당장 필요하지 않은 경우에 타겟을 바로 생성하지 않고 프록시를 사용&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;실제 타겟을 사용할 때 타겟을 생성(Lazy)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;기능에 대한 접근 권한을 제어하는 목적으로도 사용(읽기/쓰기 권한)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자신이 만들거나 접근할 타겟을 알고있는 경우가 많음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;proxy&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#proxy&quot;&gt;5. Proxy&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Client와 사용 대상 Object 사이에서 대리 역할을 하는 Object&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;대상 Object의 핵심 기능에 부가적인 기능을  추가&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;대상 Object는 Proxy Object의 존재 여부를 모름&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;대상 Object를 Target 또는 Real Object라고 부름&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;dynamic_proxy&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#dynamic_proxy&quot;&gt;6. Dynamic Proxy&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/aop/dynamic-proxy.jpg&quot; alt=&quot;dynamic proxy&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. Dynamic Proxy&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;프록시는 매 Class, Method마다 Proxy를 정의해주어야 한다는 단점이 존재&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JAVA의 Reflection API를 통해 Runtime에 동적으로 Proxy하도록 함&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;aop&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#aop&quot;&gt;7. AOP&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/aop/aop.png&quot; alt=&quot;aop&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. AOP&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Advice&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;타겟이 필요 없는 순수한 부가 기능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스프링에서는 부가기능을 제공하는 Object를 Advice라고 부름&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pointcut&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;부가기능 적용 대상 선정 방법&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스프링에서는 메소드 선정 알고리즘을 담은 Object를 Pointcut이라고 부름&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advisor&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pointcut + Advice&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Join Point&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Advice가 적용될 수 있는 위치&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aspect&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;독립적인 모듈화가 불가능한 모듈&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그 자체로 핵심 기능을 담고 있지는 않지만, 어플리케이션을 구성하는 중요한 한 가지 요소이고, 핵심 기능에 부가되어 의미를 갖는 특별한 모듈&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;핵심적인 기능에서 부가적인 기능을 분리해서 Aspect라는 독특한 모듈로 만들어 설계하고 개발하는 방법&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;객체지향을 좀 더 편하고 객체지향답게 사용할 수 있도록 하는 개념&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;aop_example&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#aop_example&quot;&gt;8. AOP Example&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;expression&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#expression&quot;&gt;8.1. Expression&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;execution([접근제한자 패턴] 타입패턴 [타입패턴.]이름패턴 (타입패턴 | “..}, …) [throws 예외 패턴])&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ex) public int springbook.learningtest.spring.pointcut.Target.mins(int, int) throws java.lang.RuntimeException&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;public&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;접근 제한자, 생략 가능&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;int&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;리턴 값의 타입을 나타내는 패턴&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;springbook.learningtest.spring.pointcut.Target&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;패키지 및 클래스 이름 패턴&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;minus&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;메소드 이름 패턴&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(int, int)&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;메소드 파리미터 패턴&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;throws java.lang.RuntimeException&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;예외 이름 패턴&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/5.0.0.RELEASE/spring-framework-reference/core.html#aop-pointcuts&quot;&gt;참고링크&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;example_code&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#example_code&quot;&gt;8.2. Example Code&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;namespace&quot;&gt;kr.pe.nuti.home.api.core.annotation&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;java.lang.annotation&lt;/span&gt;.*;

&lt;span class=&quot;annotation&quot;&gt;@Inherited&lt;/span&gt;
&lt;span class=&quot;annotation&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;annotation&quot;&gt;@Retention&lt;/span&gt;(&lt;span class=&quot;predefined-type&quot;&gt;RetentionPolicy&lt;/span&gt;.RUNTIME)
&lt;span class=&quot;annotation&quot;&gt;@Target&lt;/span&gt;({
    &lt;span class=&quot;predefined-type&quot;&gt;ElementType&lt;/span&gt;.METHOD
})
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;annotation&quot;&gt;@interface&lt;/span&gt; LogDetail {

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;namespace&quot;&gt;kr.pe.nuti.home.api.core.aspect&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.core.annotation.LogDetail&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;kr.pe.nuti.home.api.core.util.LogUtil&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.aspectj.lang.ProceedingJoinPoint&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.aspectj.lang.annotation.Around&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.aspectj.lang.annotation.Aspect&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.slf4j.Logger&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.slf4j.LoggerFactory&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;org.springframework.stereotype.Component&lt;/span&gt;;

&lt;span class=&quot;annotation&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;annotation&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;LogDetailAspect&lt;/span&gt; {

  &lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Logger&lt;/span&gt; logger = LoggerFactory.getLogger(LogDetailAspect.class);

  &lt;span class=&quot;annotation&quot;&gt;@Around&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;execution(* kr.pe.nuti.home.api..*.*(..)) &amp;amp;&amp;amp; @annotation(logDetail)&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; aroundTargetObject(ProceedingJoinPoint joinPoint, LogDetail logDetail) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Throwable&lt;/span&gt; {
    &lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; target = joinPoint.getTarget();
    &lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;[]&lt;/span&gt; args = joinPoint.getArgs();

    &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; className = target.getClass().getName();
    &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; methodName = joinPoint.getSignature().getName();
    &lt;span class=&quot;predefined-type&quot;&gt;StringBuilder&lt;/span&gt; argBuilder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;StringBuilder&lt;/span&gt;();

    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; arg : args) {
      argBuilder.append(LogUtil.argValues(arg, &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;))
          .append(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
    }
    &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; argString = argBuilder.toString();

    logger.debug(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;invoke method {}${}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, className, methodName);
    logger.debug(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;method arguments: {}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, argString);

    &lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; result  = joinPoint.proceed(args);

    logger.debug(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;finish the method {}${}&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, className, methodName);

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; TodoItem changeState(&lt;span class=&quot;annotation&quot;&gt;@NonNull&lt;/span&gt; TodoItem todo, &lt;span class=&quot;annotation&quot;&gt;@NonNull&lt;/span&gt; TodoState state) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; IllegalStateChangeException {
  TodoItem savedItem = &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.getItem(todo.getIdx());

  &lt;span class=&quot;directive&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; possibleToChangeState = TodoState.isPossibleToChangeState(savedItem.getState(), state);
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (not(possibleToChangeState)) {
    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IllegalStateChangeException();
  }

  savedItem.setState(state);

  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; todoItemRepository.save(savedItem);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2018-06-13T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>Java Exception</title>
      <link>https://blog.nuti.pe.kr/2018/06/06/java-exception/</link>
      <updated>2018-06-06T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2018/06/06/java-exception</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;개요&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#개요&quot;&gt;1. 개요&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;자바 계통 언어에서는 오류를 표현하는 2가지 방법이 존재한다.
첫 번째는 &lt;code&gt;Error&lt;/code&gt; 클래스인데 &lt;code&gt;Error&lt;/code&gt; 클래스를 상속받는 하위 클래스는 시스템 오류를 표현하게 된다.
두 번째는 &lt;code&gt;Exception&lt;/code&gt; 클래스로 어플리케이션 레벨에서 개발자가 예외사항을 표현하기 위해 사용한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이번 포스팅에서는 &lt;code&gt;Error&lt;/code&gt;와 &lt;code&gt;Exception&lt;/code&gt;에 대해서 작성한다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;error&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#error&quot;&gt;2. Error&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Error&lt;/code&gt; 클래스는 시스템 오류를 표현하는 것으로 주로 &lt;code&gt;JVM&lt;/code&gt;에서 사용한다.
어플리케이션 레벨에서 사용하는 경우도 있기는 한데 거의 사용되지 않고, &lt;code&gt;try~catch&lt;/code&gt;로 처리할 수 없다.
시스템 오류를 표현하는 것이므로 어플리케이션 개발자가 관여하게될 가능성이 매우 낮다.
흔히 볼 수 있는 &lt;code&gt;Error&lt;/code&gt; 클래스의 구현체는 &lt;code&gt;OutOfMemoryError&lt;/code&gt;와 &lt;code&gt;StackOverflowError&lt;/code&gt;가 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;exception&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#exception&quot;&gt;3. Exception&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Exception&lt;/code&gt; 클래스는 어플리케이션을 개발하는 과정에서 로직을 처리하는 중에 예외사항이 발생할 경우 사용하게 된다.
&lt;code&gt;Exception&lt;/code&gt;은 크게 &lt;code&gt;Checked Exception&lt;/code&gt;과 &lt;code&gt;Unchecked Exception&lt;/code&gt;으로 구분되는데 이 둘의 차이는 아래 표와 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 40%;&quot;&gt;
&lt;col style=&quot;width: 40%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Checked Exception&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Unchecked Exception&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;명시적 처리&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;명시적으로 처리해야 함&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;명시적인 처리를 강요하지 않음&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;처리 시점&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Compile Time&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Application Runtime&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;대표 Class&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Exception 클래스와 하위 클래스 중 RuntimeException과 그 하위 클래스를 제외&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;RuntimeException&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;자바에서는 &lt;code&gt;Exception&lt;/code&gt;을 처리하는 과정에서 &lt;code&gt;RuntimeException&lt;/code&gt;과 그 하위 클래스들을 특별하게 취급하여 &lt;code&gt;Compile Time&lt;/code&gt;에서 처리를 강제하지 않고, &lt;code&gt;Runtime&lt;/code&gt;에서 처리한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;주로 개발자에게 예외사항이 발생할 수 있음을 알려주기 위하거나, 비즈니스 요구사항을 표현하기 위해서 &lt;code&gt;CheckedException&lt;/code&gt;을 사용하게 된다.
반대로 &lt;code&gt;Unchecked Exception&lt;/code&gt;은 반드시 처리하지 않아도 되는 경우나, 굳이 개발자가 알 필요가 없을 경우 사용하게 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Exception&lt;/code&gt;을 사용하게 되면 비즈니스 로직에서 &lt;code&gt;true/false&lt;/code&gt; 혹은 &lt;code&gt;object/null&lt;/code&gt;을 사용하는 것에 비해서 훨씬 다양하게 예외사항을 표현할 수 있고, 비즈니스 요구사항을 코드로 깔끔하게 담을 수 있다.
또한 의미와 용도에 맞는 &lt;code&gt;Exception&lt;/code&gt;을 다양하게 사용하게 된다면, 디버깅이나 유지부수에도 큰 이점을 가질 수 있다.
&lt;code&gt;Exception&lt;/code&gt;은 주로 분석/설계 단계에서 정의를 하게 된다.
실제 비즈니스 로직을 구현하면서 메소드에 &lt;code&gt;throws&lt;/code&gt;를 명시적으로 작성함으로써 해당 메소드를 사용하는 개발자에게 예외사항이 발생할 수 있음을 열려준다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;예시&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#예시&quot;&gt;4. 예시&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;어플리케이션을 개발하는 과정에서 요구사항을 분석하는 과정이 있고, 이 과정에서 &lt;code&gt;User Story&lt;/code&gt;와 &lt;code&gt;Scenario&lt;/code&gt;를 정의할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;예를 들어 TODO Item을 관리하는 어플리케이션에서 TODO의 상태를 변경하는 기능 요구사항이 있고, 요구사항 분석 결과 아래와 같은 &lt;code&gt;User Story&lt;/code&gt;와 &lt;code&gt;Scenario&lt;/code&gt;가 나왔다고 가정한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;plain&quot;&gt;User Story:
TODO Item의 상태를 변경할 수 있다.
Todo/Doing/Done으로 상태를 변경할 수 있고, 상태변경은 Todo &amp;gt; Doing, Doing &amp;gt; Done, Done &amp;gt; Doing, Doing &amp;gt; Todo 로만 할 수 있다.


Scenario 1: Todo에서 Doing으로 상태를 변경한다.
Scenario 2: Doing에서 Done으로 상태를 변경한다.
Scenario 3: Done에서 Doing으로 상태를 변경한다.
Scenario 4: Doing에서 Todo로 상태를 변경한다.
Scenario 5: Todo에서 Done으로 상태를 변경한다.
Scenario 6: Done에서 Todo로 상태를 변경한다.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;위와 같이 &lt;code&gt;User Story&lt;/code&gt;와 &lt;code&gt;Scenario&lt;/code&gt;를 정의한다고 할 때 &lt;code&gt;Scenario 5&lt;/code&gt;와 &lt;code&gt;Scenario 6&lt;/code&gt;은 예외사항이 발생하는 &lt;code&gt;Scenario&lt;/code&gt; 이다.
이렇게 분석 과정에서 예외사항이 발생할 수 있음을 미리 파악하고, 이를 설계 및 구현에서 반영을 하게 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;위의 예시를 코드로 표현하면 아래와 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; TodoItem changeState(&lt;span class=&quot;annotation&quot;&gt;@NonNull&lt;/span&gt; TodoItem todo, &lt;span class=&quot;annotation&quot;&gt;@NonNull&lt;/span&gt; TodoState state) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; IllegalStateChangeException {
  TodoItem savedItem = todoItemRepository.findById(todo.getIdx())
      .orElseThrow(ResourceNotFoundException::&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;);

  &lt;span class=&quot;directive&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; possibleToChangeState = TodoState.isPossibleToChangeState(savedItem.getState(), state);
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (not(possibleToChangeState)) {
    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IllegalStateChangeException();
  }

  savedItem.setState(state);

  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; todoItemRepository.save(savedItem);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;위의 코드 예시와 같이 비즈니스 요구사항에 의한 예외사항은 &lt;code&gt;Checked Exception&lt;/code&gt;으로 처리하여 &lt;code&gt;throws&lt;/code&gt;를 통해 명시적으로 알려준다.
반면에 비즈니스 요구사항이 아닌, 해당 TODO Item이 없어서 처리할 수 없는 예외같은 경우는 &lt;code&gt;Unchecked Exception&lt;/code&gt;을 통해 처리를 하면 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2018-06-06T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>Dockerfile</title>
      <link>https://blog.nuti.pe.kr/2018/02/18/dockerfile/</link>
      <updated>2018-02-18T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2018/02/18/dockerfile</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;dockerfile&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#dockerfile&quot;&gt;1. Dockerfile?&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt;은 &lt;code&gt;Image&lt;/code&gt; 설정 파일로 &lt;code&gt;Image&lt;/code&gt;를 생성할 내용을 작성한다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;docker-dockerfile-options&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#docker-dockerfile-options&quot;&gt;2. Options&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 80%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;FROM&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;어떤 이미지를 기반으로 생성할지 설정한다. &amp;lt;이미지 이름&amp;gt;:&amp;lt;태그&amp;gt; 형식으로 설정한다.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MAINTAINER&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;메인테이너 정보를 작성한다.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ENV&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;이미지의 환경변수를 설정한다.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;RUN&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;쉘 스크립트 혹은 명령어를 실행한다.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VOLUME&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;호스트와 공유할 디렉토리를 지정한다.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CMD&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너가 시작됐을 때 실행할 실행 파일 혹은 쉘 스크립트를 지정한다.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ADD&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;호스트에서 이미지로 복사할 파일을 지정한다.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;EXPOSE&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;호스트와 연결할 포트 번호를 지정한다.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;example&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#example&quot;&gt;3. Example&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;docker&quot;&gt;FROM centos:centos6.8
MAINTAINER HyeonilJeong &amp;lt;dev.nuti0102@gmail.com&amp;gt;

ENV V_NGINX=1.12.1 \
  V_TOMCAT=8.5.23 \
  DIR_CONTENTS=/opt/project/contents \
  STATIC_DOMAIN=http://static.nuti.pe.kr \
  VM_XMS=256m \
  VM_XMX=1024m \
  VM_XX_NEW_SIZE=384m \
  VM_XX_MAX_PERM_SIZE=128m \
  DB_HOST=db.nuti.pe.kr \
  DB_NAME=blog \
  DB_USERNAME=nuti \
  DB_PASSWORD=db_pw

RUN rpm --import /etc/pki/rpm-gpg/RPM* \
  &amp;amp;&amp;amp; yum update -y

ADD repos.d/nginx.repo /etc/yum.repos.d/nginx.repo

RUN yum install -y nginx $V_NGINX \
  &amp;amp;&amp;amp; rm -f /etc/nginx/conf.d/*.conf \
  &amp;amp;&amp;amp; yum install -y wget \
  &amp;amp;&amp;amp; rpm -Uvh  http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm \
  &amp;amp;&amp;amp; rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm

RUN yum install -y supervisor
RUN yum install -y java-1.8.0-openjdk-devel.x86_64
RUN mkdir -p $DIR_CONTENTS

ADD nginx/nginx.conf /etc/nginx/nginx.conf
ADD nginx/copy.conf /etc/nginx/conf.d/copy.conf
ADD supervisor/supervisord.conf /etc/supervisord.conf
ADD scripts/start.sh /scripts/start.sh
ADD tomcat /tomcat
ADD war/ROOT.war /tomcat/webapps/ROOT.war

RUN chmod +x /scripts/start.sh \
 &amp;amp;&amp;amp; chmod +x /tomcat/bin/startup-tomcat.sh

EXPOSE 80 8080

VOLUME $DIR_CONTENTS
VOLUME /tomcat/logs

CMD [&amp;quot;/scripts/start.sh&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2018-02-18T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>docker-compose</title>
      <link>https://blog.nuti.pe.kr/2018/02/18/docker-compose/</link>
      <updated>2018-02-18T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2018/02/18/docker-compose</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;docker_compose&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#docker_compose&quot;&gt;1. docker-compose?&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Docker Compose&lt;/code&gt;는 하나의 설정으로 여러 컨테이너를 정의하고 실행할 수 있도록 도와주는 툴이다.
하나의 명령어로 여러 컨테이너를 띄워서 어플리케이션을 실행할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;사용 환경&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;개발&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스테이징&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;options&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#options&quot;&gt;2. Options&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 80%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;image&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;사용할 이미지의 태그나 ID를 명시&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;build&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;Docker&lt;/code&gt;파일이 있는 디렉토리의 경로&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;dockerfile&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;기본 &lt;code&gt;Dockerfile&lt;/code&gt;명이 아닐 경우 여기에 이름을 명시&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;command&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;기본 &lt;code&gt;command&lt;/code&gt;를 지정&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;links&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너를 다른 서비스와 연결. 연결하려는 서비스의 이름이나 별칭을 작성하면 컨테이너의 &lt;code&gt;/etc/hosts&lt;/code&gt; 파일에 그 내용이 추기&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;external_links&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;links&lt;/code&gt;와 비슷하지만 &lt;code&gt;compose&lt;/code&gt;외부의 서비스와 연결을 위해 사용&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;extra_hosts&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;/etc/hosts&lt;/code&gt;에 외부 호스트 정보를 추가&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ports&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;호스트포트:컨테이너포트 식으로 호스트와 &lt;code&gt;컨테이너&lt;/code&gt;의 포트를 포딩한다.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;expose&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;호스트에는 노출하지 않고 연결된 서비스끼리만 접근 가능한 포트를 명&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;volumes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;볼륨으로 마운트할 디렉토리를 명&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;volumes_from&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;다른 서비스나 &lt;code&gt;컨테이너&lt;/code&gt;의 볼륨 전체를 마운트&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;environment&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;환경 변수를 명시&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;env_file&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;환경 변수를 파일에서 추&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;extends&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;다른 &lt;code&gt;compose&lt;/code&gt; 설정을 현재 파일에 가져와 사용&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;labels&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;컨테이너&lt;/code&gt;에 &lt;code&gt;docker label&lt;/code&gt;을 이용해서 메타데이터를 추가&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;container_name&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;컨테이너&lt;/code&gt; 이름을 지정&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;log driver&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;컨테이너&lt;/code&gt;에서 사용할 로깅 드라이버를 명시&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;net&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;네트워킹 모드를 지정. &lt;code&gt;docker&lt;/code&gt;의 &lt;code&gt;-net&lt;/code&gt; 옵션과 동일&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;pid&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;PID&lt;/code&gt; 모드를 호스트 &lt;code&gt;PID&lt;/code&gt;모드로 설정. 호스트와 &lt;code&gt;컨테이너&lt;/code&gt; 운영체제가 같은 &lt;code&gt;PID&lt;/code&gt; 주소 공간을 공유&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;dns&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;컨테이너&lt;/code&gt;가 사용할 커스텀 &lt;code&gt;DNS&lt;/code&gt;서버를 설정&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;dns_search&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;DNS&lt;/code&gt;검색 도메인을 지정&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;cap_add&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;컨테이너&lt;/code&gt;의 시스템에 관한 권한을 추가&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;cap_drop&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;컨테이너&lt;/code&gt;의 시스템에 관한 권한을 삭제&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;devices&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;디바이스 매핑 목록. &lt;code&gt;docker&lt;/code&gt;의 &lt;code&gt;--devices&lt;/code&gt;와 동일&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;example&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#example&quot;&gt;3. Example&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;key&quot;&gt;version&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;content&quot;&gt;'3'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;key&quot;&gt;services&lt;/span&gt;:
  &lt;span class=&quot;key&quot;&gt;example&lt;/span&gt;:
    &lt;span class=&quot;key&quot;&gt;build&lt;/span&gt;:
      &lt;span class=&quot;key&quot;&gt;context&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;content&quot;&gt;./docker&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;key&quot;&gt;dockerfile&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;content&quot;&gt;Dockerfile&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;key&quot;&gt;image&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;content&quot;&gt;example:latest&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;key&quot;&gt;environment&lt;/span&gt;:
      &lt;span class=&quot;key&quot;&gt;STATIC_DOMAIN&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://static.nuti.pe.kr&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;key&quot;&gt;VM_XMS&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;256m&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;key&quot;&gt;VM_XMX&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;1024m&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;key&quot;&gt;VM_XX_NEW_SIZE&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;384m&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;key&quot;&gt;VM_XX_NEW_PERM_SIZE&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;128m&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;key&quot;&gt;DB_HOST&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;db.nuti.pe.kr&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;key&quot;&gt;DB_NAME&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;key&quot;&gt;DB_USERNAME&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;nuti&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;key&quot;&gt;DB_PASSWORD&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;db_pw&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;key&quot;&gt;volumes&lt;/span&gt;:
      - &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;content&quot;&gt;./logs:/tomcat/logs&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;key&quot;&gt;ports&lt;/span&gt;:
      - &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;80:80&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;key&quot;&gt;network_mode&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2018-02-18T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>Maven</title>
      <link>https://blog.nuti.pe.kr/2018/02/01/maven/</link>
      <updated>2018-02-01T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2018/02/01/maven</id>
      <content type="html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;빌드 툴로 많이 알려진 &lt;code&gt;메이븐&lt;/code&gt;은 빌드 툴이라기 보다는 &lt;code&gt;프로젝트 관리 툴&lt;/code&gt;이라고 지칭해야 한다.
&lt;code&gt;메이븐&lt;/code&gt;은 소스코드로부터 배포 가능한 산출물을 빌드할 뿐만 아니라, 의존성 관리, 패키징, 문서화, 자동화 테스트, 각종 리포팅, 배포 등 여러가지 기능을 지원한다.
&lt;code&gt;메이븐&lt;/code&gt;에서 지원하는 기능을 사용하기 위해서는 &lt;code&gt;pom.xml&lt;/code&gt;이라는 파일에 사용할 기능에 대해서 명시해야한다.
&lt;code&gt;메이븐&lt;/code&gt;의 기본 구조는 아래와 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;project&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://maven.apache.org/POM/4.0.0&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
         &lt;span class=&quot;attribute-name&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://www.w3.org/2001/XMLSchema-instance&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
         &lt;span class=&quot;attribute-name&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

  &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;kr.pe.nuti&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;build-deployment&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0.0-SNAPSHOT&lt;span class=&quot;tag&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;jar&lt;span class=&quot;tag&quot;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;build deployment&lt;span class=&quot;tag&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;build and deployment description.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://blog.nuti.pe.kr&lt;span class=&quot;tag&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;

  &lt;span class=&quot;tag&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;url.github&amp;gt;&lt;/span&gt;https://github.com/hyeonil&lt;span class=&quot;tag&quot;&gt;&amp;lt;/url.github&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;(9)&lt;/b&gt;

  &lt;span class=&quot;tag&quot;&gt;&amp;lt;modules&amp;gt;&lt;/span&gt;...&lt;span class=&quot;tag&quot;&gt;&amp;lt;/modules&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;10&quot;&gt;&lt;/i&gt;&lt;b&gt;(10)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;...&lt;span class=&quot;tag&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;11&quot;&gt;&lt;/i&gt;&lt;b&gt;(11)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;reporting&amp;gt;&lt;/span&gt;...&lt;span class=&quot;tag&quot;&gt;&amp;lt;/reporting&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;12&quot;&gt;&lt;/i&gt;&lt;b&gt;(12)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;...&lt;span class=&quot;tag&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;13&quot;&gt;&lt;/i&gt;&lt;b&gt;(13)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;...&lt;span class=&quot;tag&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;14&quot;&gt;&lt;/i&gt;&lt;b&gt;(14)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/span&gt;...&lt;span class=&quot;tag&quot;&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;15&quot;&gt;&lt;/i&gt;&lt;b&gt;(15)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;distributionManagement&amp;gt;&lt;/span&gt;...&lt;span class=&quot;tag&quot;&gt;&amp;lt;/distributionManagement&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;16&quot;&gt;&lt;/i&gt;&lt;b&gt;(16)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;pluginManagement&amp;gt;&lt;/span&gt;...&lt;span class=&quot;tag&quot;&gt;&amp;lt;/pluginManagement&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;17&quot;&gt;&lt;/i&gt;&lt;b&gt;(17)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;repositories&amp;gt;&lt;/span&gt;...&lt;span class=&quot;tag&quot;&gt;&amp;lt;/repositories&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;18&quot;&gt;&lt;/i&gt;&lt;b&gt;(18)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;pluginRepositories&amp;gt;&lt;/span&gt;...&lt;span class=&quot;tag&quot;&gt;&amp;lt;/pluginRepositories&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;19&quot;&gt;&lt;/i&gt;&lt;b&gt;(19)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;profiles&amp;gt;&lt;/span&gt;...&lt;span class=&quot;tag&quot;&gt;&amp;lt;/profiles&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;20&quot;&gt;&lt;/i&gt;&lt;b&gt;(20)&lt;/b&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;POM 모델의 버전을 명시한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;프로젝트를 소유하는 그룹의 정보를 작성한다. 흔히 대표 도메인을 역순으로 작성한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;프로젝트를 식별하는 유일한 아이디를 명시한다. 이 아이디는 프로젝트 소유 그룹내에서 유일해야 된다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;프로젝트 버전에 대해서 명시한다. 개발이 완료되지 않은 버전일 경우 &lt;code&gt;-SNAPSHOT&lt;/code&gt;을 접미사로 사용해서 개발중임을 명시한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;프로젝트를 어떻게 패키징할지 명시한다. 기본값으로 &lt;code&gt;jar&lt;/code&gt;이고, &lt;code&gt;war&lt;/code&gt;, &lt;code&gt;ear&lt;/code&gt;, &lt;code&gt;pom&lt;/code&gt;을 사용할 수 있다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;프로젝트의 이름을 작성한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;프로젝트에 대해 설명하는 설명문을 작성한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;프로젝트의 홈페이지를 작성한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;9&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pom.xml&lt;/code&gt;내에서 사용할 프로퍼티(변수)에 대해서 명시한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;10&quot;&gt;&lt;/i&gt;&lt;b&gt;10&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;다중 모듈 프로젝트일 경우 하위 프로젝트에 대하여 명시한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;11&quot;&gt;&lt;/i&gt;&lt;b&gt;11&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;다중 모듈 프로젝트일 경우 상위 프로젝트에 대하여 명시한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;12&quot;&gt;&lt;/i&gt;&lt;b&gt;12&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;site lifecycle&lt;/code&gt;에서 실행할 &lt;code&gt;plugin&lt;/code&gt;정보를 명시한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;13&quot;&gt;&lt;/i&gt;&lt;b&gt;13&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;프로젝트에서 사용할 의존성에 대해서 명시한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;14&quot;&gt;&lt;/i&gt;&lt;b&gt;14&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;프로젝트를 빌드하는 방법에 대하여 명시한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;15&quot;&gt;&lt;/i&gt;&lt;b&gt;15&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;다중 모듈 프로젝트일 경우 상위 프로젝트의 의존성을 하위 프로젝트에서 사용할 수 있도록 명시한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;16&quot;&gt;&lt;/i&gt;&lt;b&gt;16&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;프로젝트를 배포할 원격 서버에 대해서 명시한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;17&quot;&gt;&lt;/i&gt;&lt;b&gt;17&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;다중 모듈 프로젝트일 경우 플러그인 설정을 하위 모듈에서도 사용할 수 있도록 한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;18&quot;&gt;&lt;/i&gt;&lt;b&gt;18&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;프로젝트에서 의존성관계를 가지는 라이브러리를 명시한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;19&quot;&gt;&lt;/i&gt;&lt;b&gt;19&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;플러그인을 받아오는 저장소 정보를 명시한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;20&quot;&gt;&lt;/i&gt;&lt;b&gt;20&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;프로젝트 환경별로 달리 사용할 스크립트에 대해서 작성한다. &lt;code&gt;properties&lt;/code&gt;, &lt;code&gt;dependencies&lt;/code&gt;, &lt;code&gt;build&lt;/code&gt;등을 재정의 할 수 있다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;maven-options&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#maven-options&quot;&gt;1. Options&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;maven-options-modules&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#maven-options-modules&quot;&gt;1.1. modules&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;modules&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;child-project&lt;span class=&quot;tag&quot;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/modules&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;하위 모듈 프로젝트의 &lt;code&gt;artifactId&lt;/code&gt;를 명시한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;maven-options-parent&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#maven-options-parent&quot;&gt;1.2. parent&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;kr.pe.nuti&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;parent-project&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;상위 프로젝트의 &lt;code&gt;groupId&lt;/code&gt;를 명시한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;상위 프로젝트의 &lt;code&gt;artifactId&lt;/code&gt;를 명시한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;상위 프로젝트의 &lt;code&gt;version&lt;/code&gt;을 명시한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;maven-options-reporting&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#maven-options-reporting&quot;&gt;1.3. reporting&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;reporting&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-javadoc-plugin&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.9.1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;tag&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;attach-javadocs&lt;span class=&quot;tag&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
          &lt;span class=&quot;tag&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;

          &lt;span class=&quot;tag&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/reporting&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;site lifecycle&lt;/code&gt; 실행할 플러그인 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;플러그인 &lt;code&gt;groupId&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;플러그인 &lt;code&gt;artifactId&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;플러그인 &lt;code&gt;version&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;플러그인 실행 환경 설정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;플러그인 실행 환경 유일 id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;플러그인 실행 환경 옵션 설정&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;maven-options-dependencies&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#maven-options-dependencies&quot;&gt;1.4. dependencies&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;log4j&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;log4j&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.2.17&lt;span class=&quot;tag&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;exclusions&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;javax.mail&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mail&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;javax.jms&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jms&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.sun.jdmk&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jmxtools&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.sun.jmx&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jmxri&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;provided&lt;span class=&quot;tag&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;의존성 라이브러리의 &lt;code&gt;groupId&lt;/code&gt;를 명시한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;의존성 라이브러리의 &lt;code&gt;artifactId&lt;/code&gt;를 명시한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;의존성 라이브러리의 &lt;code&gt;version&lt;/code&gt;을 명시한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;의존성 라이브러리에 포함되는 의존성 중 제외할 라이브러리를 명시한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;의존성 라이브러리에 포함되는 의존성 중 제외할 라이브러리의 &lt;code&gt;groupId&lt;/code&gt;를 명시한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;의존성 라이브러리에 포함되는 의존성 중 제외할 라이브러리의 &lt;code&gt;artifactId&lt;/code&gt;를 명시한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;maven-options-build&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#maven-options-build&quot;&gt;1.5. build&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;finalName&amp;gt;&lt;/span&gt;${artifactId}-${project.version}&lt;span class=&quot;tag&quot;&gt;&amp;lt;/finalName&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;resources&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;resource&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;directory&amp;gt;&lt;/span&gt;src/main/resources/${environment}&lt;span class=&quot;tag&quot;&gt;&amp;lt;/directory&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/resource&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;testResources&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;testResource&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;directory&amp;gt;&lt;/span&gt;src/main/webapp&lt;span class=&quot;tag&quot;&gt;&amp;lt;/directory&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/testResource&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/testResources&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-compiler-plugin&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.6.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;(9)&lt;/b&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;10&quot;&gt;&lt;/i&gt;&lt;b&gt;(10)&lt;/b&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;source&amp;gt;&lt;/span&gt;${version.java}&lt;span class=&quot;tag&quot;&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;target&amp;gt;&lt;/span&gt;${version.java}&lt;span class=&quot;tag&quot;&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;encoding&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;tag&quot;&gt;&amp;lt;/encoding&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;useIncrementalCompilation&amp;gt;&lt;/span&gt;false&lt;span class=&quot;tag&quot;&gt;&amp;lt;/useIncrementalCompilation&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;compilerArgument&amp;gt;&lt;/span&gt;-Xlint:all&lt;span class=&quot;tag&quot;&gt;&amp;lt;/compilerArgument&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;showWarnings&amp;gt;&lt;/span&gt;true&lt;span class=&quot;tag&quot;&gt;&amp;lt;/showWarnings&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;showDeprecation&amp;gt;&lt;/span&gt;true&lt;span class=&quot;tag&quot;&gt;&amp;lt;/showDeprecation&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;최종 빌드될 파일의 이름&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;리소스 설정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;리소스로 사용할 디렉토리 지정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;테스트 환경 리소스 설정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;테스트 환경 리소스로 사용할 디렉토리 설정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;플러그인 목록 설정. 각각의 플러그인별로 &lt;code&gt;execution&lt;/code&gt;과 &lt;code&gt;configuration&lt;/code&gt;이 다르니 각 플러그인별로 확인해야 한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;플러그인 &lt;code&gt;groupId&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;플러그인 &lt;code&gt;artifactId&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;9&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;플러그인 &lt;code&gt;version&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;10&quot;&gt;&lt;/i&gt;&lt;b&gt;10&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;플러그인 실행 옵션. 각 플러그인별로 다르므로 플러그인 문서에서 확인해야 한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;maven-options-dependency-management&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#maven-options-dependency-management&quot;&gt;1.6. dependencyManagement&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.commons&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;commons-lang3&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.4&lt;span class=&quot;tag&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;의존성 라이브러리의 &lt;code&gt;groupId&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;의존성 라이브러리의 &lt;code&gt;artifactId&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;의존성 라이버리리의 &lt;code&gt;version&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;maven-options-distribution-management&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#maven-options-distribution-management&quot;&gt;1.7. distributionManagement&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;distributionManagement&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;repository&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;maven-releases&lt;span class=&quot;tag&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;release repository&lt;span class=&quot;tag&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://repo.maven/maven-release&lt;span class=&quot;tag&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;snapshotRepository&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;maven-snapshots&lt;span class=&quot;tag&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;snapshot repository&lt;span class=&quot;tag&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://repo.maven/maven-snapshot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/snapshotRepository&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/distributionManagement&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Release&lt;/code&gt; 버전을 배포할 원격 저장소 정보&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;레파지토리 &lt;code&gt;id&lt;/code&gt;. &lt;code&gt;settings.xml&lt;/code&gt;에 작성한 id와 매핑된다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;레파지토리의 이름을 명시&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;레파지토리의 url을 명시&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Snapshot&lt;/code&gt; 버전을 배포할 원격 저장소 정보. 프로젝트 버전에 &lt;code&gt;-SNAPSHOT&lt;/code&gt;이라는 접미어를 사용하면 여기에 배포된다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;레파지토리 &lt;code&gt;id&lt;/code&gt;. &lt;code&gt;settings.xml&lt;/code&gt;에 작성한 id와 매핑된다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;레파지토리의 이름을 명시&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;레파지토리의 url을 명시&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;maven-options-plugin-management&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#maven-options-plugin-management&quot;&gt;1.8. pluginManagement&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;pluginManagement&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/pluginmanagement&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;다중 모듈 프로젝트에서 하위 모듈에서도 사용할 플러그인 정보를 설정한다. 설정방법은 &lt;code&gt;plugin&lt;/code&gt;설정 방법과 동일하다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;maven-options-repositories&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#maven-options-repositories&quot;&gt;1.9. repositories&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;repositories&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;maven-public&lt;span class=&quot;tag&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://repo.maven/maven-public&lt;span class=&quot;tag&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;releases&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;enabled&amp;gt;&lt;/span&gt;true&lt;span class=&quot;tag&quot;&gt;&amp;lt;/enabled&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/releases&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;snapshots&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;enabled&amp;gt;&lt;/span&gt;true&lt;span class=&quot;tag&quot;&gt;&amp;lt;/enabled&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;updatePolicy&amp;gt;&lt;/span&gt;always&lt;span class=&quot;tag&quot;&gt;&amp;lt;/updatePolicy&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/snapshots&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;in-project&lt;span class=&quot;tag&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;custom jars&lt;span class=&quot;tag&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;file://${project.basedir}/lib&lt;span class=&quot;tag&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;(9)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/repositories&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;레파지토리 &lt;code&gt;id&lt;/code&gt;. &lt;code&gt;settings.xml&lt;/code&gt;에 작성한 id와 매핑된다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;레파지토리의 url을 명시&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Release&lt;/code&gt; 버전에 대한 옵션 설정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Release&lt;/code&gt; 버전을 사용할 지 설정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Snapshot&lt;/code&gt; 버전에 대한 옵션 설정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Snapshot&lt;/code&gt; 버전을 사용할 지 설정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Snapshot&lt;/code&gt; 버전의 업데이트 정책을 사용(같은 버전이 여러개가 있을 수 있으므로 업데이트를 어떻게할 지 지정한다.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;레파지토리 &lt;code&gt;id&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;9&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;로컬 레파지토리의 경로 지정&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;maven-options-plugin-repositories&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#maven-options-plugin-repositories&quot;&gt;1.10. pluginRepositories&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;pluginRepositories&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;pluginRepository&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;central&lt;span class=&quot;tag&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;plugin repository&lt;span class=&quot;tag&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://repo.maven/maven-public&lt;span class=&quot;tag&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;layout&amp;gt;&lt;/span&gt;default&lt;span class=&quot;tag&quot;&gt;&amp;lt;/layout&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;snapshots&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;enabled&amp;gt;&lt;/span&gt;false&lt;span class=&quot;tag&quot;&gt;&amp;lt;/enabled&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/snapshots&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;releases&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;updatePolicy&amp;gt;&lt;/span&gt;never&lt;span class=&quot;tag&quot;&gt;&amp;lt;/updatePolicy&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/releases&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/pluginRepository&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/pluginRepositories&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;plugin repository&lt;/code&gt;의 id 지정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;plugin repository&lt;/code&gt;의 이름 지정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;plugin repository&lt;/code&gt;의 url 지정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;저장소가 &lt;code&gt;artifact&lt;/code&gt;를 찾고 저장하기 위해 사용하는 디렉토리 레이아웃. &lt;code&gt;legacy&lt;/code&gt;와 &lt;code&gt;default&lt;/code&gt;를 사용 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Snapshot&lt;/code&gt;버전에 대한 설정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Snapshot&lt;/code&gt;버전을 사용할 지 지정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Release&lt;/code&gt;버전에 대한 설정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Release&lt;/code&gt;버전의 업데이트 정책 설정&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;maven-options-profiles&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#maven-options-profiles&quot;&gt;1.11. profiles&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;profiles&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;profile&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;development&lt;span class=&quot;tag&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;environment&amp;gt;&lt;/span&gt;development&lt;span class=&quot;tag&quot;&gt;&amp;lt;/environment&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;profile&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;production&lt;span class=&quot;tag&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;environment&amp;gt;&lt;/span&gt;production&lt;span class=&quot;tag&quot;&gt;&amp;lt;/environment&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/profiles&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;빌드 옵션에 따라 별도로 사용할 설정 지정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;profile&lt;/code&gt; id. 메이븐 빌드 시 &lt;code&gt;-P&lt;/code&gt;옵션을 사용해 지정한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;해당 &lt;code&gt;profile&lt;/code&gt;에서 사용할 설정 지정 &lt;code&gt;properties&lt;/code&gt;뿐만 아니라 &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;dependencies&lt;/code&gt;등 다른 설정들도 재정의 할 수 있다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;maven-settings-xml&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#maven-settings-xml&quot;&gt;2. settings.xml&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;각각의 사용자별로 별도의 설정을 지정하고자 할 때 사용한다. 경로는 &lt;code&gt;~/.m2/settings.xml&lt;/code&gt;에 위치하게 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;settings&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://maven.apache.org/SETTINGS/1.0.0&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;attribute-name&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://www.w3.org/2001/XMLSchema-instance&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;attribute-name&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://maven.apache.org/SETTINGS/1.0.0&lt;/span&gt;
                      &lt;span class=&quot;content&quot;&gt;http://maven.apache.org/xsd/settings-1.0.0.xsd&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;servers&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;server&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;tag&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;maven-releases&lt;span class=&quot;tag&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
          &lt;span class=&quot;tag&quot;&gt;&amp;lt;username&amp;gt;&lt;/span&gt;username&lt;span class=&quot;tag&quot;&gt;&amp;lt;/username&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
          &lt;span class=&quot;tag&quot;&gt;&amp;lt;password&amp;gt;&lt;/span&gt;password&lt;span class=&quot;tag&quot;&gt;&amp;lt;/password&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/server&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;server&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;tag&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;maven-snapshots&lt;span class=&quot;tag&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;tag&quot;&gt;&amp;lt;username&amp;gt;&lt;/span&gt;username&lt;span class=&quot;tag&quot;&gt;&amp;lt;/username&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;tag&quot;&gt;&amp;lt;password&amp;gt;&lt;/span&gt;password&lt;span class=&quot;tag&quot;&gt;&amp;lt;/password&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/server&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;server&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;tag&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;maven-public&lt;span class=&quot;tag&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;tag&quot;&gt;&amp;lt;username&amp;gt;&lt;/span&gt;username&lt;span class=&quot;tag&quot;&gt;&amp;lt;/username&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;tag&quot;&gt;&amp;lt;password&amp;gt;&lt;/span&gt;password&lt;span class=&quot;tag&quot;&gt;&amp;lt;/password&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/server&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/servers&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;settings.xml&lt;/code&gt;의 root&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;maven repository server&lt;/code&gt;의 정보를 작성한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;서버의 id를 명시한다. 이 정보는 &lt;code&gt;pom.xml&lt;/code&gt;의 &lt;code&gt;repository&lt;/code&gt;의 id와 매핑된다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;서버가 &lt;code&gt;private repository&lt;/code&gt;일 경우 사용자 이름을 작성한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;서버가 &lt;code&gt;private repository&lt;/code&gt;일 경우 사용자 비밀번호를 작성한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;maven-lifecycle&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#maven-lifecycle&quot;&gt;3. Lifecycle&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/maven/maven_lifecycle.jpg&quot; alt=&quot;maven lifecycle&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Maven Lifecycle&lt;/div&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2018-02-01T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>Jenkins 사용 설명(번역)</title>
      <link>https://blog.nuti.pe.kr/2018/01/27/jenkins-description/</link>
      <updated>2018-01-27T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2018/01/27/jenkins-description</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#introduction&quot;&gt;1. Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;본 문서는 &lt;code&gt;Continuous Integration&lt;/code&gt;(지속적 통합) &amp;amp; &lt;code&gt;Continuous Deliver&lt;/code&gt;(지속적 전달)툴인 Jenkins에 관하여 설명하는 목적으로 작성한다.&lt;br&gt;
본 문서는 공식 가이드 문서와 사용자 경험을 바탕으로 작성하고, 초안은 2.46.2 버전을 기준으로 작성한다.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;continuous_integration&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#continuous_integration&quot;&gt;1.1. Continuous Integration&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In software engineering, continuous integration (CI) is the practice of merging all developer working copies to a shared mainline several times a day.
Grady Booch first named and proposed CI in his 1991 method, although he did not advocate integrating several times a day.
Extreme programming (XP) adopted the concept of CI and did advocate integrating more than once per day - perhaps as many as tens of times per day.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;Wikipedia&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;지속적 통합(이하 CI)이란 소프트웨어를 개발하는 과정에서 개발자들이 개발한 소스코드 내용을 정기적으로 통합을 하는 것을 의미한다.
소스코드를 지속적으로 통합하고 빌드함으로써 최종 통합 과정에서 발생하는 위험 줄이고, 지속적으로 퀄리티 컨트롤을 적용하는 프로세스를 실행하여 제품의 품질을 높이는 것이 목적이다.
또한, CI는 소프트웨어 개발 과정에서 반복적으로 하는 수동 작업을 자동화 함으로써, 빌드에 소요되는 시간을 줄이는 것을 목적으로 한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;CI의 이점&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;생산성 향상&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트 자동화에 따른 빠른 버그 검출 및 해결&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;정적 코드 분석에 의한 소스코드 품질 향상&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;빠른 업데이트 제공&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;continuous_delivery&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#continuous_delivery&quot;&gt;1.2. Continuous Delivery&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;CI가 지속적으로 통합하고, 빌드하는 것을 의미한다면, 지속적 전달(이하 CD)이란 코드 변경에 따라 지속적으로 배포하는 것을 의미하는 것이다.
지속적으로 배포하는 대상은 테스트 환경이 될 수도 있고, 프로덕션 환경이 될 수도 있다.
CD를 &lt;code&gt;Continuous Deployment&lt;/code&gt;(지속적 배포)라고 말하는 이들도 있는데,
지속적 전달과 지속적 배포의 차이는 프로덕션 환경에 배포하는 과정이 수동 배포(지속적 전달)인지, 자동 배포(지속적 배포)인지에 대한 차이가 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;CD의 이점&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;생산성 향상&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트 환경 자동 배포에 따른 빠른 버그 검출 및 해결&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;빠른 업데이트 제공&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;소프트웨어 릴리즈 자동화&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;jenkins&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#jenkins&quot;&gt;1.3. Jenkins&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins는 Sun Microsystem에서 Hudson이라는 이름으로 출시된 프로젝트이지만, Sun Microsystem이 Oracle에 인수되면서 Oracle과의 상표권문제로 인해서 이름을 변경하며 Jenkins로 분리되어 나왔다.
Jenkins는 Java기반의 오픈소스로 CI와 CD를 가능하게 하는 툴이다. 초기에는 CI툴로 자리를 잡았으나, Blue Ocean이라는 서브 프로젝트를 구축하면서, CD툴로도 자리를 잡아가고 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Jenkins가 제공하는 기능&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;웹 인터페이스를 통한 간편한 설정&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;강력하고 편리한 Reporting 기능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;지속적인 자동화 빌드&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;지속적인 자동화 테스트&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;커버리지 검사&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;코드 품질 검사&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다양한 인증기반과 결합한 인증 및 권한 관리 기능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Groovy script를 이용한 고수준의 Job Scheduling 기능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;커맨드라인 인터페이스 제공&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자동화된 배포 관리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;분산빌드 기능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;윈도우 커맨드 스케쥴링 실행기능&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;다양한 테스트 및 빌드 환경을 만들어 놓으면 Jenkins가 작업을 처리해 주기 때문에 Jenkins를 집사라고 표현하기도 한다.
각종 환경을 만드는 것은 사람이 직접해야하고, Jenkins를 효율적으로 활용하기 위해서는 다음과 같은 작업이 함께 이루어져야 한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;빌드 자동화&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;빌드 자동화 스크립트를 만들어 놓음으로써 Jenkins에게 빌드를 명령하여 지속적으로 빌드할 수 있도록 한다.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;테스트 자동화&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;단위 테스트, UI 테스트 등 테스트를 자동화해놓음으로써 개인이 미처 발견하지 못한 오류를 검출하고 개인에게 알림이 갈 수 있도록 한다.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;코드 표준 준수 여부 검사&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;정적 코드 분석을 통하여 코드 품질을 높일 수 있도록 한다.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Build Pipeline 구성&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;2개 이상의 모듈로 구성되는 프로젝트의 경우 각 모듈의 참조관계에 따라서 순차적으로 빌드할 수 있도록 한다.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;installing-jenkins&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#installing-jenkins&quot;&gt;2. Installing Jenkin&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
본 장에서는 Jenkins의 기본 설치 방법 및 초기 설정방법에 대하여 기술한다.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;pre_install&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#pre_install&quot;&gt;2.1. Pre-install&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;system_requirements&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#system_requirements&quot;&gt;2.1.1. System Requirements&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;최소 요구사항:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java 7&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;256MB free memory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1GB+ free disk space&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;소규모 팀 기준 권장 요구사항:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java 8&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1GB+ free memory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;50GB+ free disk space&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;installation&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#installation&quot;&gt;2.2. Installation&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;unixlinux&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#unixlinux&quot;&gt;2.2.1. Unix/Linux&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ubuntu와 같은 Debian 계열에서는 &lt;code&gt;apt&lt;/code&gt;를 통하여 설치할 수 있다.
기본 저장소에서 가장 최근의 버전을 설치할 수 있고, LTS버전을 설치하려면 별도의 저장소 설정을 해주어야 한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ &amp;gt; /etc/apt/sources.list.d/jenkins.list'
sudo apt-get update
sudo apt-get install jenkins&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;code&gt;/etc/default/jenkins&lt;/code&gt; 파일을 통해 기본 설정을 수정할 수 있고, 포트 중복 방지를 위해서 기본 포트를 바꿔주는 것을 권장한다.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;os_x&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#os_x&quot;&gt;2.2.2. OS X&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;jenkins 공식 홈페이지에서 패키지를 다운받는다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;패키지를 실행한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;brew&lt;/code&gt;를 통해서도 설치를 할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;최신 버전 설치&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;brew install jenkins&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;LTS 버전 설치&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;brew install jenkins-lts&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;windows&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#windows&quot;&gt;2.2.3. Windows&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;jenkins 공식 홈페이지에서 패키지를 다운받는다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;패키지를 실행한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;docker&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#docker&quot;&gt;2.2.4. Docker&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Docker 저장소에서 jenkins 이미지를 pull 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker pull jenkins&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Docker 컨테이너를 실행한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker run -d -p 9000:8080 -v $PWD/jenkins:/var/jenkins_home -t jenkins&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;위와 같이 실행할 시 로컬호스트의 9000포트가 컨테이너의 8080포트와 매핑이 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-d&lt;/code&gt; 옵션은 데몬 실행 옵션이니, 데몬으로 실행하기를 원하지 않을 경우 제외하면 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;other&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#other&quot;&gt;2.2.5. Other&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;war로 패키지된 파일을 다운받아서 &lt;code&gt;Tomcat&lt;/code&gt;이나 &lt;code&gt;Jetty&lt;/code&gt;와 같은 컨테이너로 실행할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;post_installationsetup_wizard&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#post_installationsetup_wizard&quot;&gt;2.3. Post-installation(Setup Wizard)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;create_admin_user_and_password_for_jenkins&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#create_admin_user_and_password_for_jenkins&quot;&gt;2.3.1. Create Admin User and Password for Jenkins&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;최초로 Jenkins를 실행하고 브라우저를 통해 페이지 진입 시, 관리자 인증을 요구한다. 이 때 필요한 토큰은 Jenkins의 로그에 남아있으니, 확인후 입력해주면 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;plain&quot;&gt;*************************************************************

Jenkins initial setup is required. A security token is required to proceed.
Please use the following security token to proceed to installation:

41d2b60b0e4cb5bf2025d33b21cb

*************************************************************&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/jenkins/installing-jenkins/post-installation/administrator-password.png&quot; alt=&quot;administrator password&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. 관리자 비밀번호&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;initial_plugin_installation&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#initial_plugin_installation&quot;&gt;2.3.2. Initial Plugin Installation&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;관리자 인증을 마치면 초기 Plugin 설치를 물어보는 페이지가 나타나는데, 처음 사용한다면 추천 플러그인을 설치할 것을 권장한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/jenkins/installing-jenkins/post-installation/initial-plugin-installation.png&quot; alt=&quot;initial plugin installation&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. 초기 플러그인 설치&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/jenkins/installing-jenkins/post-installation/install-suggested-plugins.png&quot; alt=&quot;install suggested plugins&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. 추천 플러그인 설치&lt;/div&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;system-configuration&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#system-configuration&quot;&gt;3. System Configuration&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
본 장에서는 Jenkins 시스템 설정하는 방법에 대하여 기술한다.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins를 설치하면 동시 실행 가능 executor의 수, 메일 서버, VCS 등 여러가지 정보를 설정할 수 있고, 플러그인 설치에 따라 더욱 다양한 정보를 설정할 수 있다.
각자 확인 후 필요한 정보들을 입력해주면 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;managing-security&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#managing-security&quot;&gt;4. Managing Security&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
본 장에서는 Jenkins 보안 설정하는 방법에 대하여 기술한다.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins는 웹 환경에서 동작하기 때문에 보안과 관련된 다양한 설정을 제공한다.
Jenkins를 안전하게 사용하기 위해서 보안 설정을 필수로 해줄 것을 권장한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;enabling_security&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#enabling_security&quot;&gt;4.1. Enabling Security&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Enable Security&lt;/strong&gt;설정에 따라 보안 사용 여부를 지정할 수 있다. 보안 설정은 반드시 활성화 할 것을 권장한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/public/images/jenkins/managing-jenkins/managing-security/enable-security.png&quot; alt=&quot;enable security&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. 보안 설정&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;jnlp_tcp_port&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#jnlp_tcp_port&quot;&gt;4.1.1. JNLP TCP Port&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins는 JNLP 프로토콜을 통해 Agent를 실행할 수 있도록 TCP 포트를 사용한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JNLP 기반 Agent를 위해 다음과 같은 두 가지 옵션을 제공한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Random&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;JNLP 포트를 랜덤으로 선택한다.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Fixed&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;JNLP 포트를 관리자가 임의로 지정한다.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;access_control&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#access_control&quot;&gt;4.1.2. Access Control&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Access Control은 Jenkins의 주된 보안 메카니즘이다.
Access Control설정을 위해 주된 두가지 설이 필요하다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Security Realm&lt;/strong&gt;은 사용자 정보를 가져을 방법과 위치를 알려주는 보안영역이다. 일반적으로 &quot;인증&quot;이라고 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Authorization&lt;/strong&gt;은 사용자 혹은 그룹이 어던 측면까지 액세스할 수 있는지 설정하는 영역이다. 일반적으로 &quot;권한&quot;이라고 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Security Realm과 Authorization 설정에 따라 완화된 혹은 엄격한 인증 및 권한 부여를 구성할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;또한, Role-based Authorization Strategy와 같은 플러그인을 통해 Access Control의 기능을 확장할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;security_realm&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#security_realm&quot;&gt;Security Realm&lt;/a&gt;&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins는 기본적으로 몇가지 Security Realm을 제공한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Delegate to servlet container&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;인증 절차를 Jenkins를 실행하고있는 Servlet Container에 위임한다. 이 옵션을 사용한다면, Servlet Container의 인증 문서를 확인하길 바란다.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Jenkins’ own user database&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;인증 절차를 다른 외부 시스템에 위임하지 않고 Jenkins 소유의 사용자 데이터베이스를 사용한다.
이 설정은 2.0부터 지원을 하고, 소규모 환경에 적합하다.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;LDAP&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;모든 인증 과정을 LDAP 서버에 위임한다.
이 옵션은 이미 LDAP 환경이 구축된 대규모 조직에 적합하다.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
LDAP 옵션이 제공되지 않는다면, plugin:ldap[LDAP plugin] 플러그인을 설치해서 사용할 수 있다.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Unix user/group database&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;인증 절차를 Unix 운영체제에 위임한다.
이 옵션은 Unix 그룹과 사용자를 재사용할 수 있다.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;다음과 같은 플러그인을 통해 추가적인 Security Realm을 사용할 수 있다&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;plugin:active-directory[Active Directory]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;plugin:github-oauth[GitHub Authentication]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;plugin:crowd2[Atlassian Crowd 2]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;authorization&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#authorization&quot;&gt;Authorization&lt;/a&gt;&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Security Realm은 누가 Jenkins에 액세스 가능한지를 정한다.
그와 다르게 Authorization은 누가 무엇을 액세스할 수 있는지를 정한다.
Jenkins는 기본적으로 몇가지 Authorization을 제공한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Anyone can do anything&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;모든 사용자가 Jenkins의 모든 기능을 활용할 수 있다.
로컬 테스트 용도가 아니라면 이 설정을 &lt;strong&gt;사용하지 않는 것을 권장&lt;/strong&gt;한다.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Legacy mode&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;사용자가 &quot;admin&quot;일 경우 시스템 전체의 제어 권한을 갖고, 익명 사용자를 포함한 기타 사용자는 읽기 권한만 갖는다.
로컬 테스트 용도가 아니라면 이 설정을 &lt;strong&gt;사용하지 않는 것을 권장&lt;/strong&gt;한다.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Logged in users can do anything&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;인증된 사용자가 시스템 전체 제어 권한을 갖는다.
추가 옵션으로 익명 사용자에게 읽기 권한을 부여할 지 여부를 정할 수 있다.
인증 과정을 강제로 지정할 때 유용하다.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Matrix-based security&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;특정 사용자에게 특정 제어 권한을 부여할 수 있다.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Project-based Matrix Authorization Strategy&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Matrix-based security의 확장으로 각각의 프로젝트에서 특정 사용자에게 특정 제어 권한을 부여한다.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;markup_formatter&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#markup_formatter&quot;&gt;4.1.3. Markup Formatter&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jenkins는 사용자 입력으로 HTML이나 Javascript를 입력하는 것을 허용한다.
기본 설정으로는 &lt;code&gt;&amp;lt;&lt;/code&gt; 및 &lt;code&gt;&amp;amp;&lt;/code&gt;와 같은 안전하지 않은 문자를 이스케이프처리하는 &lt;strong&gt;Plain Text&lt;/strong&gt; 설정을 사용한다.
&lt;strong&gt;Safe HTML&lt;/strong&gt; 설정을 사용하면 사용자와 관리자가 프로젝트 설명과 같은 곳에 HTML을 사용할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cross_site_request_forgery&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#cross_site_request_forgery&quot;&gt;4.2. Cross Site Request Forgery&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;CSRF 보호 설정 사용 여부를 지정할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;agentmaster_access_control&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#agentmaster_access_control&quot;&gt;4.3. Agent/Master Access Control&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;개념적으로, Jenkins master와 agent들은 여러 개별 프로세스와 시스템에서 실행되는 결합 시스템으로 생각할 수 있다.
이를통해 agent가 master 프로세스에 파일의 내용과 같은 사용 가능한 정보를 요청할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For larger or mature Jenkins environments where a Jenkins administrator might enable agents provided by other teams or organizations, a flat agent/master trust model is insufficient.
The Agent/Master Access Control system was introduced [2: Starting with 1.587, and 1.580.1, releases] to allow Jenkins administrators to add more granular access control definitions between the Jenkins master and the connected agents.
As of Jenkins 2.0, this subsystem has been turned on by default.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;customizing_access&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#customizing_access&quot;&gt;4.3.1. Customizing Access&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For advanced users who may wish to allow certain access patterns from the agents to the Jenkins master, Jenkins allows administrators to create specific exemptions from the built-in access control rules.
By following the link highlighted above, an administrator may edit Commands and File Access Agent/Master access control rules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;commands&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#commands&quot;&gt;Commands&lt;/a&gt;&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;Commands&quot; in Jenkins and its plugins are identified by their fully-qualified class names. The majority of these commands are intended to be executed on agents by a request of a master, but some of them are intended to be executed on a master by a request of an agent.
Plugins not yet updated for this subsystem may not classify which category each command falls into, such that when an agent requests that the master execute a command which is not explicitly allowed, Jenkins will err on the side of caution and refuse to execute the command.
In such cases, Jenkins administrators may &quot;whitelist&quot; [3: en.wikipedia.org/wiki/Whitelist] certain commands as acceptable for execution on the master.
   20&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect5&quot;&gt;
&lt;h6 id=&quot;advanced&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#advanced&quot;&gt;Advanced&lt;/a&gt;&lt;/h6&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Administrators may also whitelist classes by creating files with the .conf extension in the directory JENKINS_HOME/secrets/whitelisted-callables.d/. The contents of these .conf files should list command names on separate lines.
The contents of all the .conf files in the directory will be read by Jenkins and combined to create a default.conf file in the directory which lists all known safe command. The default.conf file will be re-written each time Jenkins boots.
Jenkins also manages a file named gui.conf, in the whitelisted-callables.d directory, where commands added via the web UI are written. In order to disable the ability of administrators to change whitelisted commands from the web UI, place an empty gui.conf file in the directory and change its permissions such that is not writeable by the operating system user Jenkins run as.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;file_access_rules&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#file_access_rules&quot;&gt;File Access Rules&lt;/a&gt;&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The File Access Rules are used to validate file access requests made from agents to the master. Each File Access Rule is a triplet which must contain each of the following elements:
1. allow / deny: if the following two parameters match the current request being considered, an allow entry would allow the request to be carried out and a deny entry would deny the request to be rejected, regardless of what later rules might say.
2. operation: Type of the operation requested. The following 6 values exist. The operations can also be combined by comma-separating the values. The value of all indicates all the listed operations are allowed or denied.
◦ read: read file content or list directory entries ◦ write: write file content
◦ mkdirs: create a new directory
◦ create: create a file in an existing directory
◦ delete: delete a file or directory&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;◦ stat: read metadata of a file/directory, such as timestamp, length, file access modes.
3. file path: regular expression that specifies file paths that matches this rule. In addition to the
base regexp syntax, it supports the following tokens:
◦ &amp;lt;JENKINS_HOME&amp;gt; can be used as a prefix to match the master’s JENKINS_HOME directory.
◦ &amp;lt;BUILDDIR&amp;gt; can be used as a prefix to match the build record directory, such as /var/lib/jenkins/job/foo/builds/2014-10-17_12-34-56.
◦ &amp;lt;BUILDID&amp;gt; matches the timestamp-formatted build IDs, like 2014-10-17_12-34-56.
The rules are ordered, and applied in that order. The earliest match wins. For example, the
following rules allow access to all files in JENKINS_HOME except the secrets folders:
  # To avoid hassle of escaping every '\' on Windows, you can use / even on Windows.
  deny all &amp;lt;JENKINS_HOME&amp;gt;/secrets/.*
  allow all &amp;lt;JENKINS_HOME&amp;gt;/.*
Ordering is very important! The following rules are incorrectly written because the 2nd rule will never match, and allow all agents to access all files and folders under JENKINS_HOME:
  allow all &amp;lt;JENKINS_HOME&amp;gt;/.*
  deny all &amp;lt;JENKINS_HOME&amp;gt;/secrets/.*&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect5&quot;&gt;
&lt;h6 id=&quot;advanced_2&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#advanced_2&quot;&gt;Advanced&lt;/a&gt;&lt;/h6&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Administrators may also add File Access Rules by creating files with the .conf. extension in the directory JENKINS_HOME/secrets/filepath-filters.d/. Jenkins itself generates the 30-default.conf file on boot in this directory which contains defaults considered the best balance between compatibility and security by the Jenkins project. In order to disable these built-in defaults, replace 30- default.conf with an empty file which is not writable by the operating system user Jenkins run as.
On each boot, Jenkins will read all .conf files in the filepath-filters.d directory in alphabetical order, therefore it is good practice to name files in a manner which indicates their load order.
Jenkins also manages 50-gui.conf, in the filepath-filters/ directory, where File Access Rules added via the web UI are written. In order to disable the ability of administrators to change the File Access Rules from the web UI, place an empty 50-gui.conf file in the directory and change its permissions such that is not writeable by the operating system user Jenkins run as.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;disabling&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#disabling&quot;&gt;4.3.2. Disabling&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While it is not recommended, if all agents in a Jenkins environment can be considered &quot;trusted&quot; to the same degree that the master is trusted, the Agent/Master Access Control feature may be disabled.
Additionally, all the users in the Jenkins environment should have the same level of access to all configured projects.
   22
An administrator can disable Agent/Master Access Control in the web UI by un-checking the box on the Configure Global Security page. Alternatively an administrator may create a file in JENKINS_HOME/secrets named slave-to-master-security-kill-switch with the contents of true and restart Jenkins.
Most Jenkins environments grow over time requiring their trust models to CAUTION evolve as the environment grows. Please consider scheduling regular &quot;check-
ups&quot; to review whether any disabled security settings should be re-enabled.&lt;/p&gt;
&lt;/div&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;managing-users&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#managing-users&quot;&gt;5. Managing Users&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;managing-plugins&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#managing-plugins&quot;&gt;6. Managing Plugins&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;managing-nodes&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#managing-nodes&quot;&gt;7. Managing Nodes&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;freestyle-project&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#freestyle-project&quot;&gt;8. Freestyle Project&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;pipeline-project&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#pipeline-project&quot;&gt;9. Pipeline Project&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;multi-branch-pipeline-project&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#multi-branch-pipeline-project&quot;&gt;10. Multi-branch Pipeline Project&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;blue-ocean&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#blue-ocean&quot;&gt;11. Blue Ocean&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;pipeline-syntax&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#pipeline-syntax&quot;&gt;12. Pipeline Syntax&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jenkins-with-java&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#jenkins-with-java&quot;&gt;13. Jenkins with Java&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jenkins-with-php&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#jenkins-with-php&quot;&gt;14. Jenkins with PHP&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jenkins-with-javascript&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#jenkins-with-javascript&quot;&gt;15. Jenkins with Javascript&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jenkins-with-dot-net&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#jenkins-with-dot-net&quot;&gt;16. Jenkins with .NET&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusions&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#conclusions&quot;&gt;17. Conclusions&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;terms&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#terms&quot;&gt;18. Terms&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div style=&quot;page-break-after: always;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#references&quot;&gt;19. References&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.moreagile.net/2014/01/jenkins-cicontinuous-integration-2.html&quot; class=&quot;bare&quot;&gt;http://www.moreagile.net/2014/01/jenkins-cicontinuous-integration-2.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/doc/&quot; class=&quot;bare&quot;&gt;https://jenkins.io/doc/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2018-01-27T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>SpringCamp 2017 2/2</title>
      <link>https://blog.nuti.pe.kr/2017/04/23/springcamp2017secondaryday/</link>
      <updated>2017-04-23T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2017/04/23/springcamp2017secondaryday</id>
      <content type="html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;2016년, 2017년 2년째 참석하고 있는 스프링 캠프, 첫째날과 둘째날 모두 등록을 했는데 첫째날은 회사 당직근무와 겹치는 바람에 참석을 하지 못했다. 토비님의 발표를 꼭 듣고 싶었는데 매우 아쉽다.(같이 셀카찍었으니 괜찮…)
개인적인 생각으로 작년에는 스칼라 주제가 많아서 큰 인상을 받지 못했는데, 올해는 작년에 비해 많은 인상을 받았다.
최근 많은 개발자들이 &lt;code&gt;Reactive Programming&lt;/code&gt;에 관심을 가지고 있는데, 이번 &lt;code&gt;Spring Camp&lt;/code&gt;에서 &lt;code&gt;Reactive Programming&lt;/code&gt;에 대해 다양한 각도에서 발표를 해주셔서 많은 것을 배우게 됐다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;keynote_naver_정상혁님&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#keynote_naver_정상혁님&quot;&gt;1. Keynote - Naver 정상혁님&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;정상혁님은 KSUG 일꾼단을했고, 본인이 혹은 주위 사람들이 했던 코드기여에 대해서 보여주셨다.
정상혁님의 키노트의 핵심은 &lt;code&gt;오픈소스에 코드기여를 해보자!&lt;/code&gt; 인것 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;나는 오픈소스 코드 기여에 관심이 많은데, 아직까지 많이 시도를 해보진 못했다.(&lt;code&gt;Javascript&lt;/code&gt;에 조금밖에.. 이것도 코드수정은 아니라…) 주 언어인 &lt;code&gt;Java&lt;/code&gt;에 코드기여를 할 그날까지 더 열심히…해야겠지&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;spring_5_reactive_springtrack_a_pivotal_정윤진님&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#spring_5_reactive_springtrack_a_pivotal_정윤진님&quot;&gt;2. Spring 5, Reactive Spring(Track A) - Pivotal 정윤진님&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;정윤진님은 주로 &lt;code&gt;Spring 5&lt;/code&gt;와 &lt;code&gt;Reactive&lt;/code&gt;의 개념에 대해서 발표를 해주셨던 것 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;spring_5&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#spring_5&quot;&gt;2.1. Spring 5&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Spring 5&lt;/code&gt; 가장 큰 이슈는 &lt;code&gt;JDK 9&lt;/code&gt; 지원과, &lt;code&gt;HTTP/2&lt;/code&gt; 지원, &lt;code&gt;Reactive&lt;/code&gt; 프로그래밍이다.
이에 따라 &lt;strong&gt;Framework의 Baseline&lt;/strong&gt; 이 &lt;code&gt;Servlet 3.0&lt;/code&gt;, &lt;code&gt;JDK 8+&lt;/code&gt;로 업그레이드 된다고 한다.
또한, &lt;code&gt;Java 9&lt;/code&gt;의 &lt;code&gt;Jigsaw Module System&lt;/code&gt;을 지원할 예정이다.
5.0 정식 버전은 2017년 6월 출시할 예정이고, &lt;code&gt;Java 9&lt;/code&gt;의 내용이 반영된 5.1은 2017년 12월에 출시될 예정이다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Jigsaw Module System&lt;/code&gt;을 적용함으로써, 필요하지 않은 라이브러리까지 의존성이 종속되버리는 &lt;strong&gt;의존성 종속 문제를 해결&lt;/strong&gt; 할 수 있다고 한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Spring 5&lt;/code&gt;에서는 &lt;code&gt;Tomcat&lt;/code&gt;, &lt;code&gt;Jetty&lt;/code&gt;, &lt;code&gt;Undertow&lt;/code&gt; 등의 &lt;code&gt;Container&lt;/code&gt;를 내장하는 것이 목표라고 한다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;project_reactor&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#project_reactor&quot;&gt;2.2. Project Reactor&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;몇년전부터 유행하고 있는 &lt;code&gt;Micro Service&lt;/code&gt;를 적용하기 위해서는 어플리케이션이 &lt;code&gt;Reactive&lt;/code&gt;해야한다. &lt;code&gt;Reactive&lt;/code&gt;해야한다는 것은 &lt;code&gt;Responsive&lt;/code&gt;하고, &lt;code&gt;Elastic&lt;/code&gt;하며, &lt;code&gt;Resilient&lt;/code&gt;를 가지고, &lt;code&gt;Message Driven&lt;/code&gt;해야한다는 것이다. 이렇게 말해서는 무슨 말인지 모르니 아래에 추가적으로 기술한다.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Attribute&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Responsive(응답성)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;시스템은 가능한 즉각적으로 응답한다.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Elastic(유연성)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;시스템이 장애에 직면하더라도 응답성을 유지해야 한다.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Resilient(탄력성)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;시스템이 작업량이 변화하더라도 응답성을 유지해야 한다.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Message Driven(메세지 주도)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;비동기 메시지 전달에 의존하여 구성 요소 사이에서 느슨한 결합, 격리, 위치 투명성 을 보장하는 경계를 형성한다.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;자세한 내용은 &lt;a href=&quot;http://www.reactivemanifesto.org&quot;&gt;리액티브 선언문&lt;/a&gt;을 참고하길 바란다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;reactive_streams_spec&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#reactive_streams_spec&quot;&gt;2.2.1. Reactive Streams Spec&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이부분은…. 적어놓고 기억이 안난다 ㅠㅠ 이 몹쓸놈의 기억력… 알코올치매… 다듬고 싶은데 기억이 나질 않아서 다듬을 수 없어서 메모했던 내용만 그대로 남긴다 ㅠㅠ&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;인프라간의 상호 운영성에 집중(웹서버, 데이터 저장소 드라이버 및 웹 프레임워크)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Message Driven System&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;논-블러킹 백프레셔를 제공하는 비동기 스트림 프로세싱 표준&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;단순한 API 구조&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Back pressure가 지원되는 Publisher + Subscriber(혹은 Subscription)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java 9 의 java.util.concurrent.Flow 으로 다시 패키징 됨&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;reactive_streams_process&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#reactive_streams_process&quot;&gt;2.2.2. Reactive Streams Process&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mono방식과 Flux방식이 존재한다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;example&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#example&quot;&gt;2.2.3. Example&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/joshlong/flux-flix-service&quot;&gt;Flux Example&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MongoDB가 필요하다. Docker를 통해 설정&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker pull mongo
docker run -p 127.00.1:27017:27017 mongo&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;event_sourcingtrack_a_ms_mvp_이규원님&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#event_sourcingtrack_a_ms_mvp_이규원님&quot;&gt;3. Event Sourcing(Track A) - MS MVP 이규원님&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이규원님은 이번 발표에서 스프링 캠프 최초를 많이 하신 것 같다. 스프링 캠프 최초 발표전 포토타임, 스프링 캠프 최초 구직광고… 뭔가 하나 더 있었는데… 참 유쾌하신 분인 것 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://doc.co/fggswS&quot;&gt;발표자료&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;event_sourcing&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#event_sourcing&quot;&gt;3.1. Event Sourcing&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Event Sourcing&lt;/code&gt;은 메세지를 주고받는 것이 중심이 아니라 메세지를 저장하는 것이 핵심이다. 기존의 많은 어플리케이션은 어플리케이션이 가진 마지막 상태를 데이터베이스에 저장한다. 마지막 상태 외에 다른 정보들을 보고자 할때는 마지막 상태를 보관하는 것과 함께 관심부에 대해 로깅을 한다. 이러한 상태저장과 로깅은 대부분 &lt;code&gt;Transactional&lt;/code&gt;하지 않아서 데이터 유실이 발생할 가능성이 있다. &lt;code&gt;Event Sourcing&lt;/code&gt;은 저장소에 저장된 이벤트를 바탕으로 이를 다시 재생하여 상태를 만들어낸다. 만약 삭제가 필요 시 실제 삭제를 하는 것이 아닌 삭제 라는 이벤트를 저장하는 것이다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Event Sourcing&lt;/code&gt;은 명령형 기반이라 명령을 검증해야 한다. 명령어는 보통 명령형 동사를 사용한다. 이벤트는 명령에 의해 실행시키는 것이기 때문에 검증 대상이 아니다. 이벤트는 실행되면 돌이킬 수 없다. 따라서 이벤트를 재생하는 것은 실패하지 않는다. 이벤트는 이미 발생한 일이기 때문에 과거형 동사를 사용한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;1~n의 버전이 존재할 때 최종 상태는 1~n까지 모든 이벤트의 합이된다. 많은 이벤트 버전이 존재한다고 할 때, 1~n까지 이벤트의 합을 구하는 것은 많은 부하가 생길 수 있으므로 &lt;code&gt;Rolling Snapshot&lt;/code&gt;을 사용하고, 이를 통해서 복원 속도를 올린다. &lt;code&gt;Rolling Snapshot&lt;/code&gt;은 중간에 Key Value 형태로 상태를 저장하는 것이다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;messaging&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#messaging&quot;&gt;3.2. Messaging&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; 메세지를 정확히 한번만 배달
&lt;strong&gt;1.&lt;/strong&gt; 메세지 순서 보장
&lt;strong&gt;2.&lt;/strong&gt; 메세지를 정확히 한번만 배달&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;메세지는 &lt;strong&gt;최대 1번&lt;/strong&gt; 배달되어야 하고, &lt;strong&gt;최소 1번&lt;/strong&gt; 배달되어야 한다. 이것은 메세지 유실이 발생할 수 있고, 문제 발생 시 메세지를 1번 이상 보낼 수 있다는 것을 의미한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;사실상 분산 트랜잭션에서 정확히 한번만 배달하는 것이 어렵다. 분산 트랜잭션 구현 자체가 힘들기 때문이다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이벤트 소싱은 도메인 모델에 대해서 이벤트 저장소에 저장 후 &lt;code&gt;Message Queue&lt;/code&gt;에 저장한다.
저장소에 저장되어 있기 때문에 메세지 큐에 전달하면서 문제 발생 시 다시 보낼 수 있기 때문에 정확히 한번은 어렵더라도 최소 1번은 구현하기 쉽다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;순서 보장은 해당 이벤트내에서만 순서를 지키면 문제가 없다.
하나의 이벤트 스트림에 대해서는 동시성이 일어나지 않기 때문에 메세지 순서를 보장할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cqrs&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#cqrs&quot;&gt;3.3. CQRS&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;재고가 10개 미만인 상품 목록이 필요합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;만약 위와 같은 조회 조건이 발생했을 때, 이벤트 저장소를 풀스캔하면 절대 안된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이벤트소싱은 이론적으로는 &lt;code&gt;CQRS&lt;/code&gt;에 종속되지 않지만 *현실적으로는 종속*된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;CQRS: Command Query Responsibility Segregation,
&lt;strong&gt;조회&lt;/strong&gt; 와 &lt;strong&gt;변경&lt;/strong&gt; 명령을 분리한다.
시스템의 커맨드부와 쿼리부를 나눈다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;고려사항&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#고려사항&quot;&gt;3.4. 고려사항&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Event Sourcing&lt;/code&gt;을 하기 위해 고려할 사항은 다음과 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;익숙하지 않음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;가파른 학습 곡선&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;일시적으로 데이터가 맞지 않을 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;과도한 엔지니어링&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;유일성을 제약하기 어렵다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;도구가 부족&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;example_2&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#example_2&quot;&gt;3.5. Example&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Reacture/Khala.EventSourcing/&quot;&gt;.Net으로 만든 Event Sourcing 예제&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;implementing_event_sourcing_cqrstrack_a_쿠팡_심천보님&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#implementing_event_sourcing_cqrstrack_a_쿠팡_심천보님&quot;&gt;4. Implementing Event Sourcing &amp;amp; CQRS(Track A) - 쿠팡 심천보님&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;심천보님은 앞에 이규원님과 같은 주제의 구현부 발표를 진행해 주셨다. &lt;code&gt;Event Sourcing&lt;/code&gt;과 &lt;code&gt;CQRS&lt;/code&gt;, 인터넷 블로그에 있는 글을 읽을때는 이해하기 어려웠는데, 말로 설명을 들으니 금방 이해가 되고, 속이 뻥 뚫린것 같은 느낌이 들었다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;event_sourcing_2&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#event_sourcing_2&quot;&gt;4.1. Event Sourcing&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Event Sourcing&lt;/code&gt;은 데이터 저장 방식의 새로운 패턴이다. 모든 상태 변화를 Event로 관리하고 &lt;strong&gt;불변&lt;/strong&gt; 이며, &lt;strong&gt;Append Only&lt;/strong&gt; 이다. 반드시 영속성을 가져야 한다. 데이터 복원 시 Event를 Replay한다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cqrs_2&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#cqrs_2&quot;&gt;4.2. CQRS&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;명령과 조회의 책임을 분리한다. 상태 처리 모델과 조회 처리 모델을 분리한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;조회 전용 모델이 별도로 필요하게 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;implementation&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#implementation&quot;&gt;4.3. Implementation&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Event Sourcing Framework를 이용할 수 있으나, 흐름을 이해하기 어려울 수 있다며 직접 구현한 부분을 보여주셨다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Command 객체 생성 &amp;amp; Validation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Service (Command Handler)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aggregate 생성 -&amp;gt; Event 조회 -&amp;gt; Snapshot조회&amp;amp;병합 -&amp;gt; Event Replay&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Doman 로직 수행, Event 깩체 생성&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;save() 이벤트 저장, 스냅샷 생성 혹은 저장&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;getEvents() saveEvents(), Event Publisher EventProjector&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jaceshim/springcamp2017&quot;&gt;Event Sourcing Example&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;장점&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#장점&quot;&gt;4.4. 장점&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;객체/관계 불일치 해소
변경사항에 대한 완벽한 이력 저장
디버그 용이성
탁월한 쓰기 성능&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;단점&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#단점&quot;&gt;4.5. 단점&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;익숙하지 않다.
단순 모델에 적합하지 않음
도구 부족 &amp;amp; 성숙되지 않은 기술
Axon/Eventuate
일반적인 쿼리 조회가 불가하므로 운영시에 불편하다(CQRS로 해소)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;reactive_programming_with_rxjavatrack_a_김인태님&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#reactive_programming_with_rxjavatrack_a_김인태님&quot;&gt;5. Reactive Programming with RxJava(Track A) - 김인태님&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;RxJava, 공부하려고 책만 사놓고 아직까지 보질않고있다…ㅠㅠ 써야지, 공부해야지 하면서도 이상하게 자꾸 손이 안간다ㅠㅠ&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;김인태님은 많은 내용을 한 세션에 담으려다 보니 많은 내용을 생략하신 것 같은 느낌이 많이 들었다. 이런게 있는데 시간이 없어서 자세히 설명은 못하고 공부해서 써보세요~ 같은 느낌이랄까… 그래도 RxJava를 이해하기 위해서 비동기를 이해해야된다며 &lt;code&gt;Thread&lt;/code&gt;를 통해서 그부분에 대해서 자세히 설명해주시는 모습이 좋았다. 마지막 질문에 동문서답하신건 안비밀… 마지막 질문이 Spring Reactor와 RxJava의 차이에 대한 질문을 누군가 했었는데, Spring Data와 RxJava의 차이에 대해서 답변을 하셧…응…?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;introduction&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#introduction&quot;&gt;5.1. Introduction&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Responsive, Resilient, Elastic, Message-driven&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Iterable, Future, Observable =&amp;gt; Push 방식&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;T -&amp;gt; Observable&amp;lt; T &amp;gt; -&amp;gt; Observable&amp;lt; R &amp;gt; -&amp;gt; Observable&amp;lt; T &amp;gt; -&amp;gt; T&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;spring_data_envers_for_entity_historytrack_a_우아한형제들_김영한님&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#spring_data_envers_for_entity_historytrack_a_우아한형제들_김영한님&quot;&gt;6. Spring Data Envers for Entity History(Track A) - 우아한형제들 김영한님&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;개인적으로 김영한님이 쓰신 &lt;code&gt;JPA 프로그래밍&lt;/code&gt;을 정독하고 문화적 충격을 받았었고, 많은 도움을 받았어서 책을 가져가서 저자싸인을 받아보려 했는데… 이놈의 소심한 성격이 또 나와서 책만 가져가고 싸인을 받지 못하고 돌아왔다 ㅠㅠ 이번 역시 김영한님의 발표가 많은 도움이 됐다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;김영한님이 발표하면서 말하셨던 뭔가 어떻게하면 될 것 같은데 안되는… 그부분을 많이 고민하고있었는데, 역시 세상엔 똑똑한 사람이 많다. 이미 만들어져있을줄이야…&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;히스토리 남기는 부분은 정말 내가 이러려고 개발자했나 자괴감이 들 정도로 단순 반복 노동 작업인데, 지금까지는 단순 반복 노동을 엄청 했지만, 앞으로는 많은 양을 줄이고, 편하게 할 수 있을 것 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;데이터_관점의_공통_관심사&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#데이터_관점의_공통_관심사&quot;&gt;6.1. 데이터 관점의 공통 관심사&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;누가? 언제? 데이터를 변경했나?
변경 이력을 남겨야한다.
악덕 기획자를 만나면 피곤해진다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;spring_data_auditing&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#spring_data_auditing&quot;&gt;6.2. Spring Data Auditing&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;누가? 언제? 데이터를 생성하거나 변경했는지 검사&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;@EnableJpaAuditing&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Entity에 &lt;code&gt;@CreatedDate&lt;/code&gt;, &lt;code&gt;@LastModifiedDate&lt;/code&gt;, &lt;code&gt;@CreatedBy&lt;/code&gt;, &lt;code&gt;@LastModifiedBy&lt;/code&gt; 를 사용&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;@MappedSuperclass&lt;/code&gt;를 통해 귀찮은 단순 반복작업을 피하자&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;hibernate_envers&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#hibernate_envers&quot;&gt;6.3. Hibernate Envers&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;하이버네이트 핵심 모듈
JPA 스펙에 정의된 모든 매핑 감사&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;엔티티의 변경 이력을 자동으로 관리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;XXX 테이블 -&amp;gt; XXX_AUD&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;히스토리를 계속 쌓는 방식으로 관리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;REV == Revision 식별자&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;REVTYPE&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;0: 등록&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1: 수정&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2: 삭제&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;@Audited&lt;/code&gt; -&amp;gt; Class or Method 에 사용&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;특정_트랜잭션_안에서_함께_변경된_히스토리를_보고_싶을_때&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#특정_트랜잭션_안에서_함께_변경된_히스토리를_보고_싶을_때&quot;&gt;6.4. 특정 트랜잭션 안에서 함께 변경된 히스토리를 보고 싶을 때&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;REVINFO 테이블사용&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;트랜잭션 단위의 통합 Revision 키 관리&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;고급기능&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#고급기능&quot;&gt;6.5. 고급기능&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;필드마다 수정 상태 컬럼 추가&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;@Audited(withModifiedFlag = true)
FieldName_MOD&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;같은_트랜잭션에서_함께_변경된_엔티티를_검색&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#같은_트랜잭션에서_함께_변경된_엔티티를_검색&quot;&gt;6.5.1. 같은 트랜잭션에서 함께 변경된 엔티티를 검색&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;plain&quot;&gt;org.hibernate.envers.track_entities_changed_in_revision: true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Spring Data Envers를 사용하면 엄청 편하게 사용할 수 있다!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;마치며&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#마치며&quot;&gt;7. 마치며…&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;개인적으로는 이번 모든 세션 발표 내용이 주옥같은 내용들이었다. 이번 스프링 캠프에서 정말 많은, 주옥같은 꿀같은 정보를 많이 얻게되어 너무 좋았다. 세션도 대놓고 서로 연관이 있도록 배치돼있는 것 같은 느낌이 드는것이, 주최자분들이 꽤나 고생을 하신것 같다. 첫날 참석 못한것이 아직도 많이 아쉽기는 하지만 내년 스프링 캠프를 기대하며 이만…&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2017-04-23T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>Clean Code</title>
      <link>https://blog.nuti.pe.kr/2017/04/10/clean-code/</link>
      <updated>2017-04-10T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2017/04/10/clean-code</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;코드_단위를_짧게_하라&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#코드_단위를_짧게_하라&quot;&gt;1. 코드 단위를 짧게 하라&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;하나의 메소드는 하나의 역할만 하도록 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;짧은 단위는 분석하기 쉽다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;짧은 단위가 재사용하기 쉽다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메소드 이름을 의미있게 작성해서 가독성을 높여야한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;코드_단위는_간단하게_짜라&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#코드_단위는_간단하게_짜라&quot;&gt;2. 코드 단위는 간단하게 짜라&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;단위를 커버하는 테스트 케이스를 최소화해야한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;간단한 단위는 복잡한 단위보다 이해하기 쉽고 수정하기도 쉽다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;간단한 단위는 테스트하기 쉽다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;코드는_한_번만_작성하라&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#코드는_한_번만_작성하라&quot;&gt;3. 코드는 한 번만 작성하라&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;중복코드는 여러번 수정해야 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;단위_인터페이스를_작게_하라&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#단위_인터페이스를_작게_하라&quot;&gt;4. 단위 인터페이스를 작게 하라&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;작은 인터페이스가 이해하고 재사용하기 쉽다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인터페이스가 작아야 메소드를 수정하기 쉽다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;파라미터가 5개 이상 넘어가면 코드를 읽기 어렵고 하는 일이 많아질 가능성이 크다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;관심사를_모듈로_분리하라&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#관심사를_모듈로_분리하라&quot;&gt;5. 관심사를 모듈로 분리하라&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;클래스를 나누어 관심사를 분리한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특정 구현부는 인터페이스 안에 숨긴다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;아키텍처_컴포넌트를_느슨하게_결합하라&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#아키텍처_컴포넌트를_느슨하게_결합하라&quot;&gt;6. 아키텍처 컴포넌트를 느슨하게 결합하라&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;컴포넌트 의존성이 낮아야 분리해서 유지보수할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컴포넌트 의존성이 낮아야 유지보수 책임을 분담할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컴포넌트 의존성이 낮아야 테스트하기 쉽다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;아키텍처_컴포넌트의_균형을_잡아라&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#아키텍처_컴포넌트의_균형을_잡아라&quot;&gt;7. 아키텍처 컴포넌트의 균형을 잡아라&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;코드베이스를_작게_하라&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#코드베이스를_작게_하라&quot;&gt;8. 코드베이스를 작게 하라&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;테스트를_자동화하라&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#테스트를_자동화하라&quot;&gt;9. 테스트를 자동화하라&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;테스트를 자동화하면 반복 테스트가 가능하다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트를 자동화하면 효율적으로 개발할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트를 자동화하면 예측 가능한 코드를 만든다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트를 작성하면 더 나은 코드를 작성할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;정상 케이스, 특이 케이스 모두 테스트한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;클린_코드를_작성하라&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#클린_코드를_작성하라&quot;&gt;10. 클린 코드를 작성하라&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;단위 수준의 코드 악취를 남기지 말라.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;나쁜 주석을 남기지 말라.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;주석 안에 코드를 남기지 말라.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;죽은 코드를 남기지 말라.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;긴 식별자 이름을 남기지 말라.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;매직 상수를 남기지 말라.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;제대로 처리 안 한 예외를 남기지 말라.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#references&quot;&gt;11. References&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;주스트 뷔서 등 5인 . 이일웅 &quot;클린 코드의 비결 유지보수 가능한 코딩의 기술 자바편&quot; . 길벗&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2017-04-10T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>NGINX Loadbalance 설정</title>
      <link>https://blog.nuti.pe.kr/2017/01/14/nginxloadbalancing/</link>
      <updated>2017-01-14T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2017/01/14/nginxloadbalancing</id>
      <content type="html">&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;upstream groupName {
  ip_hash;
  server {ip}:{port} weight=5;
  server {ip}:{port};
  server {ip}:{port} backup;
}

server {
  listen 80;
  server_name your.domain.com;

  location / {
    ...
    proxy_pass http://groupName;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;option&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ip_hash&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;IP를 Hash해서 특정 클라이언트는 특정 서버로만 연결&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;least_conn&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;가장 클라이언트 연결 갯수가 적은 서버로 전달하는 설정&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;keepalive n&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;n개의 커넥션을 유지&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;slow_start=n&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;최근에 장애로부터 복구한 서버에 요청이 폭주하지 않도록 slow_start 에 주어진 시간만큼 기다려 줌&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;weight=n&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;특정 서버로 가는 요청의 가중치를 지정&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;max_fails=n&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;설정한 값 n만큼 실패가 발생하면 서버가 죽은 것으로 간주&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;fail_timeout&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;max_fails 가 설정된 상태에서 n 시간만큼 응답하지 않으면 죽은 것으로 간주&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;down&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;해당 서버를 사용하지 않는다. ip_hash 옵션이 설정된 경우에만 유효&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;backup&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;대기하고 있다가 설정된 모든 서버가 동작하지 않을 때 사용되는 서버&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2017-01-14T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>CentOS 메일서버 설정 및 자바에서 메일 발송하기</title>
      <link>https://blog.nuti.pe.kr/2016/12/26/setmail/</link>
      <updated>2016-12-26T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2016/12/26/setmail</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;centos_메일서버_설정&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#centos_메일서버_설정&quot;&gt;1. CentOS 메일서버 설정&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;sendmail_관련_패키지_설치&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#sendmail_관련_패키지_설치&quot;&gt;1.1. sendmail 관련 패키지 설치&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;sendmail&lt;/code&gt;, &lt;code&gt;sendmail-cf&lt;/code&gt;, &lt;code&gt;sendmail-devel&lt;/code&gt; 패키지를 설치한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;표준 패키지&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;sendmail&lt;/code&gt; - 메일 전송 에이전트&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;추가 패키지&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;sendmail-cf&lt;/code&gt; - sendmail을 재설정 하는데 필요한 파일들
&lt;code&gt;sendmail-devel&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;설치&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;yum install sendmail sendmail-cf sendmail-devel&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;sendmail_설정&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#sendmail_설정&quot;&gt;1.2. sendmail 설정&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;sendmail은 로컬에서만 메일을 발송하도록 하는데, 릴레이 설정을 하고, 메일 클라이언트를 통해서 발송할 수 있도록 아래와 같이 설정을 바꾼다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;/etc/mail/sendmail.mc&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;plain&quot;&gt;52: TRUST_AUTH_MECH('EXTERNAL DIGEST-MD5 CRAM-MD5 LOGIN PLAIN') dnl
53: define('confAUTH_MECHANISMS', 'EXTERNAL GSSAPI DIGEST-MD5 CRAM-MD5 LOGIN PLAIN') dnl
116: dnl DAEMON_OPTIONS('Port=smtp,Name=MTA') dnl&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;위 파일을 통해 &lt;code&gt;sendmail.cf&lt;/code&gt; 파일을 생성한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;m4 sendmail.mc &amp;gt; sendmail.cf&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;sendmail_서비스_시작&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#sendmail_서비스_시작&quot;&gt;1.3. sendmail 서비스 시작&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;service start sendmail
chkconfig --level 2345 sendmail on&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;아래 설정은 부팅 시 실행되도록 설정하는 것이다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;sendmail_access_수정&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#sendmail_access_수정&quot;&gt;1.4. sendmail access 수정&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;access권한을 수정한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;/etc/mail/access&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;plain&quot;&gt;.
.
.
Connect:192.168.0         RELAY&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;서비스를 재시작 한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;service sendmail restart&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;자바_설정&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#자바_설정&quot;&gt;2. 자바 설정&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;dependency&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#dependency&quot;&gt;2.1. dependency&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;javax.mail&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mail&lt;span class=&quot;tag&quot;&gt;&amp;lt;/articactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;version&lt;span class=&quot;tag&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(spring 기준)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 환경정보 설정&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// 메일서버 주소를 IP 또는 도메인 명으로 지정&lt;/span&gt;
&lt;span class=&quot;predefined-type&quot;&gt;Properties&lt;/span&gt; props = &lt;span class=&quot;predefined-type&quot;&gt;System&lt;/span&gt;.getProperties();
props.setProperty(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;mail.smtp.host&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
JavaMailSenderImpl javaMailSender = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; JavaMailSenderImpl();
javaMailSender.setJavaMailProperties(props);

&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
  &lt;span class=&quot;directive&quot;&gt;final&lt;/span&gt; MimeMessage mimeMessage = javaMailSender.createMimeMessage();
  &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; html = &lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;;
  MimeMessageHelper helper = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MimeMessageHelper(mimeMessage, &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;, Charsets.UTF_8.displayName());
  helper.setFrom(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; InternetAddress(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;dev.nuti0102@gmail.com&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;HyeonilJeong&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;));
  helper.setTo(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;nuti0102@gmail.com&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
  helper.setSubject(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Subject&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);

  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (MailContentType.HTML.equals(MailContentType.HTML)) {
    html = &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;;
  }

  helper.setText(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Mail Content&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, html);

  &lt;span class=&quot;predefined-type&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; attachList = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();
  attachList.add(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Attach File Path1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
  attachList.add(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Attach File Path2&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);

  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;directive&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; attach : attachList) {
    &lt;span class=&quot;directive&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;File&lt;/span&gt; file = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;File&lt;/span&gt;(attach);

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (file.exists()) {
      helper.addAttachment(file.getName(), file);
    }
  }

  javaMailSender.send(mimeMessage);
} &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;exception&quot;&gt;Exception&lt;/span&gt; e) {
  e.printStackTrace(&lt;span class=&quot;predefined-type&quot;&gt;System&lt;/span&gt;.err);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2016-12-26T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>docker iptables 오류</title>
      <link>https://blog.nuti.pe.kr/2016/12/25/dockeriptablestrouble/</link>
      <updated>2016-12-25T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2016/12/25/dockeriptablestrouble</id>
      <content type="html">&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;iptables failed: ~~~ ! -i docker0: iptables: No chain/target/match by that name&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;위와 같은 오류가 날 경우 아래와 같이 iptables에 DOCKER 체인을 등록해 주면 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;iptables -t nat -N DOCKER
iptables -t nat -A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER
iptables -t nat -A PREROUTING -m addrtype --dst-type LOCAL ! --dst 127.0.0.0/8 -j DOCKER&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2016-12-25T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>Docker Container</title>
      <link>https://blog.nuti.pe.kr/2016/12/09/dockercontainer/</link>
      <updated>2016-12-09T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2016/12/09/dockercontainer</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;docker_container_lifecycle&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#docker_container_lifecycle&quot;&gt;1. Docker Container Lifecycle&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이미지가 생성되면 이미지를 바탕으로 컨테이너를 생성할 수 있다. 컨테이너의 Lifecycle은 아래와 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/public/img/docker-container/docker-container-lifecycle.png&quot; alt=&quot;Docker Container Lifecycle&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;컨테이너_생성docker_create&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#컨테이너_생성docker_create&quot;&gt;1.1. 컨테이너 생성(docker create)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Docker 이미지로 컨테이너를 생성한다. &lt;code&gt;docker create&lt;/code&gt; 명령어를 실행하면 이미지에 포함된 linux 디렉토리 및 파일 집합의 스냅샷을 만든다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;컨테이너_생성_및_구동docker_run&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#컨테이너_생성_및_구동docker_run&quot;&gt;1.2. 컨테이너 생성 및 구동(docker run)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Docker 이미지에서 컨테이너를 생성하여 컨테이너상에서 프로로세스를 구동한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;생성_및_구동&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#생성_및_구동&quot;&gt;1.2.1. 생성 및 구동&lt;/a&gt;&lt;/h4&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;옵션&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-a, –attach=[STDIN or STDOUT or STDERR]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;표준입력(STDIN), 표준출력(STDOUT), 표준 에러 출력(STDERR)을 연결&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;–cidfile=&quot;file name&quot;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너 ID를 파일로 출력&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-d, –detach=false&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너를 생성하여 백그라운드에서 실행&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-i, –interactive=false&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너 표준 입력 열기&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-t, –tty=false&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;tty(단말 디바이스)를 사용&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;–name&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너 명&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker run -it --name &amp;quot;testCal&amp;quot; centos /bin/cal&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/public/img/docker-container/test-cal.png&quot; alt=&quot;test calendar&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker run -it --name &amp;quot;testBash&amp;quot; centos /bin/bash&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/public/img/docker-container/test-bash.png&quot; alt=&quot;test bash&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;백그라운드_실행&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#백그라운드_실행&quot;&gt;1.2.2. 백그라운드 실행&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker run [option] &amp;lt;image&amp;gt;[:tag] [cmd]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;옵션&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-d,–detach&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;백그라운드에서 실행&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-u,–user=&quot;사용자명&quot;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;사용자명을 입력&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;–restart=[no or on-failure or on-failure:횟수n or always]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;커맨드 실행 결과에 따라 재기동&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;–rm&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;커맨드 실행 완료 후 컨테이너 자동 삭제&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker run -d centos /bin/ping localhost&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/public/img/docker-container/docker-run-background.png&quot; alt=&quot;docker run background&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;실행이 완료된 후 컨테이너를 자동으로 삭제하고자 할 때에는 &lt;code&gt;rm&lt;/code&gt;옵션을 사용한다. 또한, 커맨드 실행 결과에 따라 컨테이너를 재구동시키고자 할때에는 &lt;code&gt;restart&lt;/code&gt; 옵션을 사용한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;restart&lt;/code&gt;옵션은 아래와 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;값&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;no&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;재구동하지 않음&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;on-failure&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;종료 status가 0이 아닌 경우 재구동&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;on-failure:횟수n&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;종료 status가 0이 아닌 경우 n번 재구동&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;always&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;항상 재구동&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;컨테이너_네트워크_설정&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#컨테이너_네트워크_설정&quot;&gt;1.2.3. 컨테이너 네트워크 설정&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker run [option] &amp;lt;image&amp;gt;[:tag] [cmd]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;옵션&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;–add-host=[Host Name:IP Address]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너의 /etc/hosts에 Host Name과 IP Address를 설정&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;–dns=[IP Address]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;DNS 서버의 IP Address를 설정&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;–expose=[Port Number]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Port Number 할당&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;–mac-address=[MAC Address]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Container의 MAC Address 설정&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;–net=[bridge or none or container:'name or d' or host]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너 네트워크 설정&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-h, –hostname=[Host Name]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너의 Host Name 설정&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-P, –publish-all=[true or false]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;임의의 포트를 컨테이너에 할당&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-p [Host Port Number]:[Container Port Number]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Host와 Container의 Port를 매핑&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;–link=[컨테이너명:alias]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;다른 컨테이너에서 액세스 시 이름 설정&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Port Mapping&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker run -d -p 9000:80 httpd&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;호스트 포트 &lt;code&gt;9000&lt;/code&gt;과 컨테이너 포트&lt;code&gt;80&lt;/code&gt;에 매핑한다. 호스트 &lt;code&gt;9000&lt;/code&gt;으로 액세스 하면 컨테이너 상의 &lt;code&gt;80&lt;/code&gt;포트로 연결된다. 임의의 포트를 할당할 때에는 &lt;code&gt;P&lt;/code&gt; 옵션을 사용한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;DNS Server&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker run --dns=192.168.1.1 httpd&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;MAC Address&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker run -it --mac-address=&amp;quot;92:d0:c6:0a:29:33&amp;quot; centos&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Host Name&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker run -it --add-host=test.com:192.168.1.1 centos&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;net option&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;값&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;bridge&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;bridge 접속(default) 사용&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;none&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;네트워크에 접속하지 않음&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;container:[name or id]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;다른 컨테이너의 네트워크를 사용&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;host&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너가 호스트 OS의 네트워크를 사용&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;리소스_설정&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#리소스_설정&quot;&gt;1.2.4. 리소스 설정&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker run [option] &amp;lt;image&amp;gt;[:tag] [cmd]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;option&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-c,–cpu-shares=0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CPU resource 분배&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-m,–memory=[usage]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;메모리 사용량 제한(단위는 b, k, m, g)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-v,–volume=[host directory]:[container directory]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;호스트와 컨테이너의 디렉토리 공유&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;cpu &amp;amp; memory&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker run --cpu-shares=512 --memory=512m centos&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Docker 리소스를 제한하는 기능은 &lt;code&gt;linux&lt;/code&gt;의 &lt;code&gt;cgroups&lt;/code&gt; 기능을 사용한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Host OS&lt;/code&gt;와 &lt;code&gt;Container&lt;/code&gt;내의 디렉토리를 공유하고자 할 때는 volume option을 사용한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;volume&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker run -v /c/Users/user/workspace:/var/www/html httpd&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;환경_설정&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#환경_설정&quot;&gt;1.2.5. 환경 설정&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker run [option] &amp;lt;image&amp;gt;[:tag] [cmd]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-e, –env=[환경변수]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;환경변수 설정&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;–env-file=[파일명]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;파일에서 환경변수 설정&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;–privileged=[true or false]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;privileged 모드에서 구동(호스트의 커널 기능도 사용 가능)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;–read-only=[true or false]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너의 파일 시스템을 read-only로 설정&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-w, –workdir=[경로]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너의 작업 디렉토리를 설정&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker run -it -e foo=bar centos /bin/bash&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker run -it --env-file=env_list centos /bin/bash&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;컨테이너_목록_확인docker_ps&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#컨테이너_목록_확인docker_ps&quot;&gt;1.3. 컨테이너 목록 확인(docker ps)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker ps [option]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;option&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-a, –all=false&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;구동, 중지 상태의 모든 컨테이너를 표시&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;–before=&amp;quot;&quot;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;입력한 컨테이너명 또는 ID보다 이전에 구동된 컨테이너를 표시
–since=&quot;&amp;quot;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;입력한 컨테이너명 또는 ID보다 이후에 구동된 컨테이너를 표시&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-l, –latest=false&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;마지막에 구동된 컨테이너를 표시&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-f, –filter '[key]=[value]'&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;목록에 표시할 컨테이너를 필터링&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;–format '[key]=[value]'&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;폭록에 표시할 포맷을 설정&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;–no-trunc=false&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;생략된 정보 없이 모두 표시&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-q, –quiet=false&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너 ID만 표시&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-s, –size=false&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;result(option key)&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;item&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CONTAINER ID&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너 ID&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;IMAGE&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너 기반이 된 이미지&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;COMMAND&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너에서 실행중인 커맨드&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CREATED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너 생성 후 경과 시간&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;STATUS&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너 상태(restarting or running or paused or exited)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;PORTS&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;할당된 포트&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;NAMES&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너 명&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;format&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;placeholder&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;.ID&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너 ID&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;.Image&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너의 기반이 된 이미지&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;.Command&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;실행 커맨드&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;.CreatedAt&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너가 생성된 시간&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;.RunningFor&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너 구동 시간&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;.Ports&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;할당된 포트&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;.Status&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너 상태&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;.Size&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너 디스크 사이즈&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;.Labels&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너의 모든 라벨&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;.Label&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너 라벨&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker ps -a --format &amp;quot;table {{.ID}}\t{{.Status}}&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;컨테이너_구동_확인docker_stats&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#컨테이너_구동_확인docker_stats&quot;&gt;1.4. 컨테이너 구동 확인(docker stats)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker stats &amp;lt;컨테이너명 또는 ID&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;result&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;item&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CONTAINER&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너명 또는 ID&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CPU %&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CPU 사용률&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MEM USAGE/LIMIT&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;메모리 사용량/컨테이너에서 사용할 수 있는 메모리 제한&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MEM %&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;메모리 사용률&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;NET I/O&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;네트워크 I/O&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;컨테이너_구동docker_start&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#컨테이너_구동docker_start&quot;&gt;1.5. 컨테이너 구동(docker start)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;중지중인 컨테이너를 구동한다. 컨테이너명 또는 ID를 입력하여 구동한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker start [option] &amp;lt;컨테이너명 또는 ID&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;option&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-a, –attach=false&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;표준 출력, 표준 에러를 연결&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-i, –interactive=false&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너 표준 입력을 연결&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;컨테이너_중지docker_stop&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#컨테이너_중지docker_stop&quot;&gt;1.6. 컨테이너 중지(docker stop)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;구동중인 컨테이너를 중지한다. 컨테이너명 또는 ID를 입력하여 중지한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker stop [option] &amp;lt;컨테이너명 또는 ID&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;option&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-t, –time=10&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너 중지 시간을 지정(default: 10)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;컨테이너_재시작docker_restart&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#컨테이너_재시작docker_restart&quot;&gt;1.7. 컨테이너 재시작(docker restart)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker restart [option] &amp;lt;컨테이너명 또는 ID&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;option&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-t, –time=10&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너 재시작 시간을 지정(default: 10)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;컨테이너_삭제docker_rm&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#컨테이너_삭제docker_rm&quot;&gt;1.8. 컨테이너 삭제(docker rm)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;컨테이너를 삭제한다. 삭제하는 컨테이너는 사용 중지중이어야 한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker rm [option] &amp;lt;컨테이너명 또는 ID&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;option&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-f, –force=false&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;구동 중인 컨테이너를 강제 삭제&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-v –volume=false&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;할당된 볼륨을 삭제&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;컨테이너_일시정지_및_재시작docker_pausedocker_unpause&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#컨테이너_일시정지_및_재시작docker_pausedocker_unpause&quot;&gt;1.9. 컨테이너 일시정지 및 재시작(docker pause/docker unpause)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker pause &amp;lt;컨테이너명 또는 ID&amp;gt;
docker unpause &amp;lt;컨테이너명 또는 ID&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;docker_container_usage&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#docker_container_usage&quot;&gt;2. Docker Container Usage&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;컨테이너_접속docker_attach&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#컨테이너_접속docker_attach&quot;&gt;2.1. 컨테이너 접속(docker attach)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker attach &amp;lt;컨테이너명 또는 ID&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;P&lt;/code&gt;, &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Q&lt;/code&gt;로 종료&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;컨테이너의_프로세스_실행docker_exec&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#컨테이너의_프로세스_실행docker_exec&quot;&gt;2.2. 컨테이너의 프로세스 실행(docker exec)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker exec [option] &amp;lt;컨테이너명 또는 ID&amp;gt; &amp;lt;cmd&amp;gt; [value]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;option&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-d, –detach=false&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;커맨드를 백그라운드에서 실행&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-i, –interactive=false&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;컨테이너 표준 입력 열기&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-t, –tty=false&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;tty(단말디바이스) 사용&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;컨테이너의_프로세스_확인docker_top&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#컨테이너의_프로세스_확인docker_top&quot;&gt;2.3. 컨테이너의 프로세스 확인(docker top)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker top &amp;lt;컨테이너명 또는 ID&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;컨테이너의_포트_상태_확인docker_port&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#컨테이너의_포트_상태_확인docker_port&quot;&gt;2.4. 컨테이너의 포트 상태 확인(docker port)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker port &amp;lt;컨테이너명 또는 ID&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;컨테이너명_변경docker_rename&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#컨테이너명_변경docker_rename&quot;&gt;2.5. 컨테이너명 변경(docker rename)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker rename &amp;lt;old&amp;gt; &amp;lt;new&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;컨테이너_내에서_파일_복사&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#컨테이너_내에서_파일_복사&quot;&gt;2.6. 컨테이너 내에서 파일 복사&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker cp &amp;lt;컨테이너명 또는 ID&amp;gt;:&amp;lt;컨테이너 내의 파일 경로&amp;gt; &amp;lt;호스트 디렉토리 경로&amp;gt;
docker cp &amp;lt;호스트 파일&amp;gt; &amp;lt;컨테이너명 또는 ID&amp;gt;:&amp;lt;컨테이너 내의 파일 경로&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;컨테이너_내에서_파일_변경_이력_확인docker_diff&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#컨테이너_내에서_파일_변경_이력_확인docker_diff&quot;&gt;2.7. 컨테이너 내에서 파일 변경 이력 확인(docker diff)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker diff &amp;lt;컨테이너명 또는 ID&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;구분&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;구분&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;A&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;파일 추가&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;D&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;파일 삭제&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;C&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;파일 변경&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;docker_version&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#docker_version&quot;&gt;2.8. docker version&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Docker의 버전 확인&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker version&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;docker_실행_환경_확인docker_info&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#docker_실행_환경_확인docker_info&quot;&gt;2.9. Docker 실행 환경 확인(docker info)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;$ docker info
Containers: 6
 Running: 0
 Paused: 0
 Stopped: 6
Images: 7
Server Version: 1.12.3
Storage Driver: aufs
 Root Dir: /var/lib/docker/aufs
 Backing Filesystem: extfs
 Dirs: 71
 Dirperm1 Supported: true
Logging Driver: json-file
Cgroup Driver: cgroupfs
Plugins:
 Volume: local
 Network: null bridge host overlay
Swarm: inactive
Runtimes: runc
Default Runtime: runc
Security Options: seccomp
Kernel Version: 4.4.27-moby
Operating System: Alpine Linux v3.4
OSType: linux
Architecture: x86_64
CPUs: 2
Total Memory: 1.951 GiB
Name: moby
ID: LRQA:PHWE:COK5:5FCF:7KYP:ZWQ2:346W:PP5A:GMHM:N3WP:AKV4:YYRZ
Docker Root Dir: /var/lib/docker
Debug Mode (client): false
Debug Mode (server): true
 File Descriptors: 16
 Goroutines: 29
 System Time: 2016-12-17T05:47:28.308350112Z
 EventsListeners: 1
No Proxy: *.local, 169.254/16
Registry: https://index.docker.io/v1/
WARNING: No kernel memory limit support
Insecure Registries:
 127.0.0.0/8&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;컨테이너에서_이미지_생성&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#컨테이너에서_이미지_생성&quot;&gt;3. 컨테이너에서 이미지 생성&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;컨테이너에서_이미지_생성docker_commit&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#컨테이너에서_이미지_생성docker_commit&quot;&gt;3.1. 컨테이너에서 이미지 생성(docker commit)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker commit [option] &amp;lt;컨테이너명 또는 ID&amp;gt; [image][:tag]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;option&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-a, –author=&amp;quot;&quot;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;생성자
-m, –message=&quot;&amp;quot;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;메시지&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-p, –pause=true&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;컨테이너를_tar_파일로_저장docker_export&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#컨테이너를_tar_파일로_저장docker_export&quot;&gt;3.2. 컨테이너를 tar 파일로 저장(docker export)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker export &amp;lt;컨테이너명 또는 ID&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tar_파일에서_이미지_생성docker_import&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#tar_파일에서_이미지_생성docker_import&quot;&gt;3.3. tar 파일에서 이미지 생성(docker import)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker import &amp;lt;파일 또는 URL&amp;gt; - [image][:tag]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;이미지_저장docker_save&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#이미지_저장docker_save&quot;&gt;3.4. 이미지 저장(docker save)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker save [option] &amp;lt;file&amp;gt; [image]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;이미지로_되돌리기docker_load&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#이미지로_되돌리기docker_load&quot;&gt;3.5. 이미지로 되돌리기(docker load)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker load [option]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2016-12-09T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>Docker 기본 사용법</title>
      <link>https://blog.nuti.pe.kr/2016/12/04/dockerbasicusage/</link>
      <updated>2016-12-04T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2016/12/04/dockerbasicusage</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;기본_사용_command&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#기본_사용_command&quot;&gt;1. 기본 사용 Command&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;이미지_다운로드docker_pull&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#이미지_다운로드docker_pull&quot;&gt;1.1. 이미지 다운로드(docker pull)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker pull [옵션] &amp;lt;이미지명&amp;gt;[:태그명]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu Download&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker pull ubuntu&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;tag&lt;/code&gt;를 붙이지 않으면 자동으로 최신 버전을 다운받는다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker pull registry.hub.docker.com/ubuntu&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;위와 같이 url도 지정할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;이미지_목록_출력docker_images&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#이미지_목록_출력docker_images&quot;&gt;1.2. 이미지 목록 출력(docker images)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker images [옵션] [repository명]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/public/img/docker-basic-usage/docker-images.png&quot; alt=&quot;Docker Images&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;위와같이 &lt;code&gt;docker images&lt;/code&gt; 명령어를 사용해 다운받은 전체 이미지 목록을 출력할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Attribute&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;REPOSITORY&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Docker 이미지 명&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;TAG&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Docker 이미지 태그명&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;IMAGE ID&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Docker 이미지 ID&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CREATED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;생성일&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;VIRTUAL SIZE&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;사이즈&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;이미지_세부_정보_확인docker_inspect&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#이미지_세부_정보_확인docker_inspect&quot;&gt;1.3. 이미지 세부 정보 확인(docker inspect)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker inspect [옵션] &amp;lt;컨테이너 또는 이미지의 이름, ID&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Docker 이미지의 세부정보를 확인할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;$ docker inspect ubuntu
[
    {
        &amp;quot;Id&amp;quot;: &amp;quot;sha256:4ca3a192ff2a5b7e225e81dc006b6379c10776ed3619757a65608cb72de0a7f6&amp;quot;,
        &amp;quot;RepoTags&amp;quot;: [
            &amp;quot;ubuntu:latest&amp;quot;
        ],
        &amp;quot;RepoDigests&amp;quot;: [
            &amp;quot;ubuntu@sha256:3b64c309deae7ab0f7dbdd42b6b326261ccd6261da5d88396439353162703fb5&amp;quot;
        ],
        &amp;quot;Parent&amp;quot;: &amp;quot;&amp;quot;,
        &amp;quot;Comment&amp;quot;: &amp;quot;&amp;quot;,
        &amp;quot;Created&amp;quot;: &amp;quot;2016-11-29T20:04:37.391061223Z&amp;quot;,
        &amp;quot;Container&amp;quot;: &amp;quot;924f68d3d4b6ae0fe9e35ec75d745b12863d8f0eb3f3d054ca4427a789d72d69&amp;quot;,
        &amp;quot;ContainerConfig&amp;quot;: {
            &amp;quot;Hostname&amp;quot;: &amp;quot;6766fe1c072d&amp;quot;,
            &amp;quot;Domainname&amp;quot;: &amp;quot;&amp;quot;,
            &amp;quot;User&amp;quot;: &amp;quot;&amp;quot;,
            &amp;quot;AttachStdin&amp;quot;: false,
            &amp;quot;AttachStdout&amp;quot;: false,
            &amp;quot;AttachStderr&amp;quot;: false,
            &amp;quot;Tty&amp;quot;: false,
            &amp;quot;OpenStdin&amp;quot;: false,
            &amp;quot;StdinOnce&amp;quot;: false,
            &amp;quot;Env&amp;quot;: [
                &amp;quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;quot;
            ],
            &amp;quot;Cmd&amp;quot;: [
                &amp;quot;/bin/sh&amp;quot;,
                &amp;quot;-c&amp;quot;,
                &amp;quot;#(nop) &amp;quot;,
                &amp;quot;CMD [\&amp;quot;/bin/bash\&amp;quot;]&amp;quot;
            ],
            &amp;quot;ArgsEscaped&amp;quot;: true,
            &amp;quot;Image&amp;quot;: &amp;quot;sha256:9ab52bdd7c391413c7e0d83b56df4f6a0a6d2f03cb4c609fca1884ab2e63dab4&amp;quot;,
            &amp;quot;Volumes&amp;quot;: null,
            &amp;quot;WorkingDir&amp;quot;: &amp;quot;&amp;quot;,
            &amp;quot;Entrypoint&amp;quot;: null,
            &amp;quot;OnBuild&amp;quot;: null,
            &amp;quot;Labels&amp;quot;: {}
        },
        &amp;quot;DockerVersion&amp;quot;: &amp;quot;1.12.3&amp;quot;,
        &amp;quot;Author&amp;quot;: &amp;quot;&amp;quot;,
        &amp;quot;Config&amp;quot;: {
            &amp;quot;Hostname&amp;quot;: &amp;quot;6766fe1c072d&amp;quot;,
            &amp;quot;Domainname&amp;quot;: &amp;quot;&amp;quot;,
            &amp;quot;User&amp;quot;: &amp;quot;&amp;quot;,
            &amp;quot;AttachStdin&amp;quot;: false,
            &amp;quot;AttachStdout&amp;quot;: false,
            &amp;quot;AttachStderr&amp;quot;: false,
            &amp;quot;Tty&amp;quot;: false,
            &amp;quot;OpenStdin&amp;quot;: false,
            &amp;quot;StdinOnce&amp;quot;: false,
            &amp;quot;Env&amp;quot;: [
                &amp;quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&amp;quot;
            ],
            &amp;quot;Cmd&amp;quot;: [
                &amp;quot;/bin/bash&amp;quot;
            ],
            &amp;quot;ArgsEscaped&amp;quot;: true,
            &amp;quot;Image&amp;quot;: &amp;quot;sha256:9ab52bdd7c391413c7e0d83b56df4f6a0a6d2f03cb4c609fca1884ab2e63dab4&amp;quot;,
            &amp;quot;Volumes&amp;quot;: null,
            &amp;quot;WorkingDir&amp;quot;: &amp;quot;&amp;quot;,
            &amp;quot;Entrypoint&amp;quot;: null,
            &amp;quot;OnBuild&amp;quot;: null,
            &amp;quot;Labels&amp;quot;: {}
        },
        &amp;quot;Architecture&amp;quot;: &amp;quot;amd64&amp;quot;,
        &amp;quot;Os&amp;quot;: &amp;quot;linux&amp;quot;,
        &amp;quot;Size&amp;quot;: 128206574,
        &amp;quot;VirtualSize&amp;quot;: 128206574,
        &amp;quot;GraphDriver&amp;quot;: {
            &amp;quot;Name&amp;quot;: &amp;quot;aufs&amp;quot;,
            &amp;quot;Data&amp;quot;: null
        },
        &amp;quot;RootFS&amp;quot;: {
            &amp;quot;Type&amp;quot;: &amp;quot;layers&amp;quot;,
            &amp;quot;Layers&amp;quot;: [
                &amp;quot;sha256:d29d52f94ad5aa750bd76d24effaf6aeec487d530e262597763e56065a06ee67&amp;quot;,
                &amp;quot;sha256:dfcc17ddae9e5bab2da074f94856a2a1a42b21e402b49815bb4f87b048082ca5&amp;quot;,
                &amp;quot;sha256:1c53295311c1505bddc4d07d5992434de18243951059ab5ea7b2daf9cec1488a&amp;quot;,
                &amp;quot;sha256:18568efa7ad4beb199f7a9dc211b33fb2b165dcc0966c4c74af3f5ae396f3ec3&amp;quot;,
                &amp;quot;sha256:0d45be5b95d86888d2f6beda0fddb089ba61a3ddc514fdb0a4fd022aad19a392&amp;quot;
            ]
        }
    }
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;주요 정보는 다음과 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Image ID&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;생성일&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Docker version&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Image creator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CPU&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;이미지_태그_설정docker_tag&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#이미지_태그_설정docker_tag&quot;&gt;1.4. 이미지 태그 설정(docker tag)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker tag &amp;lt;image&amp;gt;[:tag] &amp;lt;docker hub 사용자명&amp;gt;/&amp;lt;image명&amp;gt;[:tag명]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Docker Hub에 생성된 이미지를 등록한다. 여기서 &lt;code&gt;docker images&lt;/code&gt; 커맨드를 통해서 &lt;code&gt;IMAGE ID&lt;/code&gt;가 같음을 확인할 수 있는데, 두 개의 이미지가 이름은 다르나 동일 이미지를 사용한다는 것을 확인 할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/public/img/docker-basic-usage/docker-tag.png&quot; alt=&quot;Docker Tag&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;이미지_검색docker_search&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#이미지_검색docker_search&quot;&gt;1.5. 이미지 검색(docker search)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker search [옵션] &amp;lt;검색 키워드&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Docker Hub에 공개된 이미지를 검색할 때 사용되는 커맨드다.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;옵션&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;–automated=false&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Automated Build만 표시&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;–no-trunc=false&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;모든 결과 표시&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-s[–stars=0]&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;특정 개수 이상의 별 수&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;항목&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;NAME&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Docker Image명&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;DESCRIPTION&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Docker Image 설명&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;STARS&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;해당 이미지가 받은 별 수&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;OFFICIAL&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;공식 이미지 여부&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;AUTOMATED&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Dockerfile을 기반으로 자동 생성된 이미지 여부&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/public/img/docker-basic-usage/docker-search.png&quot; alt=&quot;Docker Search&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;이미지_삭제docker_rmi&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#이미지_삭제docker_rmi&quot;&gt;1.6. 이미지 삭제(docker rmi)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker rmi [옵션] &amp;lt;이미지명&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Docker Image를 삭제할 때 사용한다. 여러 이미지를 삭제하고자 할 때는 공백으로 여러 이미지명을 구분하여 입력한다.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;옵션&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-f, –force=false&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;이미지 강제 삭제&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;–no-prune=false&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;태그가 없는 부모 이미지를 삭제하지 않음&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/public/img/docker-basic-usage/docker-rmi.png&quot; alt=&quot;Docker RMI&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;docker_hub에_로그인docker_login&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#docker_hub에_로그인docker_login&quot;&gt;1.7. Docker Hub에 로그인(docker login)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker login [옵션] [서버명]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Docker Hub에 업로드 할 때 docker login 커맨드를 사용해 Docker Hub에 로그인 한다.
서버명을 입력하지 않으면 Docker Hub에 액세스한다. 다른 repository로 로그인 할 경우에는 해당 서버명을 입력한다.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;옵션&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-u, –username=&amp;quot;&quot;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;사용자명
-p, –password=&quot;&quot;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;패스워드
-e, –email=&quot;&amp;quot;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;이메일 주소&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;$ docker login
Login with your Docker ID to push and pull images from Docker Hub. If you dont have a Docker ID, head over to https://hub.docker.com to create one.
Username: 사용자명
Password: 패스워드
Login Succeeded&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;이미지_업로드docker_push&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#이미지_업로드docker_push&quot;&gt;1.8. 이미지 업로드(docker push)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker push &amp;lt;이미지명&amp;gt;[:태그명]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Docker Hub에 이미지를 업로드할 때 &lt;code&gt;docker push&lt;/code&gt; 커맨드를 사용한다.
&lt;code&gt;docker push&lt;/code&gt; 커맨드 사용을 위해서는 &lt;code&gt;docker login&lt;/code&gt;을 해야한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;$ docker push nuti0102/ubuntu:1.0
The push refers to a repository [docker.io/nuti0102/ubuntu]
0d45be5b95d8: Mounted from library/ubuntu
18568efa7ad4: Mounted from library/ubuntu
1c53295311c1: Mounted from library/ubuntu
dfcc17ddae9e: Mounted from library/ubuntu
d29d52f94ad5: Mounted from library/ubuntu
1.0: digest: sha256:3b64c309deae7ab0f7dbdd42b6b326261ccd6261da5d88396439353162703fb5 size: 1357&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/public/img/docker-basic-usage/docker-push.png&quot; alt=&quot;Docker Push&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;docker_hub에서_로그아웃docker_logout&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#docker_hub에서_로그아웃docker_logout&quot;&gt;1.9. Docker Hub에서 로그아웃(docker logout)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;docker logout [서버명]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Docker Hub에서 로그아웃할 때 &lt;code&gt;docker logout&lt;/code&gt; 커맨드를 사용한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;$ docker logout
Remove login credentials for https://index.docker.io/v1/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2016-12-04T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>TensorFlow Intro</title>
      <link>https://blog.nuti.pe.kr/2016/11/28/tensorflow-intro/</link>
      <updated>2016-11-28T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2016/11/28/tensorflow-intro</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;딥러닝이란&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#딥러닝이란&quot;&gt;1. 딥러닝이란?&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;사람의 학습 능력을 모방하기 위해 다양한 컴퓨터 알고리즘과 방법론을 연구하는 분야&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;신경망 알고리즘&lt;/code&gt;을 주로 사용하는 머신 러닝의 한 분야&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;인공 신경망&lt;/code&gt;이라는 표현이 조금 더 적절할 수 있으나 포괄적인 의미로서 딥 러닝이라고 불림&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;신경세포&lt;/code&gt;의 구조에서 착안하여 고안된 알고리즘을 사용&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;신경세포의 특징을 바탕으로 1957년 &lt;code&gt;프랭크 로젠블랫(Frank Rosenblatt)&lt;/code&gt;이 개발한 &lt;code&gt;퍼셉트론&lt;/code&gt; 알고리즘이 딥 러닝과 많은 머신 러닝 알고리즘의 기초가 됨&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;perceptron&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#perceptron&quot;&gt;2. Perceptron&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;하나의 &lt;code&gt;퍼셉트론&lt;/code&gt;은 하나의 신경세포를 인공적으로 모델링한 &lt;code&gt;뉴런(neuron)&lt;/code&gt;이라 표현한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;입력값 &lt;code&gt;X1&lt;/code&gt;, &lt;code&gt;X2&lt;/code&gt;가 있을 때 각각 가중치 &lt;code&gt;W1&lt;/code&gt;, &lt;code&gt;W2&lt;/code&gt;를 곱한 후 더한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;X1 x W1 + X2 x W2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;만족스로운 결과가 나올 떄 까지 가중치 &lt;code&gt;W1&lt;/code&gt;, &lt;code&gt;W2&lt;/code&gt;를 조정한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;신경망_구조&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#신경망_구조&quot;&gt;3. 신경망 구조&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;신경세포 하나가 처리하는 정보는 단순하지만, 수천 억에서 1조 개에 달하는 많은 수의 신경세포가 거미줄처럼 얽혀 있어 복잡한 정보를 가공할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;신경망은 여러 개의 뉴런이 하나의 계층을 형성하며, 이런 계층을 다시 어러 개 쌓아 올린다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;연결된 뉴런끼리 얼마만큼 정보를 주고받을지의 가중치를 매번 조절하여 신경망에 있는 모든 뉴런간의 연결을 최적화 하는 과정을 &lt;code&gt;학습&lt;/code&gt; 또는 &lt;code&gt;훈련&lt;/code&gt;이라 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;계층&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;입력계층&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;신경망에서 데이터를 입력받는 계층&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;출력계층&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;결과값을 만들어내는 계층&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;은닉계층&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;입력계층&lt;/code&gt;과 &lt;code&gt;은닉계층&lt;/code&gt; 사이에 끼어있는 계층&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;구조&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;심층 신경망(DNN)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;입력계층&lt;/code&gt;, &lt;code&gt;출력계층&lt;/code&gt;, &lt;code&gt;은닉계층&lt;/code&gt;으로 나누어짐&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;합성곱 신경망(CNN)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;이미지 안의 물체를 인식하거나 이미지의 장면을 글로 요약하는데 많이 사용됨&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;순환 신경망(RNN)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;???&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#references&quot;&gt;4. References&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;조르디 토레스 . 박해선 &lt;a href=&quot;https://tensorflow.blog/%ED%85%90%EC%84%9C%ED%94%8C%EB%A1%9C-%EC%B2%AB%EA%B1%B8%EC%9D%8C/&quot;&gt;텐서플로우 첫걸음&lt;/a&gt; . 한빛미디어, pp. 23-31&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2016-11-28T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>NapuCon 2016 Review</title>
      <link>https://blog.nuti.pe.kr/2016/11/25/napucon-2016-review/</link>
      <updated>2016-11-25T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2016/11/25/napucon-2016-review</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;napucon_2016_후기&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#napucon_2016_후기&quot;&gt;1. NapuCon 2016 후기&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;지금까지 컨퍼런스를 그렇게 많이 다닌 것은 아니지만 여태까지 참석한 컨퍼런스중에 가장 만족스러운 컨퍼런스였다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;작은 기업에서 사수가 없는 개발자로 생활을 하면서 서적, 블로그, 커뮤니티 등을 통해 습득한 지식을 나름대로 적용하고, 적용 여부를 검토하곤 했었는데
내가 잘 하고 있는 것이 맞나? 라는 생각과 누군가가 조언을 해 줄 사람이 있었으면 좋겠다는 생각에 답답해 하고 있었는데, 이번 컨퍼런스에서 그 답답함을 해결해 줬다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;케빈님을 통해서는 그 전에 케빈TV 를 보면서도 느꼇지만 역시 개발자는 잔실수로 삽질을 자주 하는구나 라는 것을 깨닫게 되었고,
Rakuten의 전민수, 심재민 Architect님들을 통해 큰 규모에서는 저런식으로 요구사항을 맞춰가고, 어떤식으로 처리하는 지에 대해 알게되어 너무 좋았다.
데니스 님을 통해서는 요즘 관심이 있어 공부를 시작한 Docker에 대해 들어서 트렌드를 잘 쫓아가고 있는 지에 대해 검증을 받은 느낌이어서 좋았다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;개인적으로 세번째 세션과 마지막 세션, 치즈님과 박미정님의 발표가 가장 좋았다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;치즈님의 발표를 통해서 지금까지 개인적으로 공부하고, 적용하고 있는 부분들이 잘 하고있는지를 검토받은 느낌이 들었다.
그리고, 초고수가 되기 위해 본인이 했던 일들에 대해 들은 것이 나에게 많은 자극이 되었다.
개발자로써 성장하고 싶지만 아직까지 그렇게 많은 노력을 하고있진 않다는 것을 깨닫게 해주셨다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;박미정님의 발표는 스타트업에 합류한 이후 본인이 기존의 문제를 해결해 나가는 과정을 설명해주셔서 너무 좋았다.
물론 회사 대표를 잘 설득을 해야 된다는 큰 어려움이 있지만, 그 어려움을 극복하고 문제를 해결한 모습이 너무 대단해 보였다.
박미정님의 발표 마지막에 질문으로 아무리 노력을 해도 대표가 설득이 되지 않고,
거리가 좁혀지지 않을 경우 박미정님은 어떤 선택을 할 지에 대한 답변은 정말 현실적인 답변이어서 웃기기도 했지만,
앞으로 내가 어떻게 할지에 대해 다시한번 생각해보게 되는 계기가 되었다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;어떻게 보면 자바8 스승님인 케빈님과 사진을 찍지 않은 것이 뒤늦게 후회가 되지만 정말 좋은 컨퍼런스였고, 많은 것을 배우게 되었다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2016-11-25T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>NapuCon 2016</title>
      <link>https://blog.nuti.pe.kr/2016/11/25/napu-con-2016/</link>
      <updated>2016-11-25T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2016/11/25/napu-con-2016</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;session_1_kevin_lee&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#session_1_kevin_lee&quot;&gt;1. Session 1 - Kevin Lee&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;funtional_programming&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#funtional_programming&quot;&gt;1.1. Funtional Programming&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;함수형 언어란&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;수학의 함수와 같은 의미&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;함수형 언어를 사용해야 하는 이유(함수형 언어의 장점)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;동시성 - 유휴자원을 최소화 하여 서버를 최대한 활용하기 위함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;간결 - 코드의 질과 가독성이 높아짐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;명확 - 기능별 분리 및 메소드의 관심사가 명확해짐&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트가 간결해진다 - 레거시 코드 양산 방지&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Side Effect가 OOP보다 줄어든다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;재미가 있음?????????&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;etc&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#etc&quot;&gt;1.2. ETC&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Test Case 작성의 필수라고 생각되는 Mock을 사용하지 않고 Interpreter Pattern을 통해 Test Code 작성하는 방법이 있음&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;session_2_rakuten_전민수_lead_architect_rakuten_심재민_architect&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#session_2_rakuten_전민수_lead_architect_rakuten_심재민_architect&quot;&gt;2. Session 2 - Rakuten 전민수 Lead Architect, Rakuten 심재민 Architect&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;rakuten의_구조_및_업무_프로세스_rakuten_심재민_architect&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#rakuten의_구조_및_업무_프로세스_rakuten_심재민_architect&quot;&gt;2.1. Rakuten의 구조 및 업무 프로세스 - Rakuten 심재민 Architect&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Application Layer Architect + System Layer Architect&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;각 영역의 Architect가 설계&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;누군가는 기술 검증 및 적용 여부 검토를 해서 적용&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;잘 적용하고있는지, 바르게 사용하고 있는지 피드백 및 교육을 진행&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;레거시 방지를 위해서 일정 부분에 대해서는 룰을 정해서 룰을 따라감&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;업무 관련 Software&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JIRA&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bitbucket&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Confluence&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HipChat&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integrated Development Environment Tool&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Eclipse&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IntelliJ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Persistence Middleware&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MySQL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oracle&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MongoDB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Redis&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hadoop&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cassandra&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Web (Application) Server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apache&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apache Tomcat&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Programming Language &amp;amp; Framework&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Framework&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Laravel Framework&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Angular JS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Software Development Methodology&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Agile과 Waterfall을 혼용&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;rakuten의_realtime_search_platform_적용_사례_rakuten_전민수_lead_architect&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#rakuten의_realtime_search_platform_적용_사례_rakuten_전민수_lead_architect&quot;&gt;2.2. Rakuten의 Realtime Search Platform 적용 사례 - Rakuten 전민수 Lead Architect&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;verifications&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#verifications&quot;&gt;2.2.1. Verifications&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Horizontal Scale Out&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Low Latency&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trouble Shooting&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Service Level Agreement 99.95%&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fault Tolerance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cost Efficiency&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flexibility&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sync with Master Data&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;target_middleware&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#target_middleware&quot;&gt;2.2.2. Target Middleware&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MongoDB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;적합 판정으로 채택&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MemSQL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;검증 결과 부적합 판정으로 제외&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cassandra&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java에서 Cassandra 사용에 대한 어려움이 존해&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특정 상황에서 퍼포먼스가 떨어지는 현상이 있음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oracle Coherence&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;비용 문제로 인하여 제외&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ActiveMQ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;검증 결과 부적합 판정으로 제외&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RabbitMQ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;적합 판정으로 채택&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Redis&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;당시 Clustering지원이 되지 않아 고민 후 자체 기술력으로 해결&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;how_to&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#how_to&quot;&gt;2.2.3. How To&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front Response &lt;code&gt;2,000ms&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Backend Response &lt;code&gt;500ms&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Master - Slave Cache Memory DB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;지속적으로 Logging 및 Tracking&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;지속적으로 Monitoring &lt;code&gt;APM Management&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Release Service include build CI / CD pipeline&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;result&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#result&quot;&gt;2.2.4. Result&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Provides reliable NoSQL-based search&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;99.98% guarantee data Sync with Master DB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Removing repetitive tasks in Automation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Supports 11 languages&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;session_3_kakao_서지연cheese&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#session_3_kakao_서지연cheese&quot;&gt;3. Session 3 - Kakao 서지연(Cheese)&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;아름다운_코드_작성_습관&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#아름다운_코드_작성_습관&quot;&gt;3.1. 아름다운 코드 작성 습관&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;룰을_정하자&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#룰을_정하자&quot;&gt;3.1.1. 룰을 정하자&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;가독성이 좋아야 한다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;유지보수를 생각해야 된다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;코드확장을 고려해야 된다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;style guide&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;코드_리뷰&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#코드_리뷰&quot;&gt;3.1.2. 코드 리뷰&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;sonarqube&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;정적 코드 분석 및 가시화&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;잠재 위험 코드 파악&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pull request로 진행&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pull approve&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;git_branch&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#git_branch&quot;&gt;3.1.3. Git Branch&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;기본적인 Branch 구조는 지키자&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;master - 운영 환경 적용 및 버전 관리용&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;develop - 개발 서버 적용 및 테스트 진행용&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hotfix - 긴급 수정 적용사항으로 master에서 파생하여 master와 develop에 바로 병합&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;feature - 신규 개발 진행용&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;자동_검증_습관&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#자동_검증_습관&quot;&gt;3.2. 자동 검증 습관&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CI / CD tool을 활용&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;빌드 / 배포 자동화&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트 자동화&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CI / CD tool&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;go&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Travis CI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jenkins&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code Coverage&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CODACY&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;레거시를 줄이자&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;성장하는_습관&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#성장하는_습관&quot;&gt;3.3. 성장하는 습관&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SNS Follow&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Community 활동&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스스로 노력&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;발표하기&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;session_4_makeus_김호광dennis_cto&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#session_4_makeus_김호광dennis_cto&quot;&gt;4. Session 4 - Makeus 김호광(Dennis) CTO&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;serverless_architecture&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#serverless_architecture&quot;&gt;4.1. Serverless Architecture&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;경주 지진 시 국민안전처 홈페이지 다운&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;동시접속자가 늘어나 Bandwith를 감당하지 못한 것으로 추측&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;공기관 홈페이지가 클라우드로 이전하는 것은 거의 불가능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AWS는 SLA가 없음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1,000건 중 2건정도 유실되는 것으로 확인&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;결론은 Docker를 사용하자&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;session_5_io_inc_박미정_cto&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#session_5_io_inc_박미정_cto&quot;&gt;5. Session 5 - I/O Inc 박미정 CTO&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;스타트업_극복기&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#스타트업_극복기&quot;&gt;5.1. 스타트업 극복기&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;스타트업 조인 시 이미 레거시로 가득&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;걷어낼 목록 정리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;우선순위 결정&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;점진적인 개선&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;함수형_언어_적용기&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#함수형_언어_적용기&quot;&gt;5.2. 함수형 언어 적용기&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;현재까지는 함수형으로 따라가는 중&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;한번에 변화하려 하지 않고, 조금씩 천천히 장점 파악 및 실제 적용 여부 검토중&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다른 사람들에게 변화를 강요하지 않고 스스로 받아들일 수 있도록 시도&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2016-11-25T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>Docker Intro</title>
      <link>https://blog.nuti.pe.kr/2016/11/19/docker-intro/</link>
      <updated>2016-11-19T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2016/11/19/docker-intro</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;docker&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#docker&quot;&gt;1. Docker?&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;introduction&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#introduction&quot;&gt;1.1. Introduction&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;컨테이너 가상화 기술을 사용하여 어플리케이션 실행 환경을 구축 및 운영하기 위한 플랫폼&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go 언어로 만들어졌고, 2013년부터 Docker사에서 개발&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인프라 환경을 컨테이너로 관리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Docker Hub에서 이미지를 공유&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;높은 이식성으로 개발 및 테스트 환경에서는 동작하지만 운영 환경에서는 동작하지 않는 리스크를 줄일 수 있음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;벤더(Cloud Service, OS)뿐만 아니라 여러 오픈소스와도 쉽게 연계할 수 있음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CI Tool(Jenkins)과 연계하면 테스트 자동화 및 무중단 배포도 가능&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;컨테이너_가상화란&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#컨테이너_가상화란&quot;&gt;1.2. 컨테이너 가상화란?&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;호스트 가상화(VMWare, VirtualBox), 하이퍼바이저 가상화(Windows 8 이상에서 지원)는 가상화 소프트웨어를 통해 OS와 하이퍼바이저 위에 또 다른 OS를 여러 개 구동시키며 그 자체로 많은 리소스를 필요로함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;호스트 OS상에서 논리적으로 컨테이너를 나눠 어플리케이션 동작을 위한 라이브러리와 어플리케이션 등을 컨테이너 안에 넣고, 개별 서버처럼 사용하는 것&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;오버헤드가 적어 가볍고 빠른 것이 특징&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;이식성&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#이식성&quot;&gt;1.3. 이식성&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;업무 어플리케이션 실행 모듈&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;미들웨어 라이브러리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OS 및 네트워크 등 인프라 환경 설정&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;기본_기능&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#기본_기능&quot;&gt;1.4. 기본 기능&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이미지 생성&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컨테이너 동작&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이미지 공개 및 공유&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;컴포넌트_종류&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#컴포넌트_종류&quot;&gt;1.5. 컴포넌트 종류&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;engine&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#engine&quot;&gt;1.5.1. Engine&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이미지 생성과 컴포넌트 구동 등을 위한 코어 기능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;커맨드 실행 및 이미지 생성 등을 수행&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;kitematic&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#kitematic&quot;&gt;1.5.2. Kitematic&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이미지 생성과 컴포넌트 구동 등을 위한 GUI 툴&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;registry&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#registry&quot;&gt;1.5.3. Registry&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이미지를 공개 및 공유하기 위한 기능&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;compose&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#compose&quot;&gt;1.5.4. Compose&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;여러 컨테이너의 구성 정보를 코드로 정의하고 커맨드를 통해 어플리케이션 실행 환경을 구성하는 컨테이너 통합 관리 툴&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;machine&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#machine&quot;&gt;1.5.5. Machine&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;클라우드 환경에 실행 환경을 커맨드로 자동 생성하기 위한 툴&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;swarm&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#swarm&quot;&gt;1.5.6. Swarm&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;여러 Docker gh스트를 클러스트화 하기 위한 툴&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Manager는 클러스터 관리와 API를 제공하며 Node는 Docker 컨테이너를 실행&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;namespace&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#namespace&quot;&gt;1.6. namespace&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;컨테이너를 구분하는 구조&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컨테이너라는 독립된 환경을 만들고 이를 나누어 어플리케이션 실행 환경을 만들 때 Linux Kernel의 namespace 기능을 사용&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2016-11-19T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>프론트 정적 리소스버전관리 및 독립 프로젝트로 분리</title>
      <link>https://blog.nuti.pe.kr/2016/05/20/infra/</link>
      <updated>2016-05-20T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2016/05/20/infra</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;프론트_정적_리소스javascript_css_버전_관리_및_was에서_분리&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#프론트_정적_리소스javascript_css_버전_관리_및_was에서_분리&quot;&gt;1. 프론트 정적 리소스(javascript, css) 버전 관리 및 WAS에서 분리&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;nginx(loadbalancing), WAS와 같은 구조로 서버를 운영할 때, 정적인 리소스도 모두 WAS에 올라가는데, 정적인 리소스는 굳이 WAS까지 갈 필요 없이 웹 서버에서 처리해도 되지 않을까 라는 생각과, 여기저기 흩어져 있는 javascript, css를 한곳에 모으기 위해 알아보기 시작&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(프로젝트가 여러개가 되면 동일한 javascript 코드나 css가 여기저기 흩어져있는게 싫기도 해서 알아보기 시작했다)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;결론적으로 원하는 그림대로 구성을 완료하기는 했지만 구조가 조금 복잡해진다는 단점이 생겼다&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;준비물&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#준비물&quot;&gt;1.1. 준비물&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;git&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nginx&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;npm&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bower&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;grunt&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nexus3(optional)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;step_1_webapp_project&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#step_1_webapp_project&quot;&gt;2. Step 1. webapp project&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;webapp project를 2개의 프로젝트로 나눈다. 전체적인 구조는 보통 사용하는 구조와 같고, &lt;code&gt;resources&lt;/code&gt; 디렉토리를 &lt;code&gt;git&lt;/code&gt;의 &lt;code&gt;submodule&lt;/code&gt; 프로젝트로 분리한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;submodule&lt;/code&gt; 설정 관련 정보는 &lt;a href=&quot;https://git-scm.com/docs/git-submodule&quot;&gt;여기&lt;/a&gt;에서 확인&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;submodule&lt;/code&gt;을 등록하면 아래와 같이 &lt;code&gt;.gitmodules&lt;/code&gt;파일이 생성된다.(굳이 &lt;code&gt;git command&lt;/code&gt;를 사용하여 &lt;code&gt;submodule&lt;/code&gt;을 등록하지 않고 &lt;code&gt;.gitmodules&lt;/code&gt;파일을 생성해서 정보를 입력해줘도 된다. 이 때, 해당 디렉토리가 반드시 존재해야 된다.)
&lt;code&gt;submodule&lt;/code&gt;을 등록하기 전에 두 개의 &lt;code&gt;git repository&lt;/code&gt;는 반드시 필요하다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;txt&quot;&gt;[submodule &amp;quot;src/main/webapp/resources&amp;quot;]
   path = src/main/webapp/resources
   url = git@your/repository.git&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;위 처럼 &lt;code&gt;path&lt;/code&gt;와 &lt;code&gt;git repository url&lt;/code&gt;을 등록하면 &lt;code&gt;submodule&lt;/code&gt;등록이 완료된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;최초 세팅 시 부모(?) 프로젝트를 받으며 &lt;code&gt;submodule&lt;/code&gt;프로젝트까지 받을려면 아래와 같이 하면 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;git clone --recursive git@your/parent/repository.git&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;step_2_resource_project&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#step_2_resource_project&quot;&gt;3. Step 2. resource project&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;resource project&lt;/code&gt;는 &lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;bower&lt;/code&gt;, &lt;code&gt;grunt&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;nexus(optional)&lt;/code&gt;을 사용한다.
우선 &lt;code&gt;npm&lt;/code&gt;으로 필요한 패키지 정보를 받는다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;npm init
npm install -g grunt bower&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이렇게 하면 &lt;code&gt;grunt&lt;/code&gt;와 &lt;code&gt;bower&lt;/code&gt; &lt;code&gt;command&lt;/code&gt;를 사용할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;여기서 &lt;code&gt;bower&lt;/code&gt;는 &lt;code&gt;nexus&lt;/code&gt;에 &lt;code&gt;package&lt;/code&gt;를 등록하고, 전체적인 프론트 프로젝트(뒤에서 설명)에서 &lt;code&gt;dependency&lt;/code&gt;를 추가하기 위해 사용한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;bower init&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;위의 명령어를 사용하면 bower가 초기화 되고, &lt;code&gt;bower.json&lt;/code&gt;파일이 생성된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;아래는 &lt;code&gt;bower.json&lt;/code&gt;파일의 정보다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;js&quot;&gt;{
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;0.0.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;description of package&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;css/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;js/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;img/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  ],
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  ],
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;license&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ISC&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;homepage&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ignore&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;**/.*&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;node_modules&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;bower_components&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;tests&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;package.json&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;여기서 &lt;code&gt;main&lt;/code&gt;은 프론트 프로젝트에서 사용할 파일, 디렉토리 목록을 나타낸 것이고, &lt;code&gt;ignore&lt;/code&gt;는 무시할 목록들이다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;bower&lt;/code&gt;에서 사용할 &lt;code&gt;version&lt;/code&gt;은 &lt;code&gt;bower.json&lt;/code&gt;에 등록(다른데다 해도 됨)한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;bower&lt;/code&gt;는 &lt;code&gt;git&lt;/code&gt;의 &lt;code&gt;tag&lt;/code&gt;기능을 사용해서 버전을 관리한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;예를들어 &lt;code&gt;git tag 1.0.0&lt;/code&gt; 명령으를 사용하고, 원격 저장소에 &lt;code&gt;push&lt;/code&gt;를 하면 해당 시점의 &lt;code&gt;commit&lt;/code&gt;이 &lt;code&gt;1.0.0&lt;/code&gt;이 되는 것이다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;매번 &lt;code&gt;git tag&lt;/code&gt; 명령어로 버전을 등록하기는 힘드므로 &lt;code&gt;grunt&lt;/code&gt;를 사용해서 자동화를 한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;우선 필요한 것은 &lt;code&gt;grunt-tag&lt;/code&gt;이다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;npm install --save-dev grunt-tag&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;grunt-git&lt;/code&gt;을 통해서도 관리를 할 수 있기는 하나, &lt;code&gt;grunt-tag&lt;/code&gt;가 중복된 버전이 있을 시 하위에 등록된 것을 지워주고, 신규로 등록을 해주고, 원격 저장소까지 자동으로 올려줘서 &lt;code&gt;grunt-tag&lt;/code&gt;를 선택했다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt; 파일과 동일한 위치에 &lt;code&gt;Gruntfile.js&lt;/code&gt;를 생성해준다. 파일의 내용은 아래와 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;js&quot;&gt;module.&lt;span class=&quot;function&quot;&gt;exports&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(grunt) {
   grunt.initConfig({
      &lt;span class=&quot;key&quot;&gt;tag&lt;/span&gt;: {
         &lt;span class=&quot;key&quot;&gt;options&lt;/span&gt;: {
            &lt;span class=&quot;comment&quot;&gt;// Create or move the tag (default: true)&lt;/span&gt;
            &lt;span class=&quot;key&quot;&gt;tag&lt;/span&gt;: &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;,
            &lt;span class=&quot;comment&quot;&gt;// Push the tag to remote (default: true)&lt;/span&gt;
            &lt;span class=&quot;key&quot;&gt;push&lt;/span&gt;: &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;,
            &lt;span class=&quot;comment&quot;&gt;// File where th read the version (default: package.json)&lt;/span&gt;
            &lt;span class=&quot;key&quot;&gt;file&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;bower.json&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
            &lt;span class=&quot;comment&quot;&gt;// Name of the tag (default: '&amp;lt;%= version %&amp;gt;')&lt;/span&gt;
            &lt;span class=&quot;key&quot;&gt;tagName&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;&amp;lt;%= version %&amp;amp;gt&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
            &lt;span class=&quot;comment&quot;&gt;// Message of the tag (default: 'Version &amp;lt;%= version %&amp;gt;')&lt;/span&gt;
            &lt;span class=&quot;key&quot;&gt;tagMsg&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;New version: &amp;lt;%= version %&amp;gt;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,    &lt;span class=&quot;comment&quot;&gt;// default: 'Version &amp;lt;%= version %&amp;gt;'&lt;/span&gt;
            &lt;span class=&quot;comment&quot;&gt;// The remote where to push the tag (default: 'origin')&lt;/span&gt;
            &lt;span class=&quot;key&quot;&gt;remote&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
         }
      }
   });

   grunt.loadNpmTasks(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;grunt-tag&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);

   grunt.registerTask(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]);
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;위의 내용은 &lt;code&gt;bower.json&lt;/code&gt; 파일에서 version 정보를 가져와 &lt;code&gt;git tag&lt;/code&gt;에 등록을 하고, &lt;code&gt;remote(origin)&lt;/code&gt; 저장소에 push를 하라는 내용이다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;버전 등록까지 완료가 됐으니 이제 &lt;code&gt;nexus&lt;/code&gt;에 등록을 하도록 한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;bower&lt;/code&gt;의 경우 &lt;code&gt;nexus&lt;/code&gt;에 등록을 하더라도 저장되는 정보는 어떤 &lt;code&gt;package&lt;/code&gt;가 어떤 &lt;code&gt;repository&lt;/code&gt;랑 연결돼 있는지에 대한 정보 뿐이니, &lt;code&gt;nexus&lt;/code&gt; 사용에 대한 필요성을 느끼지 못한다면 굳이 사용할 필요는 없다. 이런 사람은 이 파트는 그냥 넘어가도 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;나는 &lt;code&gt;git repository url&lt;/code&gt;을 사용하기 싫기도 하고, 기존에 &lt;code&gt;nexus&lt;/code&gt;를 사용하고 있어서 &lt;code&gt;nexus&lt;/code&gt;를 사용했다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;bower&lt;/code&gt;는 &lt;code&gt;nexus 3&lt;/code&gt;부터 지원이 되므로 &lt;code&gt;nexus 3&lt;/code&gt;이 필요하다. 무료 버전 다운로드는 &lt;a href=&quot;https://www.sonatype.com/download-oss-sonatype&quot;&gt;여기&lt;/a&gt;에서 할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;nexus 3&lt;/code&gt;를 설치를 하면 기본 설정으로 &lt;code&gt;bower repository&lt;/code&gt;는 생성되어 있지 않아서 신규로 생성을 해 줘야 한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;관련 정보는 &lt;a href=&quot;https://books.sonatype.com/nexus-book/3.0/reference/index.html&quot;&gt;여기&lt;/a&gt;를 참조하길 바란다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;npm&lt;/code&gt;을 통해 필요한 &lt;code&gt;패키지&lt;/code&gt;를 설치해준다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;npm install --save-dev bower-nexus3-resolver&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이제 &lt;code&gt;.bowerrc&lt;/code&gt; 라는 파일을 &lt;code&gt;bower.json&lt;/code&gt;과 같은 위치에 생성을 하고 아래와 같이 작성한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;js&quot;&gt;{
   &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : {
      &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : [
         &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://your/bower/nexus/repository/bower-public/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
      ],
      &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://ID:PASSWORD@your/bower/nexus/repository/bower-snapshots/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
   },
   &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;resolvers&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : [ &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;bower-nexus3-resolver&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;id&lt;/code&gt;와 &lt;code&gt;password&lt;/code&gt;는 &lt;code&gt;nexus&lt;/code&gt;에서 등록한 &lt;code&gt;repository&lt;/code&gt; 등록 권한이 있는 사용자 정보를 입력하면 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;참고로 id와 password에 특수문자를 사용할 수 있기는 하나 일반적인 url에서 규칙으로 사용되는 특수문자는 사용하면 안된다.(ex: /, #, @)*&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이렇게 작성을 한 후 커맨드 창에서 아래의 명령어를 입력한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;bower register your-package-name git@your.repository.git&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이렇게 하면 등록이 완료됐다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;아래의 명령어를 입력하면 &lt;code&gt;package&lt;/code&gt; 정보를 확인할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;bower info your-package-name&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;step_3_front_project&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#step_3_front_project&quot;&gt;4. Step 3. front project&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이 프로젝트에서는 전체적으로 사용하는 프론트 라이브러리나, 내가 만든 프론트 소스를 관리한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;여기서 필요한 툴은 아래와 같다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;npm&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bower&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;grunt&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nexus(optional)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;npm&lt;/code&gt;과 &lt;code&gt;bower&lt;/code&gt;를 초기화 한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;npm init
bower init&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;grunt&lt;/code&gt;와 &lt;code&gt;bower&lt;/code&gt;를 앞에서 &lt;code&gt;install&lt;/code&gt;했으므로 해당 명령은 건너뛴다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;nexus&lt;/code&gt;를 사용한다면 &lt;code&gt;bower-nexus3-resolver&lt;/code&gt; 패키지를 등록하고 &lt;code&gt;.bowerrc&lt;/code&gt;파일을 생성해서 아래와 같이 내용을 작성해 준다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;npm install --save-dev bower-nexus3-resolver&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;js&quot;&gt;{
   &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : {
      &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : [
         &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://nexus.mitpdev.co.kr/repository/bower-public&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
         &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://bower.herokuapp.com/packages&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
      ]
   },
   &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;resolvers&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : [ &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;bower-nexus3-resolver&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;bower&lt;/code&gt;에서 필요한 라이브러리 패키지 설치한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;bower install --save jquery bootstrap&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이렇게 하면 &lt;code&gt;bower.json&lt;/code&gt;파일에 &lt;code&gt;dependency&lt;/code&gt;가 추가된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;나는 라이브러리도 버전별로 등록을 하고 싶어서 아래와 같이 등록을 했다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;js&quot;&gt;{
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;package name&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;index.js&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  ],
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;license&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ISC&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;homepage&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;ignore&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;**/.*&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;node_modules&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;bower_components&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;tests&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  ],
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;jquery-2.2.3&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;jquery#2.2.3&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;bootstrap-3.3.6&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;bootstrap-css#3.3.6&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;my-package-0.0.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;my-package#0.0.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;만약 넥서스를 사용하지 않는다면 자신의 프로젝트를 아래와 같이 등록할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;js&quot;&gt;{
  ...
  &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
      ...
    &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;my-package-0.0.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;git@your/repository.git#0.0.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이렇게 전체적인 프론트 관리 프로젝트를 별도로 두는 이유는, 한 곳으로 모아서 &lt;code&gt;WAS&lt;/code&gt;가 아닌 &lt;code&gt;Web Server&lt;/code&gt;에 올리기 위함도 있지만, &lt;code&gt;javascript&lt;/code&gt;와 &lt;code&gt;css&lt;/code&gt;파일을 &lt;code&gt;난독화(minify)&lt;/code&gt;하고, &lt;code&gt;gzip&lt;/code&gt;으로 압축하기 위함이다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이제 &lt;code&gt;grunt&lt;/code&gt;를 통해 빌드 자동화를 하도록 한다.
&lt;code&gt;Gruntfile.js&lt;/code&gt; 파일을 생성하고, 커맨드창에 아래의 명령어를 입력한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;npm install --save-dev grunt-cli grunt-bower-task grunt-contrib-uglify grunt-contrib-cssmin grunt-contrib-compress&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Gruntfile.js&lt;/code&gt;는 아래와 같이 내용을 채워준다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;js&quot;&gt;module.&lt;span class=&quot;function&quot;&gt;exports&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(grunt) {
   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; path = require(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);

   grunt.initConfig({
      &lt;span class=&quot;key&quot;&gt;pkg&lt;/span&gt;: grunt.file.readJSON(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;package.json&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;),
      &lt;span class=&quot;key&quot;&gt;bower&lt;/span&gt;: {
         &lt;span class=&quot;key&quot;&gt;install&lt;/span&gt;: {
            &lt;span class=&quot;key&quot;&gt;options&lt;/span&gt;: {
               &lt;span class=&quot;key&quot;&gt;copy&lt;/span&gt;: &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;,
               &lt;span class=&quot;key&quot;&gt;targetDir&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;./static&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
               &lt;span class=&quot;key&quot;&gt;install&lt;/span&gt;: &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;,
               &lt;span class=&quot;function&quot;&gt;layout&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(type, component, source) {
                  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sourcePath = source.replace(&lt;span class=&quot;regexp&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;^.*&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;([a-zA-Z]+)$&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);

                  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sourcePath.indexOf(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;bower_components&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) &amp;amp;gt= &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;) {
                     sourcePath = source.replace(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;bower_components&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt; + component + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;char&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
                     sourcePath = sourcePath.replace(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;bower_components/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt; + component + &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
                  }

                  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; path.join(component, sourcePath);
               }
            }
         }
      },
      &lt;span class=&quot;key&quot;&gt;cssmin&lt;/span&gt;: {
         &lt;span class=&quot;key&quot;&gt;options&lt;/span&gt;: {
            &lt;span class=&quot;comment&quot;&gt;// 'min', 'gzip'&lt;/span&gt;
            &lt;span class=&quot;key&quot;&gt;report&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
         },
         &lt;span class=&quot;key&quot;&gt;target&lt;/span&gt;: {
            &lt;span class=&quot;key&quot;&gt;files&lt;/span&gt;: [{
               &lt;span class=&quot;key&quot;&gt;expand&lt;/span&gt;: &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;,
               &lt;span class=&quot;key&quot;&gt;cwd&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;static/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
               &lt;span class=&quot;key&quot;&gt;src&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;**/*.css&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;!**/*.min.css&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;],
               &lt;span class=&quot;key&quot;&gt;dest&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;static/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
               &lt;span class=&quot;key&quot;&gt;ext&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.min.css&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
               &lt;span class=&quot;key&quot;&gt;extDot&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;            }]
         }
      },
      &lt;span class=&quot;key&quot;&gt;uglify&lt;/span&gt;: {
         &lt;span class=&quot;key&quot;&gt;options&lt;/span&gt;: {
            &lt;span class=&quot;comment&quot;&gt;// false, 'none', 'min', 'gzip'&lt;/span&gt;
            &lt;span class=&quot;key&quot;&gt;report&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
            &lt;span class=&quot;key&quot;&gt;compress&lt;/span&gt;: {
               &lt;span class=&quot;key&quot;&gt;drop_console&lt;/span&gt;: &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;
            },
            &lt;span class=&quot;comment&quot;&gt;// false, 'all', 'some', Function&lt;/span&gt;
            &lt;span class=&quot;key&quot;&gt;preserveComments&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
         },
         &lt;span class=&quot;key&quot;&gt;target&lt;/span&gt;: {
            &lt;span class=&quot;key&quot;&gt;files&lt;/span&gt;: [{
               &lt;span class=&quot;key&quot;&gt;expand&lt;/span&gt;: &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;,
               &lt;span class=&quot;key&quot;&gt;cwd&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;static/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
               &lt;span class=&quot;key&quot;&gt;src&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;**/*.js&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;!**/*.min.js&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;],
               &lt;span class=&quot;key&quot;&gt;dest&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;static/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
               &lt;span class=&quot;key&quot;&gt;ext&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.min.js&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;            }]
         }
      },
      &lt;span class=&quot;key&quot;&gt;compress&lt;/span&gt;: {
         &lt;span class=&quot;key&quot;&gt;options&lt;/span&gt;: {
            &lt;span class=&quot;key&quot;&gt;mode&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;gzip&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
            &lt;span class=&quot;key&quot;&gt;level&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;5&lt;/span&gt;
         },
         &lt;span class=&quot;key&quot;&gt;target&lt;/span&gt;: {
            &lt;span class=&quot;key&quot;&gt;files&lt;/span&gt;: [{
               &lt;span class=&quot;key&quot;&gt;expand&lt;/span&gt;: &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;,
               &lt;span class=&quot;key&quot;&gt;cwd&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;static/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
               &lt;span class=&quot;key&quot;&gt;src&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;**/*.js&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;],
               &lt;span class=&quot;key&quot;&gt;dest&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
               &lt;span class=&quot;key&quot;&gt;ext&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.js.gz&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
            }, {
               &lt;span class=&quot;key&quot;&gt;expand&lt;/span&gt;: &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;,
               &lt;span class=&quot;key&quot;&gt;cwd&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;static/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
               &lt;span class=&quot;key&quot;&gt;src&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;**/*.css&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;],
               &lt;span class=&quot;key&quot;&gt;dest&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
               &lt;span class=&quot;key&quot;&gt;ext&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.css.gz&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
            }, {
               &lt;span class=&quot;key&quot;&gt;expand&lt;/span&gt;: &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;,
               &lt;span class=&quot;key&quot;&gt;cwd&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;static/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
               &lt;span class=&quot;key&quot;&gt;src&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;**/*.min.js&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;],
               &lt;span class=&quot;key&quot;&gt;dest&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
               &lt;span class=&quot;key&quot;&gt;ext&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;.min.js.gz&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
            }, {
               &lt;span class=&quot;key&quot;&gt;expand&lt;/span&gt;: &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;,
               &lt;span class=&quot;key&quot;&gt;cwd&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;static/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
               &lt;span class=&quot;key&quot;&gt;src&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;**/*.min.css&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;],
               &lt;span class=&quot;key&quot;&gt;dest&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;,
               &lt;span class=&quot;key&quot;&gt;ext&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;min.css.gz&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
            }]
         }
      }
   });

   grunt.loadNpmTasks(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;grunt-bower-task&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
   grunt.loadNpmTasks(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;grunt-contrib-cssmin&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
   grunt.loadNpmTasks(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;grunt-contrib-uglify&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
   grunt.loadNpmTasks(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;grunt-contrib-compress&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);

   grunt.registerTask(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;bower&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;cssmin&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;uglify&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;compress&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]);
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;bower task&lt;/code&gt;에서 &lt;code&gt;layout&lt;/code&gt;은 파일들의 디렉토리를 어떻게 나눌 것인지에 대한 내용이다. 기본 값은 &lt;code&gt;byType&lt;/code&gt;인데 이대로는 내가 원하는 구조대로 되지 않아서 해당 부분을 수정했다. &lt;code&gt;cssmin&lt;/code&gt;과 &lt;code&gt;uglify&lt;/code&gt;는 각각 &lt;code&gt;css&lt;/code&gt;와 &lt;code&gt;javascript&lt;/code&gt; 파일을 &lt;code&gt;난독화(minify)&lt;/code&gt;하는 것이고, &lt;code&gt;compress&lt;/code&gt;는 &lt;code&gt;gzip&lt;/code&gt;으로 압축하는 것이다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;grunt&lt;/code&gt;는 &lt;code&gt;registerTask&lt;/code&gt;에서 등록한 순서대로 해당 명령들을 실행한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;위같은 경우는 &lt;code&gt;bower&lt;/code&gt; -&amp;gt; &lt;code&gt;cssmin&lt;/code&gt; -&amp;gt; &lt;code&gt;uglify&lt;/code&gt; -&amp;gt; &lt;code&gt;compress&lt;/code&gt; 순으로 실행하게 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이제 &lt;code&gt;command&lt;/code&gt;창에서 &lt;code&gt;grunt&lt;/code&gt; 명령어를 입력하면 &lt;code&gt;bower_components&lt;/code&gt; 디렉토리와 &lt;code&gt;static&lt;/code&gt; 디렉토리가 생성되는 것을 확인할 수 있다. 여기서 &lt;code&gt;bower_components&lt;/code&gt;는 설정하기 위해 필요한 파일들을 받아오는 역할만 할 뿐이므로 지워도 된다. 여기서 확인해야 될 것은 &lt;code&gt;static&lt;/code&gt; 디렉토리다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;각각의 패키지별로 디렉토리가 생성되고, &lt;code&gt;js&lt;/code&gt;, &lt;code&gt;css&lt;/code&gt;파일이 나누어져서 구성되어 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;또한 &lt;code&gt;min&lt;/code&gt; 파일과 &lt;code&gt;gzip&lt;/code&gt;으로 압축한 파일들이 들어있는데, 여기서 필요없는 파일들은 &lt;code&gt;Gruntfile.js&lt;/code&gt; 파일을 각자 입맛대로 수정해서 지우면 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이 프로젝트 또한 &lt;code&gt;git repository&lt;/code&gt;에 등록해서 서버에서 사용한다.(나는 &lt;code&gt;bower_components&lt;/code&gt;, &lt;code&gt;node_modules&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt; 디렉토리에 &lt;code&gt;gitignore&lt;/code&gt;를 걸어놓고 실제 이 프로젝트는 의존성만 관리하는 식으로 등록해놨다 실제 빌드는 서버에서 수행하도록 했다.)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;step_4_front_projectserver&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#step_4_front_projectserver&quot;&gt;5. Step 4. front project(server)&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;front project를 서버에 세팅한다.
&lt;code&gt;git&lt;/code&gt;으로 관리하므로 우선 &lt;code&gt;clone&lt;/code&gt;을 받는다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;git clone git@front/project/repository.git&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;그리고 &lt;code&gt;grunt&lt;/code&gt;로 빌드를 한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이것으로 설정은 끝났다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;step_5_nginx&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#step_5_nginx&quot;&gt;6. Step 5. nginx&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이제 &lt;code&gt;nginx&lt;/code&gt;설정을 한다.
&lt;code&gt;nginx&lt;/code&gt;에서 &lt;code&gt;gzip&lt;/code&gt; 설정을 하고, &lt;code&gt;root&lt;/code&gt;를 등록해준다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;gzip.conf&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;txt&quot;&gt;gzip on;
gzip_disable &amp;quot;Mozilla/4&amp;quot;;
gzip_disable &amp;quot;msie6&amp;quot;;
gzip_static on;
gzip_vary on;
gzip_min_length 100;
gzip_buffers 4 32k;
gzip_http_version 1.1;
gzip_comp_level 2;
gzip_types
        text/plain
        text/javascript
        text/css
        application/javascript;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;txt&quot;&gt;server {
        listen          80;
        server_name     resources.your.domain;

        root    /your/front/project/directory/static;

        access_log      /var/log/nginx/resources_acces.log;
        error_log       /var/log/nginx/resources_error.log;

        location / {
        }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;nginx&lt;/code&gt;를 재실행 한다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;service nginx restart&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이제 모든 설정이 끝났다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;etc&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#etc&quot;&gt;7. ETC…&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;추가로 &lt;code&gt;webapp&lt;/code&gt; 프로젝트에서 설정해 줘야 할 것이 개발시, &lt;code&gt;build&lt;/code&gt;시 &lt;code&gt;resource path&lt;/code&gt;를 다르게 설정하는 것인데, 이것은 각자의 프로젝트에서 사용하는 빌드 툴에 따라 알아서 설정하면 된다.
&lt;code&gt;maven&lt;/code&gt;의 경우 &lt;code&gt;profile&lt;/code&gt;을 활용해서 &lt;code&gt;properties&lt;/code&gt; 파일을 바꿔치는 방법이 있다.
또한, &lt;code&gt;build&lt;/code&gt;시 &lt;code&gt;webapp&lt;/code&gt; 프로젝트에서 &lt;code&gt;resources&lt;/code&gt; 디렉토리를 &lt;code&gt;exclude&lt;/code&gt;를 하는 설정을 하면 모든 설정이 완료된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이렇게 설정함으로써 프로젝트 구조 자체는 복잡해지지만, 여러 프로젝트가 있을 경우, 공통된 &lt;code&gt;javascript&lt;/code&gt;를 모두 각각의 서버에 올릴 필요도 없고, 버전 관리까지 되므로, 리소스 캐시에 대한 문제점도 사라지게 된다.(혼자만의 생각)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;각 서버별 사용하는 리소스의 버전도 &lt;code&gt;properties&lt;/code&gt;에 등록을 해서 관리한다면, 프론트 리소스의 버전이 올라갔을 때 &lt;code&gt;properties&lt;/code&gt;에 등록된 버전만 수정하면 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2016-05-20T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>MariaDB Replication(복제) 설정</title>
      <link>https://blog.nuti.pe.kr/2016/05/04/mariadb-replication/</link>
      <updated>2016-05-04T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2016/05/04/mariadb-replication</id>
      <content type="html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;replication&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#replication&quot;&gt;1. Replication?&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Replication&lt;/code&gt;은 &lt;code&gt;MariaDB&lt;/code&gt;에서 제공하는 &lt;code&gt;Master-Slave&lt;/code&gt;간에 데이터를 복제(이중화)하는 기능입니다.
&lt;code&gt;MariaDB&lt;/code&gt;에서는 &lt;code&gt;Replication&lt;/code&gt;외에도 &lt;code&gt;Galera Cluster&lt;/code&gt;를 이용하는 방법도 있습니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;적용 환경&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Master OS       : CentOS 7
Master DMBS     : MariaDB 10.1.11&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Slave OS        : CentOS 7
Slave DBMS      : MariaDB 10.1.11&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Replication&lt;/code&gt; 설정 시 &lt;code&gt;Master&lt;/code&gt;와 &lt;code&gt;Slave&lt;/code&gt;에 동일한 구조의 DB나 TABLE이 존재해야 합니다.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;master_설정&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#master_설정&quot;&gt;1.1. Master 설정&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;/etc/my.cnf.d/&lt;/code&gt; 에서 &lt;code&gt;server.cnf&lt;/code&gt;(혹은 &lt;code&gt;my.cnf&lt;/code&gt;)파일에 다음과 같이 설정합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;plain&quot;&gt;[mysqld]
server-id               = 1
log_bin                 = /var/log/mysql/mariadb-bin
log_bin_index           = /var/log/mysql/mariadb-bin.index
expire_logs_days        = 10
max_binlog_size         = 100M&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;여기서 &lt;code&gt;/var/log/mysql/&lt;/code&gt;은 소유자가 &lt;code&gt;mysql&lt;/code&gt;이어야 합니다.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;그 후 DBMS 재시작을 합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;service mariadb restart&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;MariaDB&lt;/code&gt;에 접속하여 &lt;code&gt;Replication&lt;/code&gt; 사용자를 생성합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;CREATE USER 'replication_user'@'%' IDENTIFIED BY 'password';
GRANT REPLICATION SLAVE ON *.* TO replication_user;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;운영중인 서버라면 &lt;strong&gt;DB에 락&lt;/strong&gt;을 걸어주고 &lt;code&gt;MASTER&lt;/code&gt;정보를 조회합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;FLUSH TABLES WITH READ LOCK; # 운영중인 서버라면 테이블에 락을 걸어준다.
SHOW MASTER STATUS; # MASTER 정보를 조회&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;plain&quot;&gt;+--------------------+----------+--------------+------------------+
| File               | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+--------------------+----------+--------------+------------------+
| mariadb-bin.000005 |     2033 |              |                  |
+--------------------+----------+--------------+------------------+&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;여기서 File과 Position은 &lt;code&gt;Slave&lt;/code&gt; 설정 시 필요하니 잘 기억해 두세요.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;slave_설정&quot;&gt;&lt;a class=&quot;link&quot; href=&quot;#slave_설정&quot;&gt;1.2. Slave 설정&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;/etc/my.cnf.d/&lt;/code&gt; 에서 &lt;code&gt;server.cnf&lt;/code&gt;(혹은 &lt;code&gt;my.cnf&lt;/code&gt;)파일에 다음과 같이 설정합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;plain&quot;&gt;[mysqld]
server-id               = 2
log_bin                 = /var/log/mysql/mariadb-bin
log_bin_index           = /var/log/mysql/mariadb-bin.index
expire_logs_days        = 10
max_binlog_size         = 100M
relay_log               = /var/log/mysql/relay-bin
relay_log_index         = /var/log/mysql/relay-bin.index
relay_log_info_file     = /var/log/mysql/relay-bin.info
log_slave_updates
replicate-ignore-db     = test
replicate-ignore-db     = information_schema
replicate-ignore-db     = mysql&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;replicate-ignore-db&lt;/code&gt;는 복제하지 않을 DB를 지정해주는 것입니다.
&lt;code&gt;replicate-ignore-db&lt;/code&gt; 외에도 &lt;code&gt;replicate-do-table&lt;/code&gt;, &lt;code&gt;replicate-do-db&lt;/code&gt; 등 특정 DB 혹은 테이블만 지정해서 복제하는 방법도 있습니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이제 DBMS를 재시작 합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;service mariadb restart&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이제 &lt;code&gt;mariadb&lt;/code&gt;에 접속하여 다음의 명령어를 실행시킵니다.
여기서 &lt;code&gt;MASTER_LOG_FILE&lt;/code&gt;과 &lt;code&gt;MASTER_LOG_POS&lt;/code&gt;는 &lt;code&gt;Master&lt;/code&gt; 정보(&lt;code&gt;Master&lt;/code&gt; 설정 시 조회한 정보)와 동일하게 설정합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;CHANGE MASTER TO
MASTER_HOST='Master IP',
MASTER_USER='replication_user',
MASTER_PASSWORD='password',
MASTER_PORT=portNumber,
MASTER_LOG_FILE='Master File',
MASTER_LOG_POS=Master Position,
MASTER_CONNECT_RETRY=10;

FLUSH PRIVILEGES;

START SLAVE;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;SHOW SLAVE STATUS\G;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;plain&quot;&gt;*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: ip
                  Master_User: replication_user
                  Master_Port: port
                Connect_Retry: 10
              Master_Log_File: master file
          Read_Master_Log_Pos: master pos
               Relay_Log_File: relay file
                Relay_Log_Pos: relay pos
        Relay_Master_Log_File: relay master file
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
              Replicate_Do_DB:
          Replicate_Ignore_DB: test,information_schema,mysql
           Replicate_Do_Table:
       Replicate_Ignore_Table:
      Replicate_Wild_Do_Table:
  Replicate_Wild_Ignore_Table:
                   Last_Errno: 0
                   Last_Error:
                 Skip_Counter: 0
          Exec_Master_Log_Pos: exec master pos
              Relay_Log_Space: relay log space
              Until_Condition: None
               Until_Log_File:
                Until_Log_Pos: 0
           Master_SSL_Allowed: No
           Master_SSL_CA_File:
           Master_SSL_CA_Path:
              Master_SSL_Cert:
            Master_SSL_Cipher:
               Master_SSL_Key:
        Seconds_Behind_Master: 0
Master_SSL_Verify_Server_Cert: No
                Last_IO_Errno: 0
                Last_IO_Error:
               Last_SQL_Errno: 0
               Last_SQL_Error:
  Replicate_Ignore_Server_Ids:
             Master_Server_Id: 1
               Master_SSL_Crl:
           Master_SSL_Crlpath:
                   Using_Gtid: No
                  Gtid_IO_Pos:
      Replicate_Do_Domain_Ids:
  Replicate_Ignore_Domain_Ids:
                Parallel_Mode: conservative&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;위의 명령어를 통해 &lt;code&gt;slave&lt;/code&gt; 상태를 조회할 수 있습니다.
&lt;code&gt;slave&lt;/code&gt;상태를 조회 시 에러가 없다면 설정이 완료되었습니다.
이제 &lt;code&gt;Master&lt;/code&gt;로 다시 돌아가서 락을 해제합니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;UNLOCK TABLES;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2016-05-04T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>MariaDB Automatically Daily Dump(매일 백업하기)</title>
      <link>https://blog.nuti.pe.kr/2016/05/04/mariadb-daily-backup/</link>
      <updated>2016-05-04T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2016/05/04/mariadb-daily-backup</id>
      <content type="html">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;우선 아래와 같은 쉘 스크립트를 만든다.
아래의 스크립트는 &lt;code&gt;DBMS&lt;/code&gt;에 있는 모든 DB에서 특정 DB를 제외한 DB를 덤프하는 스크립트다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;#!/bin/bash

# Database credentials
user=&amp;quot;user_name&amp;quot;
password=&amp;quot;password&amp;quot;
host=&amp;quot;localhost&amp;quot;

# Other options
backup_path=&amp;quot;/your/path/to/backup&amp;quot;
date=$(date +&amp;quot;%Y-%m-%d&amp;quot;)

# To create a new directory into backup directory location
mkdir -p $backup_path/$date

# get a list of databases
db_names=`mysql -u$user -p$password -e &amp;quot;SHOW DATABASES;&amp;quot; | grep -Ev &amp;quot;(information_schema|test|performance_schema|mysql)&amp;quot;`

# Dupm database into SQL file
for db_name in $db_names; do
        mysqldump --add-locks --add-drop-table --force --user=$user --password=$password --host=$host $db_name | gzip &amp;gt; $backup_path/$date/$db_name.sql.gz
done

# Delete files older than 10 days
find $backup_path/* -mtime +10 -exec rm {} \;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;스크립트를 다 만들었으면 &lt;code&gt;crontab&lt;/code&gt;에 등록을 한다.(&lt;code&gt;crontab&lt;/code&gt;이 설치가 안돼있을 경우에는 설치부터, 설치 과정은 생략)
크론은 &lt;code&gt;CentOS 7&lt;/code&gt; 기준으로 &lt;code&gt;/etc/cron.d/&lt;/code&gt; 디렉토리에 등록하면 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;# For Details see man 4 crontabs

# Example of job definition:

# .---------------- minute (0 - 59)
# |  .------------- hour (0 - 23)
# |  |  .---------- day of month (1 - 31)
# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
# |  |  |  |  |
# *  *  *  *  * user-name command to be executed

0 1 * * * user_name /your/path/to/script/script.sh&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;이렇게 하면 매일 오전 1시에 크론이 위의 스크립트를 실행하여 DB를 덤프한다.&lt;/p&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2016-05-04T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>nginx proxy 설정</title>
      <link>https://blog.nuti.pe.kr/2015/06/27/nginx-proxy/</link>
      <updated>2015-06-27T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2015/06/27/nginx-proxy</id>
      <content type="html">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;/etc/nginx/&lt;/code&gt;의 하위 디렉토리인 &lt;code&gt;conf.d&lt;/code&gt;로 들어가서 &lt;code&gt;xxxx.conf&lt;/code&gt; 파일 생성&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;해당 파일에 아래와 같은 정보 입력&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;plain&quot;&gt;server {
        listen 80;
        server_name your.domain.com;

        access_log /var/log/admin/access.log;
        error_log /var/log/admin/error.log;

        location / {
                proxy_pass_header Server;
                proxy_set_header Host $http_host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Scheme $scheme;
                proxy_pass http://127.0.0.1:8080;
        }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;저장 후 &lt;code&gt;nginx&lt;/code&gt; 재시작&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;service nginx restart&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;기본 &lt;code&gt;nginx&lt;/code&gt;설정이라면 &lt;code&gt;conf.d&lt;/code&gt; 에 있는 파일을 모두 불러와서 로딩시켜주므로 별도의 설정은 필요 없음&lt;/p&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2015-06-27T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>자바 Swing Graphics 이미지 그리기 및 밝기 변화를 이용한 애니메이션 효과</title>
      <link>https://blog.nuti.pe.kr/2014/05/03/java-swing-graphics-animation/</link>
      <updated>2014-05-03T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2014/05/03/java-swing-graphics-animation</id>
      <content type="html">&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**
 *
 * @param g - Graphics의 객체
 * @param imgStr - 이미지 파일 이름
 * @param str - 이미지 위에 띄울 멘트
 */&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; drawMyImg(&lt;span class=&quot;predefined-type&quot;&gt;Graphics&lt;/span&gt; g, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; imgStr, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; str) {
    setBackground(&lt;span class=&quot;predefined-type&quot;&gt;Color&lt;/span&gt;.white);
    &lt;span class=&quot;predefined-type&quot;&gt;Image&lt;/span&gt; img = loadImage(imgStr);
    g.drawImage(img, &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;, m_width, m_height, &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;);
    setBright(g, str);
}

&lt;span class=&quot;comment&quot;&gt;/**
 * 이미지 불러오기
 * @param name - 이미지 파일이름
 * @return - 이미지 객체
 */&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Image&lt;/span&gt; loadImage(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; name) {
    &lt;span class=&quot;predefined-type&quot;&gt;Image&lt;/span&gt; result = &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;;
    &lt;span class=&quot;predefined-type&quot;&gt;MediaTracker&lt;/span&gt; tracker = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;MediaTracker&lt;/span&gt;(&lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;);

    &lt;span class=&quot;predefined-type&quot;&gt;Toolkit&lt;/span&gt; toolkit = &lt;span class=&quot;predefined-type&quot;&gt;Toolkit&lt;/span&gt;.getDefaultToolkit();
    result = toolkit.getImage(name);
    tracker.addImage(result, &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
        tracker.waitForAll();
    } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;exception&quot;&gt;InterruptedException&lt;/span&gt; e) {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;;
    }

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;
}

&lt;span class=&quot;comment&quot;&gt;/**
 * 밝기정보 변화 및 글자 그리기(애니메이션 효과)
 * @param g - Graphics의 객체
 * @param str - 화면에 띄울 문자
 */&lt;/span&gt;
&lt;span class=&quot;directive&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; setBright(&lt;span class=&quot;predefined-type&quot;&gt;Graphics&lt;/span&gt; g, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; str) {
    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; brightness = (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)(&lt;span class=&quot;integer&quot;&gt;256&lt;/span&gt; - &lt;span class=&quot;integer&quot;&gt;256&lt;/span&gt; * percentage);

    g.setColor(strColor);

    g.drawString(str, m_width/&lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;-(str.length()/&lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;)*mulSize, str_height);
    g.setColor(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;Color&lt;/span&gt;(&lt;span class=&quot;integer&quot;&gt;255&lt;/span&gt;,&lt;span class=&quot;integer&quot;&gt;255&lt;/span&gt;,&lt;span class=&quot;integer&quot;&gt;255&lt;/span&gt;,brightness));

        g.fillRect(&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;, getWidth(), getHeight());
        percentage += &lt;span class=&quot;float&quot;&gt;0.01f&lt;/span&gt;;
        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
            &lt;span class=&quot;predefined-type&quot;&gt;Thread&lt;/span&gt;.sleep(sleepTime);
        } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;exception&quot;&gt;Exception&lt;/span&gt; e) {

        }
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (percentage &amp;gt; &lt;span class=&quot;float&quot;&gt;0.99f&lt;/span&gt;) {
            step++;
            percentage=initPercentage;
            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
                &lt;span class=&quot;predefined-type&quot;&gt;Thread&lt;/span&gt;.sleep(sleepLastTime);
            } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;exception&quot;&gt;Exception&lt;/span&gt; e) {

            }
        }
        repaint();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2014-05-03T00:00:00+00:00</pubDate>
    </item>
    
    <item>
      <title>자바 음향효과(BGM)</title>
      <link>https://blog.nuti.pe.kr/2014/05/03/java-bgm/</link>
      <updated>2014-05-03T00:00:00+00:00</updated>
      <id>https://blog.nuti.pe.kr/2014/05/03/java-bgm</id>
      <content type="html">&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;predefined-type&quot;&gt;AudioClip&lt;/span&gt; clip;
&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
&lt;span class=&quot;error&quot;&gt; &lt;/span&gt;&lt;span class=&quot;error&quot;&gt; &lt;/span&gt;&lt;span class=&quot;error&quot;&gt; &lt;/span&gt;&lt;span class=&quot;error&quot;&gt; &lt;/span&gt;&lt;span class=&quot;predefined-type&quot;&gt;File&lt;/span&gt; file = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;File&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;resources/bgm/bgm.wav&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
&lt;span class=&quot;error&quot;&gt; &lt;/span&gt;&lt;span class=&quot;error&quot;&gt; &lt;/span&gt;&lt;span class=&quot;error&quot;&gt; &lt;/span&gt;&lt;span class=&quot;error&quot;&gt; &lt;/span&gt;clip = &lt;span class=&quot;predefined-type&quot;&gt;Applet&lt;/span&gt;.newAudioClip(file.toURL());
&lt;span class=&quot;error&quot;&gt; &lt;/span&gt;&lt;span class=&quot;error&quot;&gt; &lt;/span&gt;&lt;span class=&quot;error&quot;&gt; &lt;/span&gt;&lt;span class=&quot;error&quot;&gt; &lt;/span&gt;clip.play();
} &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;exception&quot;&gt;Exception&lt;/span&gt; e) {
&lt;span class=&quot;error&quot;&gt; &lt;/span&gt;&lt;span class=&quot;error&quot;&gt; &lt;/span&gt;&lt;span class=&quot;error&quot;&gt; &lt;/span&gt;&lt;span class=&quot;error&quot;&gt; &lt;/span&gt;e.printStackTrace();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
      <author>Hyeonil Jeong</author>
      <pubDate>2014-05-03T00:00:00+00:00</pubDate>
    </item>
    
  </channel>
</rss>
